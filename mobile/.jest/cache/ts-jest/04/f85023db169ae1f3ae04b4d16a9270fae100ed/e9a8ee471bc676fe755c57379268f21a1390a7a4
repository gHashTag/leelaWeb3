[["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx",{"fileContent":"// src/components/Gem/Gem.test.tsx\nimport React from 'react'\nimport {render, fireEvent} from '@testing-library/react-native'\nimport {Gem} from '../'\n\ndescribe('Gem Component', () => {\n  test('should have the correct testID prop', () => {\n    const {getByTestId} = render(<Gem planNumber={5} onPress={() => {}} />)\n    const gemImage = getByTestId('gem-image')\n    expect(gemImage).toBeDefined()\n  })\n\n  test('should call the onPress function when pressed', () => {\n    const onPressMock = jest.fn()\n    const {getByTestId} = render(<Gem planNumber={5} onPress={onPressMock} />)\n    const gemContainer = getByTestId('gem-container')\n    fireEvent.press(gemContainer)\n    expect(onPressMock).toHaveBeenCalled()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/index.ts",{"fileContent":"// export * from './AppContainer'\n// export * from './Avatar'\n// export * from './Input'\n// export * from './VerticalLine'\n// export * from './Space'\nexport * from './GameBoard'\nexport * from './MarkdownView'\n// export * from './Background'\nexport * from './Dice'\n// export * from './Tab'\n// export * from './Header'\n// export * from './RenderPlanItem'\n// export * from './EmojiText'\nexport * from './Gem'\n// export * from './Row'\n// export * from './CenterView'\n// export * from './IconLeela'\n// export * from './Loading'\n// export * from './Spin'\n// export * from './HeaderMaster'\n// export * from './VideoPlayer'\n// export * from './CreatePost'\n// export * from './ImageSwiper'\n// export * from './Avatar'\n// export * from './Buttons'\n// export * from './Cards'\nexport * from './Text'\n// export * from './Fallback'\n// export * from './SocialLinks'\n// export * from './KeyboardContainer'\n// export * from './EmptyComments'\n// export * from './HeaderMessage'\n// export * from './HistoryStep'\n// export * from './YouTubePlayer'\n// export * from './Img'\n// export * from './SecondaryTab'\n// export * from './OwnTabView'\n// export * from './Pressable'\n// export * from './PurchaseButton'\n// export * from './CustomBubble'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/constants.ts","/Users/playra/LeelaAiWeb3/src/components/GameBoard/images/index.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/images/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx",{"fileContent":"import React, {useRef} from 'react'\nimport {Animated, Easing, Pressable, StyleSheet} from 'react-native'\nimport {vs} from 'react-native-size-matters'\n\nexport interface DiceProps {\n  disabled?: boolean\n  rollDice: () => void\n  lastRoll: number\n  size?: 'small' | 'medium' | 'large'\n}\n\nconst getImage = (number: number) => {\n  switch (number) {\n    case 1:\n      return require('./assets/1.png')\n    case 2:\n      return require('./assets/2.png')\n    case 3:\n      return require('./assets/3.png')\n    case 4:\n      return require('./assets/4.png')\n    case 5:\n      return require('./assets/5.png')\n    case 6:\n      return require('./assets/6.png')\n  }\n}\n\nconst Dice = ({\n  disabled = false,\n  rollDice,\n  lastRoll,\n  size = 'medium',\n}: DiceProps & {lastRoll: number}) => {\n  const spinValue = useRef(new Animated.Value(0)).current\n\n  const spin = spinValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '360deg'],\n  })\n\n  const animateDice = (): void => {\n    if (disabled) {\n      return\n    }\n\n    spinValue.setValue(0)\n    Animated.timing(spinValue, {\n      toValue: 10,\n      duration: 2000,\n      easing: Easing.cubic,\n      useNativeDriver: true,\n    }).start(() => {\n      rollDice()\n    })\n  }\n\n  const getSize = () => {\n    switch (size) {\n      case 'small':\n        return vs(50)\n      case 'large':\n        return vs(120)\n      case 'medium':\n      default:\n        return vs(80)\n    }\n  }\n\n  return (\n    <Pressable\n      onPress={animateDice}\n      style={styles.diceContainer}\n      testID=\"dice-component\">\n      <Animated.Image\n        style={[\n          styles.image,\n          {transform: [{rotate: spin}], height: getSize(), width: getSize()},\n        ]}\n        source={getImage(lastRoll)}\n        testID=\"dice-image\"\n      />\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  diceContainer: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    marginVertical: vs(12),\n  },\n  image: {\n    height: vs(65),\n    width: vs(65),\n  },\n})\n\nexport {Dice}\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx",{"fileContent":"import React from 'react'\nimport {View, Image, Pressable} from 'react-native'\nimport {ScaledSheet, ms} from 'react-native-size-matters'\nimport {ICONS} from './images'\nimport {gray} from '../../constants'\nimport {Text} from '../Text'\n\ninterface GemProps {\n  planNumber: number\n  player?: {\n    id: number\n    uri: string | number\n  }\n  onPress?: () => void\n}\n\nconst Gem: React.FC<GemProps> = ({planNumber, player, onPress}) => {\n  const {container, gems, circle} = styles\n\n  const source =\n    player?.uri &&\n    typeof player.uri === 'number' &&\n    player.uri >= 101 &&\n    player.uri <= 106\n      ? ICONS[player.uri - 101]\n      : player?.uri && typeof player.uri === 'string' && player.uri !== ''\n      ? {uri: player.uri}\n      : ICONS[0]\n\n  const isNumberVisible = !player && planNumber !== 68\n\n  return (\n    <Pressable onPress={onPress} testID=\"gem-container\">\n      <View style={container}>\n        {isNumberVisible ? (\n          <View style={[circle, gems]} testID=\"gem-image\">\n            <Text h={'h11'} title={planNumber.toString()} oneColor={gray} />\n          </View>\n        ) : (\n          <Image style={gems} source={source} testID=\"gem-image\" />\n        )}\n      </View>\n    </Pressable>\n  )\n}\n\nconst styles = ScaledSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 2,\n  },\n  gems: {\n    width: ms(42, 0.5),\n    height: ms(42, 0.5),\n    borderRadius: ms(42, 0.5) / 2,\n  },\n  circle: {\n    width: ms(44),\n    height: ms(44),\n    borderRadius: ms(44) / 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'transparent',\n  },\n})\n\nexport {Gem}\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Gem/images/index.ts","/Users/playra/LeelaAiWeb3/src/constants.ts","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/i18n.ts","/Users/playra/LeelaAiWeb3/src/types.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Gem/images/index.ts",{"fileContent":"export const ICONS = [\n  require('./one.png'),\n  require('./two.png'),\n  require('./three.png'),\n  require('./four.png'),\n  require('./five.png'),\n  require('./six.png'),\n]\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx",{"fileContent":"import {useTheme} from '@react-navigation/native'\nimport React, {memo} from 'react'\nimport {\n  Platform,\n  Text as RNText,\n  StyleProp,\n  StyleSheet,\n  TextProps,\n  TextStyle,\n  useColorScheme,\n} from 'react-native'\nimport {ms, s} from 'react-native-size-matters'\n\nexport const textStyles = StyleSheet.create({\n  h0: {\n    fontFamily: Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',\n    textShadowOffset: {width: 1, height: 1},\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(95, 0.5) : ms(95, 0.3),\n  },\n  h1: {\n    fontFamily: Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',\n    textShadowOffset: {width: 1, height: 1},\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(35, 0.3) : ms(35, 0.6),\n  },\n  h2: {\n    fontSize: Platform.OS === 'ios' ? s(20) : s(20),\n    fontFamily: 'Montserrat',\n  },\n  h3: {\n    fontFamily: 'Montserrat',\n    textShadowOffset: {width: 1, height: 1},\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(18, 0.6) : ms(18, 0.6),\n  },\n  h4: {\n    fontFamily: 'Montserrat',\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(15, 0.8) : s(15),\n  },\n  h5: {\n    fontSize: Platform.OS === 'ios' ? s(15) : s(15),\n    fontFamily: Platform.OS === 'ios' ? 'Avenir Next' : 'Montserrat',\n  },\n  h6: {\n    fontSize: Platform.OS === 'ios' ? s(15) : s(15),\n    fontFamily: 'Montserrat',\n  },\n  h7: {\n    fontSize: ms(15, 0.6),\n    fontFamily: 'Montserrat',\n    letterSpacing: 0.2,\n    lineHeight: ms(18.5, 0.6),\n  },\n  h8: {\n    fontSize: Platform.OS === 'ios' ? s(14) : s(14),\n    fontFamily: 'Montserrat',\n  },\n  h9: {\n    fontSize: Platform.OS === 'ios' ? s(13) : s(13),\n    fontFamily: 'NeutraText-Bold',\n  },\n  h10: {\n    fontSize: Platform.OS === 'ios' ? s(12) : s(12),\n    fontFamily: 'Montserrat',\n  },\n  h11: {\n    fontSize: Platform.OS === 'ios' ? s(10) : s(10),\n    fontFamily: 'Montserrat',\n  },\n  h12: {\n    fontSize: Platform.OS === 'ios' ? s(10) : s(10),\n    fontFamily: 'OxygenMono-Regular',\n  },\n})\n\nexport interface Icolors {\n  dark: string\n  light: string\n}\n\nexport type hT =\n  | 'h0'\n  | 'h1'\n  | 'h2'\n  | 'h3'\n  | 'h4'\n  | 'h5'\n  | 'h6'\n  | 'h7'\n  | 'h8'\n  | 'h9'\n  | 'h10'\n  | 'h11'\n  | 'h12'\n\nexport interface TxtT extends TextProps {\n  title: string\n  h?: hT\n  colors?: Icolors\n  oneColor?: string\n  textStyle?: StyleProp<TextStyle>\n}\n\nexport const Text = memo<TxtT>(\n  ({h, colors, title, oneColor, textStyle, ...textProps}) => {\n    const {\n      colors: {primary, text},\n    } = useTheme()\n    const scheme = useColorScheme()\n    const isDark = scheme === 'dark'\n    const curColor = oneColor\n      ? oneColor\n      : colors\n      ? isDark\n        ? colors.light\n        : colors.dark\n      : text\n\n    // если добавлен шрифт и у к нему не нужна тень\n    const noShadowFonts = ['h7', 'h1', 'h10', 'h12', 'h4']\n    const hasShadow = h ? !noShadowFonts.includes(h) : false\n\n    const hStyle = h\n      ? [\n          {...textStyles[h], color: curColor},\n          hasShadow && {textShadowColor: primary},\n        ]\n      : undefined\n\n    const mergedStyles = ScaledSheet.flatten([hStyle, textStyle])\n\n    return (\n      <RNText style={mergedStyles} {...textProps} testID=\"text-component\">\n        {title}\n      </RNText>\n    )\n  },\n)\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx",{"fileContent":"import {render} from '@testing-library/react-native'\nimport {Text, hT, textStyles} from './' // Replace with your actual file path\nimport React from 'react'\n\ndescribe('Text Component', () => {\n  it('renders correctly with default props', () => {\n    const {getByText} = render(<Text title=\"Test Title\" />)\n    expect(getByText('Test Title')).toBeTruthy()\n  })\n  it('applies the correct style based on the \"h\" prop', () => {\n    const styles: hT[] = [\n      'h0',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'h7',\n      'h8',\n      'h9',\n      'h10',\n      'h11',\n      'h12',\n    ]\n    styles.forEach(style => {\n      const {getByTestId} = render(<Text title=\"Test Title\" h={style} />)\n      const receivedStyle = getByTestId('text-component').props.style\n      expect(receivedStyle).toEqual(expect.objectContaining(textStyles[style]))\n    })\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx",{"fileContent":"import React from 'react'\nimport {render, fireEvent, act} from '@testing-library/react-native'\nimport {Dice, DiceProps} from './'\n\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper')\njest.mock('./Animated', () => {\n  return {\n    ...jest.requireActual('./Animated'),\n    createAnimatedComponent: (component: any) => {\n      return component\n    },\n  }\n})\n\ndescribe('Dice Component', () => {\n  let mockProps: DiceProps\n  beforeEach(() => {\n    mockProps = {\n      lastRoll: 1,\n      disabled: false,\n      rollDice: jest.fn(),\n    }\n    jest.useFakeTimers()\n  })\n\n  afterEach(() => {\n    jest.useRealTimers()\n  })\n\n  it('renders correctly with the provided props', () => {\n    const {getByTestId} = render(<Dice {...mockProps} />)\n    expect(getByTestId('dice-component')).toBeDefined()\n  })\n\n  it('calls the rollDice function on press when not disabled', () => {\n    const {getByTestId} = render(<Dice {...mockProps} />)\n\n    act(() => {\n      fireEvent.press(getByTestId('dice-component'))\n      jest.runAllTimers()\n    })\n\n    expect(mockProps.rollDice).toHaveBeenCalledTimes(1)\n  })\n\n  it('does not call the rollDice function on press when disabled', () => {\n    mockProps.disabled = true\n    const {getByTestId} = render(<Dice {...mockProps} />)\n\n    act(() => {\n      fireEvent.press(getByTestId('dice-component'))\n      jest.runAllTimers()\n    })\n\n    expect(mockProps.rollDice).not.toHaveBeenCalled()\n  })\n\n  it('updates dice image when rollDice function is called', () => {\n    const {getByTestId, rerender} = render(<Dice {...mockProps} />)\n\n    act(() => {\n      fireEvent.press(getByTestId('dice-component'))\n      jest.runAllTimers()\n    })\n\n    // Mock a new dice roll value\n    const newDiceRoll = 2\n    rerender(<Dice {...mockProps} lastRoll={newDiceRoll} />)\n\n    const diceImage = getByTestId('dice-image') // Assuming you have testID on Animated.Image\n    expect(diceImage.props.source).toEqual(\n      require(`./assets/${newDiceRoll}.png`),\n    )\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Space/Space.test.tsx",{"fileContent":"// Import libraries\nimport React from 'react'\nimport {render} from '@testing-library/react-native'\n\n// Import the component to be tested\nimport {Space} from './'\n\ndescribe('Space', () => {\n  it('renders correctly with default props', () => {\n    const {getByTestId} = render(<Space />)\n    const spaceComponent = getByTestId('space-component')\n\n    expect(spaceComponent.props.style).toEqual({height: 0, width: 0})\n  })\n\n  it('renders correctly with given height and width', () => {\n    const {getByTestId} = render(<Space height={10} width={20} />)\n    const spaceComponent = getByTestId('space-component')\n\n    expect(spaceComponent.props.style).toEqual({height: 10, width: 20})\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx",{"fileContent":"import React, {memo} from 'react'\n\nimport {View} from 'react-native'\n\ninterface SpaceT {\n  height?: number | string\n  width?: number | string\n}\n\nconst Space = memo<SpaceT>(({height, width}) => (\n  <View\n    testID=\"space-component\"\n    style={{height: Number(height) || 0, width: Number(width) || 0}}\n  />\n))\n\nexport {Space}\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx",{"fileContent":"import React, {useMemo} from 'react'\nimport {Image, ScaledSheet, View, useColorScheme} from 'react-native'\nimport {ms, mvs, s} from 'react-native-size-matters'\n\nimport {H, W} from '../../constants'\nimport {Gem} from '../Gem'\nimport {ICONS} from './images'\n\ninterface Player {\n  id: number\n  plan: number\n  uri: string | number\n}\n\ninterface GameBoardProps {\n  players: Player[]\n}\n\nconst marginTop = H - W > 350 ? 20 : 0\n\nconst imageHeight = s(248) + s(32)\nconst maxImageHeight = ms(248, 0.5) + s(32)\n\nconst imageTopMargin = Math.min(ms(27, 0.5), s(27))\nconst curImageHeight = Math.min(maxImageHeight, imageHeight) + imageTopMargin\n\nconst imageWidth = s(279) + s(18)\nconst maxImageWidth = ms(279, 0.5) + s(18)\nconst curImageWidth = imageWidth >= maxImageWidth ? maxImageWidth : imageWidth\n\nconst GameBoard: React.FC<GameBoardProps> = ({players}) => {\n  const scheme = useColorScheme()\n\n  const playerPositions = useMemo(() => {\n    const positions: {[key: number]: {id: number; uri: string | number}} = {}\n    players.forEach(player => {\n      positions[player.plan] = {id: player.id, uri: player.uri}\n    })\n    return positions\n  }, [players])\n\n  const imgObj = useMemo(() => {\n    const image = ICONS.find(x => {\n      return x.title === scheme\n    })?.path\n    if (image) {\n      const {width, height} = Image.resolveAssetSource(image)\n      const aspect = width / height\n      return {image, aspect}\n    } else {\n      return {image: '', aspect: 1}\n    }\n  }, [scheme])\n\n  const rows = [\n    [72, 71, 70, 69, 68, 67, 66, 65, 64],\n    [55, 56, 57, 58, 59, 60, 61, 62, 63],\n    [54, 53, 52, 51, 50, 49, 48, 47, 46],\n    [37, 38, 39, 40, 41, 42, 43, 44, 45],\n    [36, 35, 34, 33, 32, 31, 30, 29, 28],\n    [19, 20, 21, 22, 23, 24, 25, 26, 27],\n    [18, 17, 16, 15, 14, 13, 12, 11, 10],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n  ]\n\n  return (\n    <View\n      style={[styles.imageContainer, {width: curImageHeight * imgObj.aspect}]}\n      testID=\"gem-container\">\n      <Image source={imgObj.image} style={styles.bgImage} resizeMode=\"cover\" />\n      <View style={styles.gameBoardContainer}>\n        <View style={styles.container}>\n          {rows.map((a, i) => (\n            <View style={styles.row} key={i}>\n              {a.map((b, index) => (\n                <View key={index} style={styles.box}>\n                  <Gem planNumber={b} player={playerPositions[b]} />\n                </View>\n              ))}\n            </View>\n          ))}\n        </View>\n      </View>\n    </View>\n  )\n}\n\nconst styles = ScaledSheet.create({\n  container: {\n    marginTop: imageTopMargin,\n  },\n  imageContainer: {\n    height: curImageHeight,\n    alignSelf: 'center',\n    alignItems: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  gameBoardContainer: {\n    width: curImageWidth,\n    height: curImageHeight,\n    marginTop,\n  },\n  box: {\n    width: s(31),\n    height: s(31),\n    maxHeight: ms(31, 0.5),\n    maxWidth: ms(31, 0.5),\n    marginVertical: s(2),\n    marginHorizontal: s(1),\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: s(31) / 2,\n  },\n  bgImage: {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    top: mvs(33, 1.6) - imageTopMargin,\n  },\n})\n\nexport {GameBoard}\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/constants.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/images/index.ts","/Users/playra/LeelaAiWeb3/src/i18n.ts","/Users/playra/LeelaAiWeb3/src/types.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/images/index.ts","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx"]}],["/Users/playra/LeelaAiWeb3/src/constants.ts",{"fileContent":"//@ts-expect-error\nimport {LEELA_ID, OPEN_AI_KEY} from '@env'\nimport {createNavigationContainerRef} from '@react-navigation/native'\nimport * as Sentry from '@sentry/react-native'\nimport axios from 'axios'\nimport {Alert, Dimensions, Linking, Platform} from 'react-native'\nimport Rate from 'react-native-rate'\nimport i18next from './i18n'\nimport {ButtonsModalT, HandleCommentAiParamsT, MessageAIT} from './types'\n\nexport const primary = '#50E3C2'\nexport const secondary = '#ff06f4'\nexport const gray = '#808080'\nexport const white = '#ffffff'\nexport const black = '#1c1c1c'\nexport const dimGray = '#707070'\nexport const lightGray = '#D1CDCD'\nexport const classicRose = '#FDBEEA'\nexport const mustard = '#F3DE50'\nexport const fuchsia = '#FF06F4'\nexport const trueBlue = '#007ACD'\nexport const paleBlue = '#BEFCE5'\nexport const brightTurquoise = '#1EE4EC'\nexport const red = '#FC2847'\nexport const orange = '#FFB700'\nexport const blackOpacity = 'rgba(0, 0, 0, 0.8)'\nexport const grayBlackOpacity = 'rgba(139, 139, 139, 0.1)'\n\nexport const navRef = createNavigationContainerRef<any>()\n\nexport const navigate = (name: string, params?: any) => {\n  if (navRef.isReady()) {\n    navRef.navigate(name, params)\n  }\n}\n\nexport const generateComment = async ({\n  message,\n  systemMessage,\n  planText,\n}: MessageAIT): Promise<string> => {\n  try {\n    const response = await axios.post(\n      'https://api.openai.com/v1/chat/completions',\n      {\n        model: 'gpt-4-0314',\n        messages: [\n          {\n            role: 'system',\n            content: systemMessage,\n          },\n          {\n            role: 'user',\n            content: message,\n          },\n          {\n            role: 'assistant',\n            content: planText,\n          },\n        ],\n        max_tokens: 1000,\n        temperature: 0.5,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${OPEN_AI_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      },\n    )\n\n    return response?.data?.choices[0]?.message?.content ?? ''\n  } catch (error) {\n    captureException(error, 'generateComment')\n    throw error\n  }\n}\n\nexport const onLeaveFeedback = (onAction: (success: any) => void) => {\n  const options = {\n    AppleAppID: '1296604457',\n    GooglePackageName: 'com.leelagame',\n    OtherAndroidURL:\n      'https://play.google.com/store/apps/details?id=com.leelagame',\n    preferInApp: true,\n    openAppStoreIfInAppFails: true,\n  }\n  Rate.rate(options, onAction)\n}\n\nexport const handleCommentAi = async ({\n  curItem,\n  systemMessage,\n  message,\n  planText = ' ',\n}: HandleCommentAiParamsT): Promise<void> => {\n  const aiComment: string = await generateComment({\n    message,\n    systemMessage,\n    planText,\n  })\n  //   if (curItem && aiComment) {\n  //     await PostStore.createComment({\n  //       text: aiComment,\n  //       postId: curItem.id,\n  //       postOwner: curItem.ownerId,\n  //       ownerId: LEELA_ID,\n  //     })\n  //   }\n}\n\nexport function OpenNetworkModal() {\n  if (navRef.isReady()) {\n    navRef.navigate('NETWORK_MODAL')\n  }\n}\n\nexport function OpenUpdateVersionModal() {\n  if (navRef.isReady()) {\n    navRef.navigate('UPDATE_VERSION_MODAL')\n  }\n}\n\nexport function OpenExitModal() {\n  if (navRef.isReady()) {\n    navRef.navigate('EXIT_MODAL')\n  }\n}\n\ninterface VideoModalT {\n  uri: string\n  poster: string\n}\n\nexport function OpenVideoModal({uri, poster}: VideoModalT) {\n  if (navRef.isReady()) {\n    navRef.navigate('VIDEO_SCREEN', {uri, poster})\n  }\n}\n\nexport function OpenPlanReportModal(plan: number) {\n  if (navRef.isReady()) {\n    navRef.navigate('PLAN_REPORT_MODAL', {plan})\n  }\n}\n\nexport function OpenActionsModal(modalButtons: ButtonsModalT[]) {\n  if (navRef.isReady()) {\n    navRef.navigate('REPLY_MODAL', {buttons: modalButtons})\n  }\n}\n\nexport const banAlert = () => {\n  Alert.alert(\n    i18next.t('online-part.youBanned'),\n    i18next.t('online-part.banText'),\n    [{text: 'OK', onPress: () => navigate('HELLO')}],\n  )\n}\nexport const accountHasBanAlert = () => {\n  Alert.alert(i18next.t('online-part.accountBanned'), undefined, [{text: 'OK'}])\n}\n\nexport const captureException = (error: any, target: string) => {\n  if (!error) {\n    console.log(\n      '%c captureException called with messing or incorrect arguments',\n      'background: #555; color: yellow',\n    )\n    return\n  }\n  console.error(`On:${target}/ My Error: ${error} `)\n  if (!__DEV__) {\n    Sentry.captureException(error)\n  }\n}\n\nexport const win = Dimensions.get('window')\nexport const W = win.width\nexport const H = win.height\nexport const imgH = Math.round((W * 9) / 16)\nexport const isIos = Platform.OS === 'ios'\n\nexport const openUrl = async (url: string) => {\n  await Linking.openURL(url)\n}\n\nexport const goBack = () => {\n  if (navRef.isReady()) {\n    navRef.goBack()\n  }\n}\n//@ts-ignore\nexport const goHome = navigation => () => navigation.popToTop()()\n\nexport const revenuecat = 'BeIMIIfptWXlouosYudFEWQDkwDvJUzv'\n\nexport const defUrl =\n  'https://leelachakra.com/resource/LeelaChakra/Mantra/mantra.json'\n\nexport const ENTITLEMENT_ID = 'Pro'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/i18n.ts","/Users/playra/LeelaAiWeb3/src/types.ts","/Users/playra/LeelaAiWeb3/src/locales/ar/translation.json","/Users/playra/LeelaAiWeb3/src/locales/bn/translation.json","/Users/playra/LeelaAiWeb3/src/locales/en/translation.json","/Users/playra/LeelaAiWeb3/src/locales/fr/translation.json","/Users/playra/LeelaAiWeb3/src/locales/mr/translation.json","/Users/playra/LeelaAiWeb3/src/locales/ms/translation.json","/Users/playra/LeelaAiWeb3/src/locales/ru/translation.json","/Users/playra/LeelaAiWeb3/src/locales/te/translation.json","/Users/playra/LeelaAiWeb3/src/locales/tr/translation.json","/Users/playra/LeelaAiWeb3/src/locales/uk/translation.json"]}],["/Users/playra/LeelaAiWeb3/src/i18n.ts",{"fileContent":"import i18next from 'i18next'\nimport {isoCountry} from 'iso-country'\nimport {initReactI18next} from 'react-i18next'\nimport * as RNLocalize from 'react-native-localize'\n\nimport ar from './locales/ar/translation.json'\nimport bn from './locales/bn/translation.json'\nimport en from './locales/en/translation.json'\nimport fr from './locales/fr/translation.json'\nimport mr from './locales/mr/translation.json'\nimport ms from './locales/ms/translation.json'\nimport ru from './locales/ru/translation.json'\nimport te from './locales/te/translation.json'\nimport tr from './locales/tr/translation.json'\nimport uk from './locales/uk/translation.json'\n\nconst locales = RNLocalize.getLocales()\n\nif (!Array.isArray(locales) || locales.length === 0) {\n  throw new Error('No locales found')\n}\n\nexport const lang = locales[0]?.languageCode\nif (!lang) {\n  throw new Error('No language code found for first locale')\n}\n\nexport const flagEmoji = isoCountry(locales[0]?.countryCode)?.emoji ?? '🇷🇺'\n\nconst resources = {\n  ar: {\n    translation: ar,\n  },\n  bn: {\n    translation: bn,\n  },\n  en: {\n    translation: en,\n  },\n  fr: {\n    translation: fr,\n  },\n  mr: {\n    translation: mr,\n  },\n  ms: {\n    translation: ms,\n  },\n  ru: {\n    translation: ru,\n  },\n  te: {\n    translation: te,\n  },\n  tr: {\n    translation: tr,\n  },\n  uk: {\n    translation: uk,\n  },\n}\n\nfor (const [key, value] of Object.entries(resources)) {\n  if (typeof value !== 'object' || value === null) {\n    throw new Error(`Invalid locale data for language ${key}`)\n  }\n}\n\nexport const supportedLngs = [\n  'ar',\n  'bn',\n  'en',\n  'fr',\n  'mr',\n  'ms',\n  'ru',\n  'te',\n  'tr',\n  'uk',\n]\n\nexport const isSupportedLang = supportedLngs.includes(lang)\nexport const ruOrEnLang = lang === 'ru' ? 'ru' : 'en'\n\ni18next.use(initReactI18next).init(\n  {\n    compatibilityJSON: 'v3',\n    resources,\n    lng: isSupportedLang ? lang : ruOrEnLang,\n    debug: __DEV__,\n    interpolation: {\n      escapeValue: true,\n    },\n    react: {\n      useSuspense: false,\n    },\n    // keySeparator: false,\n  },\n  err => {\n    if (err) {\n      __DEV__ && console.error('Error initializing i18next:', err)\n    }\n  },\n)\n\nexport default i18next\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/locales/ar/translation.json","/Users/playra/LeelaAiWeb3/src/locales/bn/translation.json","/Users/playra/LeelaAiWeb3/src/locales/en/translation.json","/Users/playra/LeelaAiWeb3/src/locales/fr/translation.json","/Users/playra/LeelaAiWeb3/src/locales/mr/translation.json","/Users/playra/LeelaAiWeb3/src/locales/ms/translation.json","/Users/playra/LeelaAiWeb3/src/locales/ru/translation.json","/Users/playra/LeelaAiWeb3/src/locales/te/translation.json","/Users/playra/LeelaAiWeb3/src/locales/tr/translation.json","/Users/playra/LeelaAiWeb3/src/locales/uk/translation.json"]}],["/Users/playra/LeelaAiWeb3/src/components/GameBoard/images/index.ts",{"fileContent":"export const ICONS = [\n  {\n    path: require('./light.png'),\n    title: 'light'\n  },\n  {\n    path: require('./dark.png'),\n    title: 'dark'\n  }\n]\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx",{"fileContent":"import React from 'react'\nimport {render} from '@testing-library/react-native'\nimport {GameBoard} from '../'\n\nconst players = [\n  {\n    id: 2,\n    plan: 72,\n    uri: 106,\n  },\n  {\n    id: 4,\n    plan: 34,\n    uri: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/',\n  },\n]\n\ntest('should render the correct number of Gem components based on the players prop', () => {\n  const {getAllByTestId} = render(<GameBoard players={players} />)\n  const gemComponents = getAllByTestId('gem-container')\n  expect(gemComponents.length).toEqual(18) // Check the number of Gem components based on the provided players\n})\n\ntest('should render empty Gem component on plan without player', () => {\n  const {getByTestId} = render(<GameBoard players={players} />)\n  const emptyGem = getByTestId('empty-gem')\n  expect(emptyGem).toBeTruthy() // Check if the empty Gem component is rendered on a plan without a player\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx"]}]]