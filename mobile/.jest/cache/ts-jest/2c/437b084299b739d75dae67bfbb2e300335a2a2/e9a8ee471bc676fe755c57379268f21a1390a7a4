[["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx",{"fileContent":"// src/components/Gem/Gem.test.tsx\nimport React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\nimport renderer from 'react-test-renderer'\n\nimport { Gem } from '../'\n\nconst playerWithNumber = {\n  id: 1,\n  plan: 68,\n  avatar: '',\n}\n\nconst playerWithNumberAvatar = {\n  id: 3,\n  plan: 34,\n  avatar: 106,\n}\n\ndescribe('Gem Component', () => {\n  test('Gem component snapshot', () => {\n    const component = renderer.create(\n      <Gem player={playerWithNumber} planNumber={68} onPress={() => {}} />,\n    )\n\n    const tree = component.toJSON()\n    expect(tree).toMatchSnapshot()\n  })\n\n  test('should have the correct testID prop', () => {\n    const { getByTestId } = render(<Gem planNumber={5} onPress={() => {}} />)\n    const gemNumber = getByTestId('gem-number')\n    expect(gemNumber).toBeDefined()\n  })\n\n  test('should call the onPress function when pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(<Gem planNumber={5} onPress={onPressMock} />)\n    const gemContainer = getByTestId('gem-container')\n    fireEvent.press(gemContainer)\n    expect(onPressMock).toHaveBeenCalled()\n  })\n\n  test('should render number for player with plan number 68', () => {\n    const { queryByTestId } = render(\n      <Gem player={playerWithNumber} planNumber={68} />,\n    )\n\n    const numberGem = queryByTestId('gem-number')\n    expect(numberGem).toBeNull()\n\n    const imageGem = queryByTestId('player-gem-image')\n    expect(imageGem).toBeFalsy()\n  })\n\n  test('should render correctly for player with number avatar', () => {\n    const { getByTestId } = render(\n      <Gem player={playerWithNumberAvatar} planNumber={69} />,\n    )\n    const imageGem = getByTestId('player-gem-image')\n    expect(imageGem).toBeTruthy()\n  })\n\n  test('should call onPress function when gem is pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(\n      <Gem\n        player={playerWithNumberAvatar}\n        planNumber={69}\n        onPress={onPressMock}\n      />,\n    )\n    const gemContainer = getByTestId('gem-container')\n    fireEvent.press(gemContainer)\n    expect(onPressMock).toHaveBeenCalled()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/ShadowView/ShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/index.ts",{"fileContent":"export * from './Address'\nexport * from './Gem'\nexport * from './ActionButtons'\nexport * from './Space'\nexport * from './GameBoard'\nexport * from './MarkdownView'\nexport * from './NeomorphShadowView'\nexport * from './NeomorphCircle'\nexport * from './NeomorphBlurView'\nexport * from './NeomorphFlexView'\nexport * from './NeomorphView'\nexport * from './Avatar'\nexport * from './Buttons'\nexport * from './Background'\nexport * from './CenterView'\nexport * from './CommentBubbleLeft'\nexport * from './CommentBubbleRight'\nexport * from './Dice'\nexport * from './Display'\nexport * from './ReportCard'\nexport * from './TextInputField'\nexport * from './Text'\nexport * from './Header'\nexport * from './Pressable'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/Address.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/NeomorphShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonCircle/ButtonCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Button/Button.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonEdit/ButtonEdit.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonLink/ButtonLink.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonVectorIcon/ButtonVectorIcon.tsx","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/Header.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx",{"fileContent":"import React from 'react'\n\nimport { View, Image, Pressable, StyleSheet } from 'react-native'\n\nimport { gray, transparent } from 'cons'\nimport { ms } from 'react-native-size-matters'\nimport { GemProps } from 'types'\n\nimport { Text } from '../Text/Text'\n\nconst Gem: React.FC<GemProps> = ({ player, planNumber, onPress }) => {\n  let source\n\n  if (player?.avatar) {\n    if (typeof player.avatar === 'string' && player.avatar !== '') {\n      source = { uri: player.avatar }\n    } else if (typeof player.avatar === 'number') {\n      source = player.avatar\n    }\n  }\n\n  const isNumberVisible = !player && planNumber !== 68\n\n  return (\n    <Pressable onPress={onPress}>\n      <View style={styles.container} testID=\"gem-container\">\n        {isNumberVisible ? (\n          <View style={[styles.circle, styles.gems]} testID=\"gem-number\">\n            <Text\n              h={'h4'}\n              title={planNumber.toString()}\n              oneColor={gray}\n              testID=\"gem-text\"\n            />\n          </View>\n        ) : (\n          <View style={[styles.imgStyle, { zIndex: player?.id }]}>\n            {source && (\n              <Image\n                style={styles.gems}\n                source={source}\n                testID=\"player-gem-image\"\n              />\n            )}\n          </View>\n        )}\n      </View>\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  circle: {\n    alignItems: 'center',\n    backgroundColor: transparent,\n    borderRadius: ms(44) / 2,\n    height: ms(44),\n    justifyContent: 'center',\n    width: ms(44),\n  },\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  gems: {\n    borderRadius: ms(42, 0.5) / 2,\n    height: ms(42, 0.5),\n    width: ms(42, 0.5),\n  },\n  imgStyle: {\n    position: 'absolute',\n  },\n})\n\nexport { Gem }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx"]}],["/Users/playra/LeelaAiWeb3/src/cons/index.ts",{"fileContent":"import { Dimensions, Linking, Platform, NativeModules } from 'react-native'\n\nimport { OPEN_AI_KEY } from '@env'\nimport * as Sentry from '@sentry/react-native'\nimport axios from 'axios'\nimport Rate from 'react-native-rate'\nimport { MessageAIT, HandleCommentAiParamsT } from 'types'\n\nexport const primary = '#50E3C2'\nexport const secondary = '#ff06f4'\nexport const gray = '#808080'\nexport const white = '#ffffff'\nexport const black = '#303030'\nexport const dimGray = '#b4b3b3'\nexport const lightGray = '#F5F7F8'\nexport const classicRose = '#FDBEEA'\nexport const mustard = '#F3DE50'\nexport const fuchsia = '#FF06F4'\nexport const trueBlue = '#007ACD'\nexport const paleBlue = '#BEFCE5'\nexport const brightTurquoise = '#1EE4EC'\nexport const red = '#FC2847'\nexport const orange = '#FFB700'\nexport const blackOpacity = 'rgba(0, 0, 0, 0.8)'\nexport const grayBlackOpacity = 'rgba(139, 139, 139, 0.1)'\nexport const transparent = 'transparent'\n\nexport const generateComment = async ({\n  message,\n  systemMessage,\n  planText,\n}: MessageAIT): Promise<string> => {\n  try {\n    const response = await axios.post(\n      'https://api.openai.com/v1/chat/completions',\n      {\n        model: 'gpt-4-0314',\n        messages: [\n          {\n            role: 'system',\n            content: systemMessage,\n          },\n          {\n            role: 'user',\n            content: message,\n          },\n          {\n            role: 'assistant',\n            content: planText,\n          },\n        ],\n        max_tokens: 1000,\n        temperature: 0.5,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${OPEN_AI_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      },\n    )\n\n    return response?.data?.choices[0]?.message?.content ?? ''\n  } catch (error) {\n    captureException(error, 'generateComment')\n    throw error\n  }\n}\n\nexport const onLeaveFeedback = (onAction: (success: any) => void) => {\n  const options = {\n    AppleAppID: '1296604457',\n    GooglePackageName: 'com.leelagame',\n    OtherAndroidURL:\n      'https://play.google.com/store/apps/details?id=com.leelagame',\n    preferInApp: true,\n    openAppStoreIfInAppFails: true,\n  }\n  Rate.rate(options, onAction)\n}\n\nexport const handleCommentAi = async ({\n  curItem,\n  systemMessage,\n  message,\n  planText = ' ',\n}: HandleCommentAiParamsT): Promise<void> => {\n  const aiComment: string = await generateComment({\n    message,\n    systemMessage,\n    planText,\n  })\n\n  if (curItem && aiComment) {\n    // await PostStore.createComment({\n    //   text: aiComment,\n    //   postId: curItem.id,\n    //   postOwner: curItem.ownerId,\n    //   ownerId: LEELA_ID,\n    // })\n  }\n}\n\nexport const captureException = (error: any, target: string) => {\n  if (!error) {\n    console.log(\n      '%c captureException called with messing or incorrect arguments',\n      'background: #555; color: yellow',\n    )\n    return\n  }\n  console.error(`On:${target}/ My Error: ${error} `)\n  if (!__DEV__) {\n    Sentry.captureException(error)\n  }\n}\n\nexport const win = Dimensions.get('window')\nexport const W = win.width\nexport const H = win.height\nexport const imgH = Math.round((W * 9) / 16)\nexport const isIos = Platform.OS === 'ios'\n\nexport const openUrl = async (url: string) => {\n  await Linking.openURL(url)\n}\n\n//@ts-ignore\nexport const goHome = (navigation) => () => navigation.popToTop()()\n\nexport const ENTITLEMENT_ID = 'Pro'\n\nexport const getSystemLanguage = () => {\n  let languageCode = 'en' // Default to English\n\n  if (Platform.OS === 'android') {\n    languageCode = NativeModules.I18nManager.localeIdentifier\n  } else if (Platform.OS === 'ios') {\n    languageCode = NativeModules.SettingsManager.settings.AppleLocale\n  }\n\n  return languageCode.slice(0, 2).toLowerCase()\n}\n\ntype AccountHumanReadable = {\n  short: string\n  full: string\n}\n\nexport const accountHumanReadable = (\n  rlyAccount: string,\n): AccountHumanReadable => {\n  if (!rlyAccount) {\n    return {\n      short: '',\n      full: '',\n    }\n  }\n\n  const firstChars = rlyAccount.slice(0, 5)\n  const lastChars = rlyAccount.slice(rlyAccount.length - 9, rlyAccount.length)\n\n  return {\n    short: `${firstChars}...${lastChars}`,\n    full: rlyAccount,\n  }\n}\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx",{"fileContent":"import React, { memo } from 'react'\n\nimport {\n  Platform,\n  Text as RNText,\n  StyleProp,\n  StyleSheet,\n  TextProps,\n  TextStyle,\n  useColorScheme,\n} from 'react-native'\n\nimport { gray } from 'cons'\nimport { ms, s } from 'react-native-size-matters'\n\nexport type hT = 'h0' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5'\n\nexport interface Icolors {\n  dark: string\n  light: string\n}\n\nexport interface TxtT extends TextProps {\n  title: string\n  h?: hT\n  colors?: Icolors\n  oneColor?: string\n  numberOfLines?: number\n  textStyle?: StyleProp<TextStyle>\n  testID?: string\n  onPress?: () => void\n}\n\nconst Text = memo<TxtT>(\n  ({\n    h,\n    colors,\n    title,\n    oneColor = gray,\n    numberOfLines,\n    textStyle,\n    testID = 'text',\n    onPress,\n    ...textProps\n  }) => {\n    const scheme = useColorScheme()\n    const isDark = scheme === 'dark'\n\n    let curColor = oneColor\n    if (colors) {\n      curColor = isDark ? colors.dark : colors.light\n    }\n\n    let hStyle: TextStyle | undefined\n    if (h && textStyles[h]) {\n      // @ts-ignore\n      hStyle = { ...textStyles[h], color: curColor }\n    }\n\n    const mergedStyles: StyleProp<TextStyle> = StyleSheet.flatten([\n      hStyle,\n      textStyle,\n    ])\n\n    return (\n      <RNText\n        style={mergedStyles}\n        {...textProps}\n        testID={testID}\n        ellipsizeMode=\"tail\"\n        numberOfLines={numberOfLines}\n        onPress={onPress}\n      >\n        {title}\n      </RNText>\n    )\n  },\n)\n\nexport const textStyles = StyleSheet.create({\n  h0: {\n    fontFamily: Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',\n    fontSize: Platform.OS === 'ios' ? ms(95, 0.5) : ms(95, 0.3),\n    textShadowOffset: { width: 1, height: 1 },\n    textShadowRadius: 1,\n  },\n  h1: {\n    fontFamily: 'mont',\n    fontSize: Platform.OS === 'ios' ? ms(35, 0.3) : ms(35, 0.6),\n    fontWeight: 'bold',\n    textShadowOffset: { width: 1, height: 1 },\n    textShadowRadius: 1,\n  },\n  h2: {\n    fontFamily: 'mont',\n    fontSize: Platform.OS === 'ios' ? s(20) : s(20),\n    fontWeight: 'bold',\n    lineHeight: 20,\n  },\n  h3: {\n    fontFamily: 'mont',\n    fontSize: Platform.OS === 'ios' ? ms(18, 0.6) : ms(18, 0.6),\n    lineHeight: 20,\n    textShadowOffset: { width: 1, height: 1 },\n    textShadowRadius: 1,\n  },\n  h4: {\n    fontFamily: Platform.OS === 'ios' ? 'mont' : 'mont',\n    fontSize: Platform.OS === 'ios' ? s(15) : s(15),\n    lineHeight: 18,\n  },\n  h5: {\n    fontFamily: 'mont',\n    fontSize: Platform.OS === 'ios' ? ms(12, 0.8) : s(15),\n  },\n})\n\nexport { Text }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx",{"fileContent":"import React from 'react'\n\nimport { View, StyleSheet } from 'react-native'\n\nimport { ButtonVectorIcon, Space } from 'components'\nimport { fuchsia } from 'cons'\nimport { ms, s } from 'react-native-size-matters'\n\ninterface ActionButtonsProps {\n  isAdmin: boolean\n  commCount: number\n  likeCount: number\n  isLiked: boolean\n  handleAdminMenu: () => void\n  handleComment: () => void\n  handleLike: () => void\n  handleShareLink: () => void\n}\n\nconst ActionButtons: React.FC<ActionButtonsProps> = ({\n  isAdmin,\n  commCount,\n  likeCount,\n  handleAdminMenu,\n  handleComment,\n  handleLike,\n  // handleShareLink,\n  isLiked,\n}) => {\n  const iconSize = ms(15, 0.8)\n  const heart = isLiked ? 'heart' : 'heart-outline'\n  const heartColor = isLiked ? fuchsia : undefined\n  return (\n    <View style={styles.btnsContainer}>\n      {isAdmin && (\n        <>\n          <ButtonVectorIcon\n            onPress={handleAdminMenu}\n            viewStyle={[styles.smallBtn, styles.nonDetailAdminMenuButton]}\n            isIonicons\n            name=\"ellipsis-vertical-circle\"\n            size={iconSize + 3}\n            testID=\"admin-menu-button\"\n          />\n          <Space height={12} />\n        </>\n      )}\n      <ButtonVectorIcon\n        onPress={handleComment}\n        count={commCount}\n        viewStyle={[styles.smallBtn, styles.nonDetailCommentButton]}\n        isIonicons\n        name=\"chatbubble-outline\"\n        size={iconSize}\n        testID=\"comment-button\"\n      />\n      <ButtonVectorIcon\n        count={likeCount}\n        onPress={handleLike}\n        color={heartColor}\n        isIonicons\n        iconSize={iconSize + 1.5}\n        viewStyle={styles.smallBtn}\n        name={heart}\n        size={iconSize}\n        testID={heart}\n      />\n      {/* <ButtonVectorIcon\n        viewStyle={[styles.smallBtn, styles.nonDetailLinkButton]}\n        name=\"link-outline\"\n        isIonicons\n        iconSize={iconSize + 4}\n        onPress={handleShareLink}\n      /> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  btnsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: s(8),\n    top: 5,\n  },\n  nonDetailAdminMenuButton: {\n    alignItems: 'flex-end',\n    marginRight: s(4),\n  },\n  nonDetailCommentButton: {\n    justifyContent: 'flex-start',\n  },\n  // nonDetailLinkButton: {\n  //   justifyContent: 'flex-end',\n  //   marginRight: s(5),\n  // },\n  smallBtn: {\n    flexDirection: 'row',\n  },\n})\n\nexport { ActionButtons }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/NeomorphShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx",{"fileContent":"import React, { memo } from 'react'\n\nimport { View } from 'react-native'\n\nimport { s } from 'react-native-size-matters'\n\ninterface SpaceT {\n  height?: number | string\n  width?: number | string\n}\n\nconst Space = memo<SpaceT>(({ height, width }) => (\n  <View\n    testID=\"space-component\"\n    style={{ height: s(Number(height)) || 0, width: s(Number(width)) || 0 }}\n  />\n))\n\nexport { Space }\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx",{"fileContent":"import React, { useMemo } from 'react'\n\nimport { Image, View, useColorScheme, StyleSheet } from 'react-native'\n\nimport { NeomorphFlexView } from 'components'\nimport { H, W } from 'cons'\nimport { ms, mvs, s } from 'react-native-size-matters'\nimport { GameBoardProps } from 'types'\n\nimport { GameBoardImage } from './images'\n\nimport { Gem } from '../Gem/Gem'\n\nconst marginTop = H - W > 350 ? 20 : 0\n\nfunction GameBoard({ players }: GameBoardProps) {\n  const scheme = useColorScheme()\n\n  const imgObj = useMemo(() => {\n    const image = GameBoardImage.find((x) => {\n      return x.title === scheme\n    })?.path\n    if (image) {\n      const { width, height } = Image.resolveAssetSource(image)\n      const aspect = width / height\n      return { image, aspect }\n    } else {\n      return { image: '', aspect: 1 }\n    }\n  }, [scheme])\n\n  const getPlayer = (b: number) => {\n    const player = players.find((pl) => pl.plan === b)\n    return player\n      ? {\n          id: player.id,\n          plan: player.plan,\n          avatar: player.avatar,\n        }\n      : undefined\n  }\n\n  return (\n    <NeomorphFlexView viewStyle={styles.container}>\n      <View\n        style={[\n          styles.imageContainer,\n          { width: curImageHeight * imgObj.aspect },\n        ]}\n      >\n        <Image\n          source={imgObj.image}\n          style={styles.bgImage}\n          resizeMode=\"cover\"\n        />\n        <View style={styles.gameBoardContainer}>\n          <View style={styles.sub}>\n            {rows.map((a, i) => (\n              <View style={styles.row} key={i}>\n                {a.map((b, index) => (\n                  <View\n                    key={index}\n                    style={styles.box}\n                    testID={`gem-${getPlayer(b)?.id}`}\n                  >\n                    <Gem player={getPlayer(b)} planNumber={b} />\n                  </View>\n                ))}\n              </View>\n            ))}\n          </View>\n        </View>\n      </View>\n    </NeomorphFlexView>\n  )\n}\n\nconst imageHeight = s(248) + s(32)\nconst maxImageHeight = ms(248, 0.5) + s(32)\nconst imageTopMargin = Math.min(ms(27, 0.5), s(27))\nconst curImageHeight = Math.min(maxImageHeight, imageHeight) + imageTopMargin\n\nconst imageWidth = s(279) + s(18)\nconst maxImageWidth = ms(279, 0.5) + s(18)\nconst curImageWidth = imageWidth >= maxImageWidth ? maxImageWidth : imageWidth\n\nconst rows = [\n  [72, 71, 70, 69, 68, 67, 66, 65, 64],\n  [55, 56, 57, 58, 59, 60, 61, 62, 63],\n  [54, 53, 52, 51, 50, 49, 48, 47, 46],\n  [37, 38, 39, 40, 41, 42, 43, 44, 45],\n  [36, 35, 34, 33, 32, 31, 30, 29, 28],\n  [19, 20, 21, 22, 23, 24, 25, 26, 27],\n  [18, 17, 16, 15, 14, 13, 12, 11, 10],\n  [1, 2, 3, 4, 5, 6, 7, 8, 9],\n]\n\nconst styles = StyleSheet.create({\n  bgImage: {\n    height: '100%',\n    position: 'absolute',\n    top: mvs(33, 1.6) - imageTopMargin,\n    width: '95%',\n  },\n  box: {\n    alignItems: 'center',\n    borderRadius: s(31) / 2,\n    height: s(31),\n    justifyContent: 'center',\n    marginHorizontal: s(1),\n    marginVertical: s(2),\n    maxHeight: ms(31, 0.5),\n    maxWidth: ms(31, 0.5),\n    width: s(31),\n  },\n  container: {\n    alignItems: 'center',\n    paddingHorizontal: s(20),\n    paddingVertical: s(6),\n    width: '90%',\n  },\n  gameBoardContainer: {\n    height: curImageHeight,\n    marginTop,\n    width: curImageWidth,\n  },\n  imageContainer: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    bottom: 30,\n    height: curImageHeight,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  sub: {\n    marginTop: imageTopMargin,\n  },\n})\n\nexport { GameBoard }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/GameBoard/images/index.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/GameBoard/images/index.ts",{"fileContent":"export const GameBoardImage = [\n  {\n    path: require('./light.png'),\n    title: 'light',\n  },\n  {\n    path: require('./light.png'),\n    title: 'dark',\n  },\n]\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/ShadowView/ShadowView.tsx",{"fileContent":"import React from 'react'\n\nimport { View, ViewProps, ViewStyle } from 'react-native'\n\nimport { lightGray, white } from 'cons'\nimport { Shadow } from 'react-native-neomorph-shadows'\nimport { ScaledSheet } from 'react-native-size-matters'\n\ntype FlexStyleProperties =\n  | 'flex'\n  | 'alignSelf'\n  | 'flexGrow'\n  | 'flexShrink'\n  | 'flexBasis'\n\ntype ViewStyleWithoutFlex = Pick<\n  ViewStyle,\n  Exclude<keyof ViewStyle, FlexStyleProperties>\n>\n\ninterface ViewStyleWithShadow extends ViewStyleWithoutFlex {\n  shadowOffset?: {\n    width: number\n    height: number\n  }\n  shadowOpacity?: number\n  shadowColor?: string\n  shadowRadius?: number\n  borderRadius?: number\n  backgroundColor?: string\n  width?: number\n  height?: number\n}\n\ninterface ShadowViewProps {\n  children: React.ReactNode\n  shadowStyle?: ViewStyleWithShadow\n  viewStyle?: ViewProps\n}\n\nconst ShadowView: React.FC<ShadowViewProps> = ({\n  children,\n  viewStyle,\n  shadowStyle,\n}) => {\n  return (\n    <Shadow\n      // @ts-ignore\n\n      draw\n      style={{\n        // @ts-ignore\n        ...styles.shadow,\n        ...shadowStyle,\n      }}\n    >\n      <View style={viewStyle}>{children}</View>\n    </Shadow>\n  )\n}\n\nconst styles = ScaledSheet.create({\n  shadow: {\n    alignSelf: 'center',\n    shadowOffset: { width: 3, height: 3 },\n    shadowRadius: 6,\n    shadowColor: lightGray,\n    shadowOpacity: 1,\n    borderRadius: 25,\n    backgroundColor: white,\n    alignItems: 'center',\n  },\n})\n\nexport { ShadowView }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx",{"fileContent":"import React from 'react'\n\nimport { TextStyle } from 'react-native'\n\nimport { fireEvent, render } from '@testing-library/react-native'\nimport renderer from 'react-test-renderer'\n\nimport { Text, hT, textStyles } from './Text'\n\ndescribe('Text Component', () => {\n  it('Text component snapshot', () => {\n    const component = renderer.create(\n      <Text title=\"Snapshot Test\" testID=\"snapshot-text\" />,\n    )\n\n    const tree = component.toJSON()\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('renders correctly with default props', () => {\n    const { getByText } = render(\n      <Text testID=\"text-component\" title=\"Test Title\" />,\n    )\n    expect(getByText('Test Title')).toBeTruthy()\n  })\n\n  it('applies the correct style based on the \"h\" prop', () => {\n    const styles: hT[] = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5']\n    styles.forEach((style) => {\n      const { getByTestId } = render(\n        <Text testID=\"text-component\" title=\"Test Title\" h={style} />,\n      )\n      const receivedStyle = getByTestId('text-component').props.style\n      expect(receivedStyle).toEqual(expect.objectContaining(textStyles[style]))\n    })\n  })\n\n  it('should call the onPress function when pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(\n      <Text\n        title=\"Clickable Text\"\n        onPress={onPressMock}\n        testID=\"clickable-text\"\n      />,\n    )\n    const clickableText = getByTestId('clickable-text')\n    fireEvent.press(clickableText)\n    expect(onPressMock).toHaveBeenCalled()\n  })\n\n  it('displays the correct title', () => {\n    const title = 'Test Title'\n    const { getByTestId } = render(\n      <Text testID=\"text-component\" title={title} />,\n    )\n    const textComponent = getByTestId('text-component')\n    expect(textComponent.props.children).toBe(title)\n  })\n\n  it('displays truncated text when numberOfLines is set', () => {\n    const longText = 'This is a very long text that should be truncated'\n    const { getByTestId } = render(\n      <Text testID=\"text-component\" title={longText} numberOfLines={1} />,\n    )\n    const textComponent = getByTestId('text-component')\n    expect(textComponent.props.children).toBe(longText)\n  })\n\n  it('applies additional custom styles', () => {\n    const customStyle: TextStyle = { fontSize: 20, fontWeight: 'bold' }\n    const { getByTestId } = render(\n      <Text\n        testID=\"text-component\"\n        title=\"Test Title\"\n        textStyle={customStyle}\n      />,\n    )\n    const textComponent = getByTestId('text-component')\n    const receivedStyle = textComponent.props.style\n    expect(receivedStyle).toEqual(expect.objectContaining(customStyle))\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Space/Space.test.tsx",{"fileContent":"// Import libraries\nimport React from 'react'\n\nimport { render } from '@testing-library/react-native'\nimport { s } from 'react-native-size-matters'\n\nimport { Space } from './Space'\n// Import the component to be tested\n\ndescribe('Space', () => {\n  it('renders correctly with default props', () => {\n    const { getByTestId } = render(<Space />)\n    const spaceComponent = getByTestId('space-component')\n\n    expect(spaceComponent.props.style).toEqual({ height: 0, width: 0 })\n  })\n\n  it('renders correctly with given height and width', () => {\n    const { getByTestId } = render(<Space height={10} width={20} />)\n    const spaceComponent = getByTestId('space-component')\n\n    expect(spaceComponent.props.style).toEqual({\n      height: s(10) || 0,\n      width: s(20) || 0,\n    })\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render, fireEvent, act } from '@testing-library/react-native'\n\nimport { Dice, DiceProps } from './Dice'\n\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper')\njest.mock('./Animated', () => {\n  return {\n    ...jest.requireActual('./Animated'),\n    createAnimatedComponent: (component: any) => {\n      return component\n    },\n  }\n})\n\ndescribe('Dice Component', () => {\n  let mockProps: DiceProps\n  beforeEach(() => {\n    mockProps = {\n      lastRoll: 1,\n      disabled: false,\n      rollDice: jest.fn(),\n    }\n    jest.useFakeTimers()\n  })\n\n  afterEach(() => {\n    jest.useRealTimers()\n  })\n\n  it('renders correctly with the provided props', () => {\n    const { getByTestId } = render(<Dice {...mockProps} />)\n    expect(getByTestId('dice-component')).toBeDefined()\n  })\n\n  it('calls the rollDice function on press when not disabled', () => {\n    const { getByTestId } = render(<Dice {...mockProps} />)\n\n    act(() => {\n      fireEvent.press(getByTestId('dice-component'))\n      jest.runAllTimers()\n    })\n\n    expect(mockProps.rollDice).toHaveBeenCalledTimes(1)\n  })\n\n  it('does not call the rollDice function on press when disabled', () => {\n    mockProps.disabled = true\n    const { getByTestId } = render(<Dice {...mockProps} />)\n\n    act(() => {\n      fireEvent.press(getByTestId('dice-component'))\n      jest.runAllTimers()\n    })\n\n    expect(mockProps.rollDice).not.toHaveBeenCalled()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx",{"fileContent":"import React, { useRef } from 'react'\n\nimport {\n  Animated,\n  StyleSheet,\n  Easing,\n  Pressable,\n  useColorScheme,\n} from 'react-native'\n\nimport { vs } from 'react-native-size-matters'\n\nexport interface DiceProps {\n  disabled?: boolean\n  rollDice: () => void\n  lastRoll: number\n  size?: 'small' | 'medium' | 'large'\n}\n\nconst Dice = ({\n  disabled = false,\n  rollDice,\n  lastRoll,\n  size = 'medium',\n}: DiceProps & { lastRoll: number }) => {\n  const isDarkMode = useColorScheme() === 'dark'\n  const spinValue = useRef(new Animated.Value(0)).current\n\n  const spin = spinValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '360deg'],\n  })\n\n  const animateDice = (): void => {\n    if (disabled) {\n      return\n    }\n\n    spinValue.setValue(0)\n    Animated.timing(spinValue, {\n      toValue: 10,\n      duration: 500, //2000,\n      easing: Easing.cubic,\n      useNativeDriver: true,\n    }).start(() => {\n      rollDice()\n    })\n  }\n\n  const getSize = () => {\n    switch (size) {\n      case 'small':\n        return vs(50)\n      case 'large':\n        return vs(120)\n      case 'medium':\n      default:\n        return vs(80)\n    }\n  }\n  const getImage = (number: number, isDarkTheme: boolean) => {\n    switch (number) {\n      case 1:\n        return isDarkTheme\n          ? require('./assets_dark/1.png')\n          : require('./assets_light/1.png')\n      case 2:\n        return isDarkTheme\n          ? require('./assets_dark/2.png')\n          : require('./assets_light/2.png')\n      case 3:\n        return isDarkTheme\n          ? require('./assets_dark/3.png')\n          : require('./assets_light/3.png')\n      case 4:\n        return isDarkTheme\n          ? require('./assets_dark/4.png')\n          : require('./assets_light/4.png')\n      case 5:\n        return isDarkTheme\n          ? require('./assets_dark/5.png')\n          : require('./assets_light/5.png')\n      case 6:\n        return isDarkTheme\n          ? require('./assets_dark/6.png')\n          : require('./assets_light/6.png')\n      default:\n        return null\n    }\n  }\n  return (\n    <Pressable\n      onPress={animateDice}\n      style={styles.diceContainer}\n      testID=\"dice-component\"\n    >\n      <Animated.Image\n        style={[\n          styles.image,\n          {\n            transform: [{ rotate: spin }],\n            height: getSize(),\n            width: getSize(),\n          },\n        ]}\n        source={getImage(lastRoll, isDarkMode)}\n        testID=\"dice-image\"\n      />\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  diceContainer: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    marginVertical: vs(12),\n  },\n  image: {\n    height: vs(65),\n    width: vs(65),\n  },\n})\n\nexport { Dice }\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx",{"fileContent":"import React from 'react'\n\nimport { Image } from 'react-native'\n\nimport { render, waitFor } from '@testing-library/react-native'\nimport { Player } from 'types'\n\nimport { GameBoard } from '../'\n\nconst players: Player[] = [\n  {\n    id: 2,\n    plan: 72,\n    avatar: 106,\n  },\n  {\n    id: 4,\n    plan: 34,\n    avatar:\n      'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/',\n  },\n]\n\ndescribe('GameBoard Component', () => {\n  it('should render correct player avatars', async () => {\n    const { queryByTestId } = render(<GameBoard players={players} />)\n\n    await waitFor(() => {\n      players.forEach((player) => {\n        const playerGemImage = queryByTestId(`gem-${player.id}`)\n        expect(playerGemImage).toBeTruthy()\n\n        if (typeof player.avatar === 'string') {\n          expect(playerGemImage?.findByType(Image)?.props?.source?.uri).toEqual(\n            player.avatar,\n          )\n        }\n      })\n    })\n  })\n\n  it('should render the correct number of Gem components based on the players prop', () => {\n    const { getAllByTestId } = render(<GameBoard players={players} />)\n    const gemComponents = getAllByTestId('gem-container')\n    const playerGemImages = getAllByTestId('player-gem-image')\n    expect(playerGemImages.length).toEqual(2) // Проверка на 2 игрока\n    expect(gemComponents.length).toEqual(72) // Проверка на общее количество компонентов Gem\n  })\n\n  it('should render player avatars', () => {\n    const { getByTestId } = render(<GameBoard players={players} />)\n\n    players.forEach((player) => {\n      const gemImage = getByTestId(`gem-${player.id}`)\n      expect(gemImage).toBeTruthy()\n    })\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/NeomorphShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx",{"fileContent":"import React from 'react'\n\nimport { View, StyleSheet } from 'react-native'\n\nimport { useTheme } from '@react-navigation/native'\nimport { black, lightGray } from 'cons'\nimport {\n  Neomorph,\n  ViewStyleWithNeomorphShadow,\n} from 'react-native-neomorph-shadows'\n\ninterface NeomorphCircleProps {\n  viewStyle?: ViewStyleWithNeomorphShadow\n  children?: React.ReactNode\n}\n\nconst NeomorphCircle: React.FC<NeomorphCircleProps> = ({\n  children,\n  viewStyle,\n}) => {\n  const { dark } = useTheme()\n  const backgroundColor = dark ? black : lightGray\n\n  return (\n    <Neomorph\n      style={{\n        ...styles.container,\n        ...viewStyle,\n        backgroundColor,\n      }}\n    >\n      <View style={viewStyle}>{children}</View>\n    </Neomorph>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 40,\n    shadowRadius: 5,\n  },\n})\n\nexport { NeomorphCircle }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx",{"fileContent":"import React from 'react'\n\nimport { View, StyleSheet } from 'react-native'\n\nimport { useTheme } from '@react-navigation/native'\nimport { black, lightGray } from 'cons'\nimport {\n  NeomorphBlur,\n  ViewStyleWithNeomorphShadow,\n} from 'react-native-neomorph-shadows'\n\ninterface NeomorphBlurViewProps {\n  children?: React.ReactNode\n  viewStyle?: ViewStyleWithNeomorphShadow\n}\n\nconst NeomorphBlurView: React.FC<NeomorphBlurViewProps> = ({\n  children,\n  viewStyle,\n}) => {\n  const { dark } = useTheme()\n  const backgroundColor = dark ? black : lightGray\n\n  return (\n    <NeomorphBlur\n      style={{\n        ...styles.container,\n        ...viewStyle,\n        backgroundColor,\n      }}\n      testID=\"neomorph-blur-view\"\n    >\n      <View style={viewStyle}>{children ? children : ''}</View>\n    </NeomorphBlur>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: black,\n    borderRadius: 70,\n    height: 140,\n    shadowRadius: 12,\n    width: 140,\n  },\n})\n\nexport { NeomorphBlurView }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx",{"fileContent":"import React from 'react'\n\nimport { View, ViewStyle, StyleSheet } from 'react-native'\n\nimport { useTheme } from '@react-navigation/native'\nimport { black, lightGray } from 'cons'\nimport { NeomorphFlex } from 'react-native-neomorph-shadows'\n\ninterface NeomorphFlexViewProps {\n  children: React.ReactNode\n  viewStyle?: ViewStyle\n  borderRadius?: number\n}\n\nconst NeomorphFlexView: React.FC<NeomorphFlexViewProps> = ({\n  children,\n  viewStyle,\n  borderRadius = 40,\n}) => {\n  const { dark } = useTheme()\n  const backgroundColor = dark ? black : lightGray\n  return (\n    <NeomorphFlex\n      inner\n      style={{\n        ...styles.container,\n        ...viewStyle,\n        backgroundColor,\n        borderRadius,\n      }}\n    >\n      <View style={{ ...viewStyle, borderRadius }}>{children}</View>\n    </NeomorphFlex>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 40,\n    shadowRadius: 5,\n  },\n})\n\nexport { NeomorphFlexView }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx",{"fileContent":"import React from 'react'\n\nimport { View, StyleSheet } from 'react-native'\n\nimport { useTheme } from '@react-navigation/native'\nimport { black, lightGray } from 'cons'\nimport {\n  Neomorph,\n  ViewStyleWithNeomorphShadow,\n} from 'react-native-neomorph-shadows'\n\ninterface NeomorphViewProps {\n  children: React.ReactNode\n  viewStyle?: ViewStyleWithNeomorphShadow\n}\n\nconst NeomorphView: React.FC<NeomorphViewProps> = ({ children, viewStyle }) => {\n  const { dark } = useTheme()\n  const backgroundColor = dark ? black : lightGray\n\n  return (\n    <Neomorph\n      style={{\n        ...styles.container,\n        ...viewStyle,\n        backgroundColor,\n      }}\n    >\n      <View style={viewStyle}>{children}</View>\n    </Neomorph>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 20,\n    shadowRadius: 5,\n  },\n})\n\nexport { NeomorphView }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx",{"fileContent":"import React, { memo } from 'react'\n\nimport {\n  ActivityIndicator,\n  ImageBackground,\n  ImageStyle,\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  View,\n} from 'react-native'\n\nimport { useTheme } from '@react-navigation/native'\nimport { Text } from 'components'\nimport { orange, secondary } from 'cons'\nimport { ms, s } from 'react-native-size-matters'\nimport Ionicons from 'react-native-vector-icons/Ionicons'\n\ninterface AvatarI {\n  plan: number\n  size: 'xLarge' | 'large' | 'medium' | 'small'\n  avatar: string\n  isAccept?: boolean\n  additionalStyle?: StyleProp<ImageStyle>\n  onPress?: () => void\n  testID?: string\n  showIcon?: boolean\n  isLoading?: boolean\n}\n\nconst Avatar = memo<AvatarI>(\n  ({\n    size = 'medium',\n    plan,\n    avatar,\n    additionalStyle,\n    isAccept,\n    showIcon = true,\n    onPress,\n    testID = 'avatar',\n    isLoading = false,\n  }) => {\n    const {\n      colors: { background },\n    } = useTheme()\n\n    const textPlan = plan < 10 ? `0${plan}` : `${plan}`\n    const fontSize = size === 'small' ? s(6) : s(10)\n    const badgeS =\n      size === 'small' || size === 'medium'\n        ? styles.smallBadge\n        : styles.bigBadge\n\n    return (\n      <Pressable onPress={onPress} testID={testID}>\n        {/* @ts-ignore */}\n\n        <View style={styles.container}>\n          {isLoading ? (\n            <ActivityIndicator size=\"large\" color={secondary} />\n          ) : avatar ? (\n            <ImageBackground\n              source={{ uri: avatar }}\n              style={[styles[size], additionalStyle]}\n              imageStyle={styles.container}\n            >\n              <View\n                style={[styles.badge, badgeS, { backgroundColor: background }]}\n              >\n                {!isAccept ? (\n                  showIcon && (\n                    <Ionicons\n                      size={s(15)}\n                      color={orange}\n                      name=\"time-sharp\"\n                      testID=\"time-icon\"\n                    />\n                  )\n                ) : (\n                  <Text\n                    testID=\"avatar-title\"\n                    textStyle={{ fontSize }}\n                    title={textPlan}\n                    h=\"h5\"\n                  />\n                )}\n              </View>\n            </ImageBackground>\n          ) : (\n            <Text\n              h={'h2'}\n              testID=\"add-image-text\"\n              title=\"add image\"\n              textStyle={styles.textStyle}\n            />\n          )}\n        </View>\n      </Pressable>\n    )\n  },\n)\n\nconst styles = StyleSheet.create({\n  badge: {\n    alignItems: 'center',\n    borderRadius: s(180),\n    flexDirection: 'row',\n    justifyContent: 'center',\n    padding: s(4),\n    position: 'absolute',\n  },\n  bigBadge: {\n    bottom: s(2),\n    right: s(-1),\n  },\n  card: {\n    alignItems: 'center',\n    borderRadius: s(70),\n    height: ms(130, 0.9),\n    justifyContent: 'center',\n    width: ms(130, 0.9),\n  },\n  container: {\n    alignItems: 'center',\n    borderRadius: ms(130),\n    justifyContent: 'center',\n  },\n  large: {\n    height: s(55),\n    marginLeft: 1,\n    width: s(55),\n  },\n  medium: {\n    height: ms(50, 0.9),\n    width: ms(50, 0.9),\n  },\n  small: {\n    height: s(36),\n    width: s(36),\n  },\n  smallBadge: {\n    bottom: s(1),\n    right: s(-1),\n  },\n  textStyle: {\n    alignSelf: 'center',\n    lineHeight: 30,\n    textAlign: 'center',\n    width: 100,\n  },\n  xLarge: {\n    borderRadius: s(70),\n    height: ms(134),\n    justifyContent: 'center',\n    marginLeft: 1,\n    width: ms(134),\n  },\n})\n\nexport { Avatar }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts",{"fileContent":"export * from './Button/Button'\nexport * from './ButtonEdit/ButtonEdit'\nexport * from './ButtonLink/ButtonLink'\nexport * from './ButtonVectorIcon/ButtonVectorIcon'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Buttons/Button/Button.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonEdit/ButtonEdit.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonLink/ButtonLink.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonVectorIcon/ButtonVectorIcon.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/Button/Button.tsx",{"fileContent":"import React, { memo, useState } from 'react'\n\nimport { StyleProp, StyleSheet, TextStyle, Pressable } from 'react-native'\n\nimport { dimGray } from 'cons'\nimport { ms, s } from 'react-native-size-matters'\n\nimport { Text, NeomorphView, NeomorphFlexView, hT } from '../..'\n\ninterface ButtonProps {\n  title: string\n  onPress: () => void\n  textStyle?: StyleProp<TextStyle>\n  h?: hT\n}\n\nconst Button = memo<ButtonProps>(({ title, onPress, textStyle, h = 'h1' }) => {\n  const [isPressed, setIsPressed] = useState(false)\n\n  const { h: textStyleH } = styles\n\n  const handlePressIn = () => {\n    setIsPressed(true)\n  }\n\n  const handlePressOut = () => {\n    setIsPressed(false)\n    onPress && onPress()\n  }\n\n  return (\n    <Pressable\n      onPress={onPress}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      style={styles.container}\n    >\n      {isPressed ? (\n        // @ts-ignore\n        <NeomorphFlexView viewStyle={styles.card}>\n          <Text\n            testID=\"button-container\"\n            h={h}\n            textStyle={[textStyleH, textStyle]}\n            title={title}\n            oneColor={dimGray}\n          />\n        </NeomorphFlexView>\n      ) : (\n        // @ts-ignore\n        <NeomorphView viewStyle={styles.card}>\n          <Text\n            h={h}\n            textStyle={[textStyleH, textStyle]}\n            title={title}\n            testID=\"button-title\"\n          />\n        </NeomorphView>\n      )}\n    </Pressable>\n  )\n})\n\nconst styles = StyleSheet.create({\n  card: {\n    alignSelf: 'center',\n    borderRadius: s(40),\n    height: ms(60, 0.9),\n    justifyContent: 'center',\n    width: ms(230, 0.9),\n  },\n  container: {\n    height: ms(60, 0.9),\n    width: ms(230, 0.9),\n  },\n  h: {\n    textAlign: 'center',\n    top: 3,\n  },\n})\n\nexport { Button }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/NeomorphShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonEdit/ButtonEdit.tsx",{"fileContent":"import React from 'react'\n\nimport { Image, StyleProp, StyleSheet, ViewStyle } from 'react-native'\n\nimport { vs } from 'react-native-size-matters'\n\nimport { Pressable } from '../../Pressable/Pressable'\n\ninterface ButtonEditT {\n  onPress: () => void\n  viewStyle?: StyleProp<ViewStyle>\n}\n\nconst ButtonEdit = ({ onPress, viewStyle }: ButtonEditT) => {\n  return (\n    <Pressable onPress={onPress} style={viewStyle} testID=\"button-edit\">\n      <Image style={styles.img} source={require('./edit.png')} />\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  img: {\n    height: vs(18),\n    width: vs(18),\n  },\n})\n\nexport { ButtonEdit }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx",{"fileContent":"import React from 'react'\n\nimport {\n  PressableStateCallbackType,\n  Pressable as RNPressable,\n  PressableProps as RNPressableProps,\n  StyleProp,\n  ViewStyle,\n} from 'react-native'\n\ntype PressableProps = Omit<RNPressableProps, 'style'> & {\n  style?: StyleProp<ViewStyle>\n  pressedStyle?: StyleProp<ViewStyle>\n}\n\nconst Pressable: React.FC<PressableProps> = ({\n  children,\n  style,\n  pressedStyle,\n  ...props\n}) => {\n  const defaultPressedStyle: StyleProp<ViewStyle> = { opacity: 0.2 } // default Pressable-like press style\n\n  const handlePressStyle = ({\n    pressed,\n  }: PressableStateCallbackType): StyleProp<ViewStyle> => {\n    if (pressed) {\n      return [\n        style,\n        pressedStyle || defaultPressedStyle,\n      ] as StyleProp<ViewStyle>\n    }\n    return style as StyleProp<ViewStyle>\n  }\n\n  return (\n    <RNPressable style={handlePressStyle} {...props}>\n      {children}\n    </RNPressable>\n  )\n}\nexport { Pressable }\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonLink/ButtonLink.tsx",{"fileContent":"import React, { memo } from 'react'\n\nimport { StyleProp, StyleSheet, TextStyle, ViewStyle } from 'react-native'\n\nimport { secondary } from 'cons'\n\nimport { Text } from '../..'\nimport { Pressable } from '../../Pressable/Pressable'\n\ninterface ButtonLinkT {\n  title: string\n  viewStyle?: StyleProp<ViewStyle>\n  onPress?: () => void\n  textStyle?: StyleProp<TextStyle>\n}\n\nconst ButtonLink = memo<ButtonLinkT>(\n  ({ title, viewStyle, textStyle, onPress }) => {\n    const { container, h } = styles\n\n    return (\n      <Pressable\n        onPress={onPress}\n        style={[container, viewStyle]}\n        testID=\"button-link-container\"\n      >\n        <Text\n          h={'h4'}\n          title={title}\n          textStyle={[h, textStyle]}\n          testID=\"button-link-title\"\n        />\n      </Pressable>\n    )\n  },\n)\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n  },\n  h: {\n    color: secondary,\n    textDecorationLine: 'underline',\n  },\n})\n\nexport { ButtonLink }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/NeomorphShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonVectorIcon/ButtonVectorIcon.tsx",{"fileContent":"import React from 'react'\n\nimport { StyleProp, ViewStyle, useColorScheme, StyleSheet } from 'react-native'\n\nimport { dimGray, gray } from 'cons'\nimport { s } from 'react-native-size-matters'\nimport Icon from 'react-native-vector-icons/FontAwesome'\nimport Ionicons from 'react-native-vector-icons/Ionicons'\n\nimport { Text } from '../../'\nimport { Pressable } from '../../Pressable/Pressable'\nimport { Space } from '../../Space/Space'\n\ninterface ButtonVectorIconI {\n  name: string\n  size?: number\n  iconSize?: number\n  color?: string\n  onPress?: () => void | Promise<void>\n  viewStyle?: StyleProp<ViewStyle>\n  count?: number\n  isIonicons?: boolean\n  testID: string\n  onPressIn?: () => void\n}\n\nexport function ButtonVectorIcon({\n  name,\n  onPress,\n  size = s(10),\n  iconSize,\n  color,\n  viewStyle,\n  count,\n  isIonicons,\n  onPressIn,\n  testID,\n}: ButtonVectorIconI) {\n  const scheme = useColorScheme()\n  const colorTheme = scheme === 'dark' ? dimGray : gray\n  const summaryIconSize = iconSize ? iconSize : size\n  const summaryIoniconsSize = iconSize ? iconSize + s(2) : size + s(2)\n  return (\n    <Pressable\n      style={viewStyle}\n      onPress={onPress}\n      onPressIn={onPressIn}\n      testID={testID}\n    >\n      {isIonicons ? (\n        <Ionicons\n          name={name}\n          size={summaryIoniconsSize}\n          color={color ? color : colorTheme}\n        />\n      ) : (\n        <Icon\n          name={name}\n          size={summaryIconSize}\n          color={color ? color : colorTheme}\n        />\n      )}\n      {count !== undefined && (\n        <>\n          <Space width={s(5)} />\n          <Text\n            title={count.toString()}\n            h={'h5'}\n            textStyle={[\n              styles.fontStyle,\n              { fontSize: size, color: colorTheme },\n            ]}\n            testID=\"button-link-title\"\n          />\n        </>\n      )}\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  fontStyle: {\n    top: 3,\n  },\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/NeomorphShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx",{"fileContent":"import React, { ReactNode } from 'react'\n\nimport {\n  ImageBackground,\n  ImageSourcePropType,\n  ScrollView,\n  StyleSheet,\n} from 'react-native'\n\nimport { useTheme } from '@react-navigation/native'\nimport { W, black, lightGray } from 'cons'\n\ninterface BackgroundProps {\n  children: ReactNode\n  isScrollView?: boolean\n}\n\nconst Background: React.FC<BackgroundProps> = ({\n  children,\n  isScrollView = false,\n}) => {\n  const imageSource: ImageSourcePropType = require('../../../assets/images/background.png')\n\n  const { dark } = useTheme()\n  const backgroundColor = dark ? black : lightGray\n\n  const backgroundStyle = [styles.background, { backgroundColor }]\n\n  if (isScrollView) {\n    return (\n      <ImageBackground source={imageSource} style={backgroundStyle}>\n        <ScrollView\n          contentContainerStyle={styles.scrollViewContent}\n          showsVerticalScrollIndicator={false} // Убираем индикатор скролла\n        >\n          {children}\n        </ScrollView>\n      </ImageBackground>\n    )\n  }\n\n  return (\n    <ImageBackground source={imageSource} style={backgroundStyle}>\n      {children}\n    </ImageBackground>\n  )\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    alignItems: 'center',\n    flex: 1,\n    height: '100%',\n    justifyContent: 'flex-start',\n    width: '100%',\n  },\n  scrollViewContent: {\n    alignItems: 'center',\n    flexGrow: 1,\n    justifyContent: 'flex-start',\n    width: W,\n  },\n})\n\nexport { Background }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx",{"fileContent":"import React, { ReactNode } from 'react'\n\nimport { StyleSheet, View, ViewStyle } from 'react-native'\n\nconst styles = StyleSheet.create({\n  main: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n\ninterface CenterViewProps {\n  children: ReactNode\n  flex?: number\n  style?: ViewStyle\n}\n\nconst CenterView = ({ children, flex = 1, style }: CenterViewProps) => {\n  return (\n    <View style={[styles.main, { flex }, style]} testID=\"center-view\">\n      {children}\n    </View>\n  )\n}\n\nexport { CenterView }\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx",{"fileContent":"import React from 'react'\n\nimport { View, Pressable, StyleSheet } from 'react-native'\n\nimport { Avatar, NeomorphFlexView, Space, Text } from 'components'\nimport { W, transparent } from 'cons'\nimport { s, vs } from 'react-native-size-matters'\nimport { Post } from 'types'\n\ninterface CommentCardProps {\n  post: Post\n  onPress?: () => void\n  fullName: string\n  avatar: string\n  date: string\n  handleProfile: () => void\n  isLeft?: boolean\n}\n\nconst CommentBubbleLeft: React.FC<CommentCardProps> = ({\n  post,\n  onPress,\n  fullName,\n  avatar,\n  date,\n  handleProfile,\n}) => {\n  return (\n    <NeomorphFlexView>\n      <View style={styles.container}>\n        <Pressable onPress={onPress} testID=\"comment-bubble-left-container\">\n          <View style={styles.bubbleStyle}>\n            <Avatar\n              avatar={avatar}\n              onPress={handleProfile}\n              size={'medium'}\n              plan={post.plan as number}\n              isAccept={post.accept}\n              additionalStyle={styles.img}\n              testID=\"avatar-bubble-left\"\n            />\n            <View style={styles.headerName}>\n              <Text\n                h={'h4'}\n                textStyle={styles.lightText}\n                title={post.text || ' '}\n                testID=\"comment-bubble-left-comment\"\n              />\n              <Space height={vs(5)} />\n              <Text\n                title={fullName}\n                h={'h4'}\n                numberOfLines={1}\n                textStyle={styles.nameStyle}\n                testID=\"comment-bubble-left-fullName\"\n              />\n              <View style={styles.headerName}>\n                <Text\n                  title={date}\n                  h={'h5'}\n                  textStyle={styles.dateStyle}\n                  testID=\"comment-bubble-left-date\"\n                />\n              </View>\n            </View>\n          </View>\n          <Space height={vs(2)} />\n        </Pressable>\n      </View>\n    </NeomorphFlexView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  bubbleStyle: {\n    alignSelf: 'flex-start',\n    flexDirection: 'row',\n  },\n  container: {\n    paddingBottom: s(10),\n    paddingHorizontal: s(10),\n    paddingTop: s(20),\n  },\n  dateStyle: {\n    paddingLeft: 10,\n  },\n  headerName: {\n    alignItems: 'flex-start',\n    backgroundColor: transparent,\n  },\n  img: {\n    top: 9,\n  },\n  lightText: {\n    maxWidth: W - 120,\n    paddingLeft: 10,\n    textAlign: 'left',\n  },\n  nameStyle: {\n    fontWeight: 'bold',\n    paddingLeft: 10,\n  },\n})\n\nexport { CommentBubbleLeft }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx",{"fileContent":"import React from 'react'\n\nimport { View, Pressable, StyleSheet } from 'react-native'\n\nimport { Avatar, NeomorphFlexView, Space, Text } from 'components'\nimport { W } from 'cons'\nimport { s, vs } from 'react-native-size-matters'\nimport { Post } from 'types'\n\ninterface CommentCardProps {\n  post: Post\n  onPress?: () => void\n  fullName: string\n  avatar: string\n  date: string\n  handleProfile: () => void\n  isLeft?: boolean\n}\n\nconst CommentBubbleRight: React.FC<CommentCardProps> = ({\n  post,\n  onPress,\n  fullName,\n  avatar,\n  date,\n  handleProfile,\n}) => {\n  return (\n    <NeomorphFlexView>\n      <View style={styles.container}>\n        <Pressable onPress={onPress} testID=\"comment-bubble-right-container\">\n          <View style={styles.bubbleStyle}>\n            <View style={styles.headerName}>\n              <Text\n                h={'h4'}\n                textStyle={styles.lightText}\n                title={post.text || ' '}\n                testID=\"comment-bubble-right-comment\"\n              />\n              <Space height={vs(5)} />\n              <Text\n                title={fullName}\n                h={'h4'}\n                numberOfLines={1}\n                textStyle={styles.nameStyle}\n                testID=\"comment-bubble-right-fullName\"\n              />\n              <Space height={vs(2)} />\n              <Text\n                title={date}\n                h={'h5'}\n                textStyle={styles.dateStyle}\n                testID=\"comment-bubble-right-date\"\n              />\n            </View>\n            <Avatar\n              avatar={avatar}\n              onPress={handleProfile}\n              size={'medium'}\n              plan={post.plan as number}\n              isAccept={post.accept}\n              additionalStyle={styles.img}\n              testID=\"avatar-bubble-right\"\n            />\n          </View>\n          <Space height={vs(2)} />\n          <View style={styles.headerName} />\n        </Pressable>\n      </View>\n    </NeomorphFlexView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  bubbleStyle: {\n    alignSelf: 'flex-start',\n    flexDirection: 'row',\n  },\n  container: {\n    paddingBottom: s(10),\n    paddingHorizontal: s(10),\n    paddingTop: s(20),\n  },\n  dateStyle: {\n    paddingRight: 10,\n  },\n  headerName: {\n    alignItems: 'flex-end',\n  },\n  img: {\n    top: 9,\n  },\n  lightText: {\n    maxWidth: W - 120,\n    paddingRight: 10,\n    textAlign: 'right',\n  },\n  nameStyle: {\n    fontWeight: 'bold',\n    paddingRight: 10,\n  },\n})\n\nexport { CommentBubbleRight }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx",{"fileContent":"import React from 'react'\n\nimport { StyleSheet } from 'react-native'\n\nimport { NeomorphFlexView, Text } from 'components'\nimport { s } from 'react-native-size-matters'\n\ninterface DisplayProps {\n  title: string\n  onColor?: string\n  height?: number\n}\n\nconst Display: React.FC<DisplayProps> = ({\n  title,\n  onColor,\n  height = s(120),\n}) => {\n  return (\n    <NeomorphFlexView viewStyle={{ ...styles.container, height }}>\n      <Text\n        title={title}\n        h={'h3'}\n        textStyle={styles.dateStyle}\n        testID=\"display-text\"\n        oneColor={onColor}\n      />\n    </NeomorphFlexView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: s(20),\n    paddingVertical: s(6),\n    width: '90%',\n  },\n  dateStyle: {\n    lineHeight: s(20),\n    paddingRight: 10,\n    textAlign: 'center',\n  },\n})\n\nexport { Display }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx",{"fileContent":"import React from 'react'\n\nimport { View, Pressable, StyleSheet } from 'react-native'\n\nimport { Avatar, Space, Text, NeomorphView, ActionButtons } from 'components'\nimport { W } from 'cons'\nimport { s, vs } from 'react-native-size-matters'\nimport { ReportCardProps } from 'types'\n\nconst ReportCard: React.FC<ReportCardProps> = ({\n  post,\n  onPress,\n  fullName,\n  avatar,\n  isLoading,\n  isAdmin,\n  isLiked,\n  likeCount,\n  commCount,\n  date,\n  handleProfile,\n  handleAdminMenu,\n  handleShareLink,\n  handleLike,\n  handleComment,\n}) => {\n  return (\n    <NeomorphView viewStyle={styles.card}>\n      <Pressable\n        onPress={onPress}\n        style={styles.container}\n        testID=\"report-card\"\n      >\n        <View style={styles.contentContainer}>\n          <View style={styles.headerInfo}>\n            <View style={styles.headerName}>\n              <View style={styles.userInfoContainer}>\n                <Text\n                  numberOfLines={1}\n                  h={'h2'}\n                  title={fullName}\n                  ellipsizeMode=\"tail\"\n                  testID=\"report-card-fullName\"\n                />\n                <Space height={vs(8)} />\n                <Text\n                  h={'h3'}\n                  textStyle={styles.lightText}\n                  title={`${date}`}\n                  testID=\"report-card-date\"\n                />\n              </View>\n\n              <View style={styles.avatarStyle}>\n                <Avatar\n                  avatar={avatar}\n                  onPress={handleProfile}\n                  size={'large'}\n                  plan={post.plan as number}\n                  isAccept={post.accept}\n                  additionalStyle={styles.img}\n                  testID=\"report-card-avatar\"\n                  isLoading={isLoading}\n                />\n              </View>\n            </View>\n\n            <Space height={vs(5)} />\n            <Text\n              h={'h3'}\n              textStyle={styles.lightText}\n              title={post.text || ' '}\n              numberOfLines={4}\n              testID=\"report-card-postText\"\n            />\n          </View>\n          <ActionButtons\n            isAdmin={isAdmin}\n            commCount={commCount}\n            likeCount={likeCount}\n            handleAdminMenu={handleAdminMenu}\n            handleComment={handleComment}\n            handleLike={handleLike}\n            handleShareLink={handleShareLink}\n            isLiked={isLiked}\n          />\n        </View>\n      </Pressable>\n    </NeomorphView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  avatarStyle: {\n    top: 10,\n  },\n  card: {\n    height: vs(180),\n    width: W - 50,\n  },\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    paddingHorizontal: s(15),\n    paddingVertical: s(6),\n  },\n  contentContainer: {\n    flex: 1,\n  },\n  headerInfo: {\n    flexDirection: 'column',\n    flex: 1,\n  },\n  headerName: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  img: {\n    marginBottom: s(12),\n  },\n  lightText: {\n    textAlign: 'left',\n  },\n  userInfoContainer: {\n    top: 15,\n    width: W - 150,\n  },\n})\n\nexport { ReportCard }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx",{"fileContent":"import React from 'react'\n\nimport { View, TextInput, StyleSheet } from 'react-native'\n\nimport { NeomorphFlexView } from 'components'\nimport { gray } from 'cons'\nimport { ms, s } from 'react-native-size-matters'\n\ninterface TextInputFieldProps {\n  placeholder: string\n  multiline?: boolean\n  value: string\n  onBlur: () => void\n  onChangeText: (text: string) => void\n  inputMode?:\n    | 'decimal'\n    | 'email'\n    | 'none'\n    | 'numeric'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url'\n  keyboardType?:\n    | 'default'\n    | 'email-address'\n    | 'numeric'\n    | 'phone-pad'\n    | 'ascii-capable'\n    | 'numbers-and-punctuation'\n    | 'url'\n    | 'number-pad'\n    | 'name-phone-pad'\n    | 'decimal-pad'\n    | 'twitter'\n    | 'web-search'\n    | 'visible-password'\n}\n\nconst TextInputField: React.FC<TextInputFieldProps> = ({\n  placeholder,\n  value,\n  onChangeText,\n  multiline = false,\n  inputMode,\n  keyboardType,\n}) => {\n  const inputComponent = (\n    <View style={styles.container}>\n      <TextInput\n        placeholder={placeholder}\n        placeholderTextColor={gray}\n        multiline={multiline}\n        value={value}\n        onChangeText={onChangeText}\n        style={styles.input}\n        inputMode={inputMode}\n        keyboardType={keyboardType}\n      />\n    </View>\n  )\n\n  return (\n    <NeomorphFlexView viewStyle={styles.card}>\n      {inputComponent}\n    </NeomorphFlexView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    alignSelf: 'center',\n    borderRadius: s(40),\n    height: ms(60, 0.9),\n    justifyContent: 'center',\n    width: ms(230, 0.9),\n  },\n  container: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    flexDirection: 'row',\n    marginHorizontal: 20,\n    marginVertical: 10,\n    paddingVertical: 10,\n  },\n  input: {\n    bottom: 1,\n    color: gray,\n    flex: 1,\n    fontSize: 16,\n  },\n})\n\nexport { TextInputField }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.test.tsx",{"fileContent":"import React from 'react'\n\nimport { fireEvent, render } from '@testing-library/react-native'\nimport renderer from 'react-test-renderer'\n\nimport '@testing-library/jest-native/extend-expect'\nimport { Avatar } from './Avatar'\n\ndescribe('Avatar Component', () => {\n  it('matches the snapshot', () => {\n    const tree = renderer\n      .create(\n        <Avatar\n          plan={5}\n          size=\"medium\"\n          avatar=\"avatar-url\"\n          testID=\"avatar-component\"\n        />,\n      )\n      .toJSON()\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('renders correctly with default props', () => {\n    const { getByTestId } = render(\n      <Avatar\n        plan={5}\n        size=\"medium\"\n        avatar=\"avatar-url\"\n        testID=\"avatar-component\"\n      />,\n    )\n    expect(getByTestId('avatar-component')).toBeTruthy()\n  })\n\n  it('calls onPress function when pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(\n      <Avatar\n        plan={5}\n        size=\"medium\"\n        avatar=\"avatar-url\"\n        onPress={onPressMock}\n        testID=\"avatar-component\"\n      />,\n    )\n    const avatarComponent = getByTestId('avatar-component')\n    fireEvent.press(avatarComponent)\n    expect(onPressMock).toHaveBeenCalled()\n  })\n\n  it('displays time icon when isAccept is false', () => {\n    const { queryByTestId } = render(\n      <Avatar\n        plan={5}\n        size=\"medium\"\n        avatar=\"avatar-url\"\n        isAccept={false}\n        testID=\"avatar-component\"\n      />,\n    )\n    expect(queryByTestId('avatar-title')).toBeNull()\n    expect(queryByTestId('time-icon')).toBeTruthy()\n  })\n\n  it('displays text title when isAccept is true', () => {\n    const { queryByTestId } = render(\n      <Avatar\n        plan={5}\n        size=\"medium\"\n        avatar=\"avatar-url\"\n        isAccept={true}\n        testID=\"avatar-component\"\n      />,\n    )\n    expect(queryByTestId('avatar-title')).toBeTruthy()\n    expect(queryByTestId('avatar-title')).toHaveTextContent('05')\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.test.tsx",{"fileContent":"import React from 'react'\n\nimport { fireEvent, render } from '@testing-library/react-native'\n\nimport { ActionButtons } from './ActionButtons'\nconst isLiked = false\n\ndescribe('ActionButtons Component', () => {\n  it('renders admin menu button if isAdmin is true', () => {\n    const handleAdminMenu = jest.fn()\n    const { getByTestId } = render(\n      <ActionButtons\n        isAdmin={true}\n        commCount={5}\n        likeCount={10}\n        handleAdminMenu={handleAdminMenu}\n        handleComment={() => {}}\n        handleLike={() => {}}\n        handleShareLink={() => {}}\n        isLiked={isLiked}\n      />,\n    )\n    const adminMenuButton = getByTestId('admin-menu-button')\n    expect(adminMenuButton).toBeTruthy()\n  })\n\n  it('renders comment and like buttons', () => {\n    const { getByTestId } = render(\n      <ActionButtons\n        isAdmin={false}\n        commCount={5}\n        likeCount={10}\n        handleAdminMenu={() => {}}\n        handleComment={() => {}}\n        handleLike={() => {}}\n        isLiked={isLiked}\n        handleShareLink={() => {}}\n      />,\n    )\n    const commentButton = getByTestId('comment-button')\n    const heart = isLiked ? 'heart' : 'heart-outline'\n    const likeButton = getByTestId(heart)\n    expect(commentButton).toBeTruthy()\n    expect(likeButton).toBeTruthy()\n  })\n\n  it('calls handleAdminMenu when admin menu button is pressed', () => {\n    const handleAdminMenu = jest.fn()\n    const { getByTestId } = render(\n      <ActionButtons\n        isAdmin={true}\n        commCount={5}\n        likeCount={10}\n        handleAdminMenu={handleAdminMenu}\n        handleComment={() => {}}\n        handleLike={() => {}}\n        handleShareLink={() => {}}\n        isLiked={isLiked}\n      />,\n    )\n    const adminMenuButton = getByTestId('admin-menu-button')\n    fireEvent.press(adminMenuButton)\n    expect(handleAdminMenu).toHaveBeenCalled()\n  })\n\n  it('calls handleComment when comment button is pressed', () => {\n    const handleComment = jest.fn()\n    const { getByTestId } = render(\n      <ActionButtons\n        isAdmin={false}\n        commCount={5}\n        likeCount={10}\n        handleAdminMenu={() => {}}\n        handleComment={handleComment}\n        handleLike={() => {}}\n        isLiked={isLiked}\n        handleShareLink={() => {}}\n      />,\n    )\n    const commentButton = getByTestId('comment-button')\n    fireEvent.press(commentButton)\n    expect(handleComment).toHaveBeenCalled()\n  })\n\n  it('calls handleLike when like button is pressed', () => {\n    const handleLike = jest.fn()\n    const { getByTestId } = render(\n      <ActionButtons\n        isAdmin={false}\n        commCount={5}\n        likeCount={10}\n        handleAdminMenu={() => {}}\n        handleComment={() => {}}\n        handleLike={handleLike}\n        isLiked={isLiked}\n        handleShareLink={() => {}}\n      />,\n    )\n    const heart = isLiked ? 'heart' : 'heart-outline'\n    const likeButton = getByTestId(heart)\n    fireEvent.press(likeButton)\n    expect(handleLike).toHaveBeenCalled()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Background/Background.test.tsx",{"fileContent":"import React from 'react'\n\nimport { Text } from 'react-native'\n\nimport { render } from '@testing-library/react-native'\nimport renderer from 'react-test-renderer'\n\nimport { Background } from './Background'\n\ndescribe('Background Component', () => {\n  it('renders correctly', () => {\n    const tree = renderer\n      .create(\n        <Background>\n          <Text testID=\"child-text\">Hello, World!</Text>\n        </Background>,\n      )\n      .toJSON()\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('renders children', () => {\n    const { getByTestId } = render(\n      <Background>\n        <Text testID=\"child-text\">Hello, World!</Text>\n      </Background>,\n    )\n    const childText = getByTestId('child-text')\n    expect(childText).toBeTruthy()\n    expect(childText.props.children).toBe('Hello, World!')\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/Button/Button.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { Button } from './Button'\n\ndescribe('Button Component', () => {\n  it('renders correctly', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(\n      <Button title=\"Test Button\" onPress={onPressMock} />,\n    )\n\n    const buttonTitle = getByTestId('button-title')\n\n    // Simulate button press\n    fireEvent.press(buttonTitle)\n\n    // Check if the onPress callback was called\n    expect(onPressMock).toHaveBeenCalledTimes(1)\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Buttons/Button/Button.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonEdit/ButtonEdit.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { ButtonEdit } from './ButtonEdit'\n\ndescribe('ButtonEdit Component', () => {\n  it('calls onPress callback when pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(<ButtonEdit onPress={onPressMock} />)\n\n    const buttonEdit = getByTestId('button-edit')\n\n    // Simulate button press\n    fireEvent.press(buttonEdit)\n\n    // Check if the onPress callback was called\n    expect(onPressMock).toHaveBeenCalledTimes(1)\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonEdit/ButtonEdit.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonLink/ButtonLink.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { ButtonLink } from './ButtonLink'\n\ndescribe('ButtonLink Component', () => {\n  it('calls onPress callback when pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(\n      <ButtonLink title=\"Test Link\" onPress={onPressMock} />,\n    )\n\n    const buttonLinkContainer = getByTestId('button-link-container')\n\n    // Simulate button press\n    fireEvent.press(buttonLinkContainer)\n\n    // Check if the onPress callback was called\n    expect(onPressMock).toHaveBeenCalledTimes(1)\n  })\n\n  it('renders title correctly', () => {\n    const title = 'Test Link'\n    const { getByTestId } = render(\n      <ButtonLink title={title} onPress={() => {}} />,\n    )\n\n    const buttonLinkTitle = getByTestId('button-link-title')\n\n    // Check if title is rendered correctly\n    expect(buttonLinkTitle.props.children).toBe(title)\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonLink/ButtonLink.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonVectorIcon/ButtonVectorIcon.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { ButtonVectorIcon } from './ButtonVectorIcon'\n\ndescribe('ButtonVectorIcon Component', () => {\n  it('calls onPress callback when pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(\n      <ButtonVectorIcon\n        name=\"volume-up\"\n        onPress={onPressMock}\n        testID=\"button-vector-icon\"\n      />,\n    )\n\n    const buttonVectorIcon = getByTestId('button-vector-icon')\n\n    // Simulate button press\n    fireEvent.press(buttonVectorIcon)\n\n    // Check if the onPress callback was called\n    expect(onPressMock).toHaveBeenCalledTimes(1)\n  })\n\n  it('renders correct icon', () => {\n    const iconName = 'volume-up'\n    const { getByTestId } = render(\n      <ButtonVectorIcon\n        name={iconName}\n        onPress={() => {}}\n        testID=\"button-vector-icon\"\n      />,\n    )\n\n    const renderedIcon = getByTestId('button-vector-icon')\n\n    // Check if the correct icon is rendered\n    expect(renderedIcon).toBeTruthy()\n    // You might also want to check for the specific icon library used (FontAwesome, Ionicons, etc.)\n    // For example, if FontAwesome is used:\n    // expect(renderedIcon.getByType(Icon).props.name).toBe(iconName);\n    // If Ionicons is used:\n    // expect(renderedIcon.getByType(Ionicons).props.name).toBe(iconName);\n  })\n\n  it('renders count correctly', () => {\n    const count = 10\n    const { getByTestId, getByText } = render(\n      <ButtonVectorIcon\n        name=\"volume-up\"\n        onPress={() => {}}\n        count={count}\n        testID=\"button-vector-icon\"\n      />,\n    )\n\n    const renderedIcon = getByTestId('button-vector-icon')\n    const renderedCount = getByText(count.toString())\n\n    // Check if the count is rendered correctly\n    expect(renderedIcon).toBeTruthy()\n    expect(renderedCount).toBeTruthy()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonVectorIcon/ButtonVectorIcon.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { CommentBubbleLeft } from './CommentBubbleLeft'\n\ndescribe('CommentBubbleLeft Component', () => {\n  const mockPost = {\n    id: 123, // Add id property\n    createTime: 1628779200000,\n    liked: ['user456'],\n    comments: [], // Add comments property\n    ownerId: 'user123', // Add ownerId property\n    text: 'Test comment text',\n    plan: 1,\n    accept: true,\n  }\n  const mockFullName = 'John Doe'\n  const mockAvatar = 'avatar-url'\n  const mockDate = '2023-08-12'\n  const mockHandleProfile = jest.fn()\n  const mockOnPress = jest.fn()\n\n  it('renders correctly', () => {\n    const { getByTestId, getByText } = render(\n      <CommentBubbleLeft\n        post={mockPost}\n        fullName={mockFullName}\n        avatar={mockAvatar}\n        date={mockDate}\n        handleProfile={mockHandleProfile}\n        onPress={mockOnPress}\n      />,\n    )\n\n    const commentBubbleContainer = getByTestId('comment-bubble-left-container')\n    const commentText = getByText('Test comment text')\n    const fullName = getByText('John Doe')\n    const date = getByText('2023-08-12')\n\n    // Check if the component renders\n    expect(commentBubbleContainer).toBeTruthy()\n\n    // Check if the post text renders\n    expect(commentText).toBeTruthy()\n\n    // Check if the full name renders\n    expect(fullName).toBeTruthy()\n\n    // Check if the date renders\n    expect(date).toBeTruthy()\n\n    // Simulate press on the component\n    fireEvent.press(commentBubbleContainer)\n\n    // Check if the onPress callback was called\n    expect(mockOnPress).toHaveBeenCalledTimes(1)\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { CommentBubbleRight } from './CommentBubbleRight'\n\ndescribe('CommentBubbleRight Component', () => {\n  const mockPost = {\n    id: 123, // Add id property\n    createTime: 1628779200000,\n    liked: ['user456'],\n    comments: [], // Add comments property\n    ownerId: 'user123', // Add ownerId property\n    text: 'Test comment text',\n    plan: 1,\n    accept: true,\n  }\n  const mockFullName = 'John Doe'\n  const mockAvatar = 'avatar-url'\n  const mockDate = '2023-08-12'\n  const mockHandleProfile = jest.fn()\n  const mockOnPress = jest.fn()\n\n  it('renders correctly', () => {\n    const { getByTestId, getByText } = render(\n      <CommentBubbleRight\n        post={mockPost}\n        fullName={mockFullName}\n        avatar={mockAvatar}\n        date={mockDate}\n        handleProfile={mockHandleProfile}\n        onPress={mockOnPress}\n      />,\n    )\n\n    const commentBubbleContainer = getByTestId('comment-bubble-right-container')\n    const commentText = getByText('Test comment text')\n    const fullName = getByText('John Doe')\n    const date = getByText('2023-08-12')\n\n    // Check if the component renders\n    expect(commentBubbleContainer).toBeTruthy()\n\n    // Check if the post text renders\n    expect(commentText).toBeTruthy()\n\n    // Check if the full name renders\n    expect(fullName).toBeTruthy()\n\n    // Check if the date renders\n    expect(date).toBeTruthy()\n\n    // Simulate press on the component\n    fireEvent.press(commentBubbleContainer)\n\n    // Check if the onPress callback was called\n    expect(mockOnPress).toHaveBeenCalledTimes(1)\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Display/Display.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render } from '@testing-library/react-native'\n\nimport { Display } from './Display'\n\ndescribe('Display Component', () => {\n  it('renders correctly', () => {\n    const { getByTestId, getByText } = render(\n      <Display title=\"Expected Display Text\" />,\n    )\n\n    const displayText = getByTestId('display-text')\n    const expectedTitle = 'Expected Display Text' // Замените на ожидаемый текст\n\n    // Check if the component renders\n    expect(displayText).toBeTruthy()\n\n    // Check if the translated text renders correctly\n    expect(getByText(expectedTitle)).toBeTruthy()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.test.tsx",{"fileContent":"import React from 'react'\n\nimport { View } from 'react-native'\n\nimport { render } from '@testing-library/react-native'\nimport renderer from 'react-test-renderer'\n\nimport { MarkdownView } from './MarkdownView'\n\ndescribe('MarkdownView Component', () => {\n  const mockMarkdown =\n    '## Heading 2\\n\\nThis is some **bold** and *italic* text.\\n\\n- Item 1\\n- Item 2\\n- Item 3'\n  const mockChildren = <View testID=\"mock-children\" />\n\n  it('matches snapshot', () => {\n    const tree = renderer\n      .create(<MarkdownView markdown={mockMarkdown} children={mockChildren} />)\n      .toJSON()\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('renders correctly', () => {\n    const { getByTestId, getByText } = render(\n      <MarkdownView markdown={mockMarkdown} children={mockChildren} />,\n    )\n\n    const markdownHeading = getByText('Heading 2')\n    const boldText = getByText('bold')\n    const italicText = getByText('italic')\n    const item1 = getByText('Item 1')\n    const item2 = getByText('Item 2')\n    const item3 = getByText('Item 3')\n    const childrenView = getByTestId('mock-children')\n\n    // Check if the markdown content renders\n    expect(markdownHeading).toBeTruthy()\n    expect(boldText).toBeTruthy()\n    expect(italicText).toBeTruthy()\n    expect(item1).toBeTruthy()\n    expect(item2).toBeTruthy()\n    expect(item3).toBeTruthy()\n\n    // Check if the children view renders\n    expect(childrenView).toBeTruthy()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.test.tsx",{"fileContent":"import React from 'react'\n\nimport { Text } from 'react-native'\n\nimport { render } from '@testing-library/react-native'\n\nimport { NeomorphBlurView } from './NeomorphBlurView'\n\ndescribe('NeomorphBlurView Component', () => {\n  it('renders correctly', () => {\n    const { getByTestId } = render(\n      <NeomorphBlurView>\n        <Text testID=\"child-view\">Test</Text>\n      </NeomorphBlurView>,\n    )\n\n    const neomorphBlurView = getByTestId('neomorph-blur-view')\n    const childView = getByTestId('child-view')\n\n    // Check if the NeomorphBlurView renders\n    expect(neomorphBlurView).toBeTruthy()\n\n    // Check if the child view renders\n    expect(childView).toBeTruthy()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.test.tsx",{"fileContent":"import React from 'react'\n\nimport { Text } from 'react-native'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { Pressable } from './Pressable'\n\ndescribe('Pressable', () => {\n  it('should render children', () => {\n    const { getByText } = render(\n      <Pressable>\n        <Text>Test Pressable</Text>\n      </Pressable>,\n    )\n\n    expect(getByText('Test Pressable')).toBeDefined()\n  })\n\n  it('should call onPress when pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByText } = render(\n      <Pressable onPress={onPressMock}>\n        <Text>Press Me</Text>\n      </Pressable>,\n    )\n\n    fireEvent.press(getByText('Press Me'))\n\n    expect(onPressMock).toHaveBeenCalledTimes(1)\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { ReportCard } from './ReportCard'\n\ndescribe('ReportCard', () => {\n  const mockProps = {\n    id: '1',\n    post: {\n      id: 1,\n      plan: 1,\n      accept: true,\n      text: 'Test post text',\n      createTime: 1678840800000,\n      liked: [],\n      comments: [],\n      ownerId: 'user1',\n    },\n    onPress: jest.fn(),\n    fullName: 'John Doe',\n    avatar: 'avatar.png',\n    isAdmin: true,\n    isLiked: false,\n    likeCount: 10,\n    commCount: 5,\n    date: '2023-08-12',\n    handleProfile: jest.fn(),\n    handleAdminMenu: jest.fn(),\n    handleShareLink: jest.fn(),\n    handleLike: jest.fn(),\n    handleComment: jest.fn(),\n  }\n\n  it('should render correctly', () => {\n    const { getByTestId } = render(<ReportCard {...mockProps} />)\n    const card = getByTestId('report-card')\n    expect(card).toBeDefined()\n  })\n\n  it('should call onPress when pressed', () => {\n    const { getByTestId } = render(<ReportCard {...mockProps} />)\n    const card = getByTestId('report-card')\n    fireEvent.press(card)\n    expect(mockProps.onPress).toHaveBeenCalledTimes(1)\n  })\n\n  it('should call handleProfile when avatar is pressed', () => {\n    const { getByTestId } = render(<ReportCard {...mockProps} />)\n    const avatar = getByTestId('report-card-avatar')\n    fireEvent.press(avatar)\n    expect(mockProps.handleProfile).toHaveBeenCalledTimes(1)\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/NeomorphShadowView.tsx",{"fileContent":"import React from 'react'\n\nimport { View, ViewStyle, StyleSheet } from 'react-native'\n\nimport { lightGray, white } from 'cons'\nimport { Shadow } from 'react-native-neomorph-shadows'\n\ninterface NeomorphShadowViewProps {\n  children: React.ReactNode\n  viewStyle?: ViewStyle\n}\n\nconst NeomorphShadowView: React.FC<NeomorphShadowViewProps> = ({\n  children,\n  viewStyle,\n}) => {\n  return (\n    <Shadow\n      style={{\n        ...styles.shadow,\n      }}\n    >\n      <View style={viewStyle}>{children}</View>\n    </Shadow>\n  )\n}\n\nconst styles = StyleSheet.create({\n  shadow: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    backgroundColor: white,\n\n    borderRadius: 25,\n    height: 1,\n    shadowColor: lightGray,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 1,\n    shadowRadius: 6,\n    width: 1,\n  },\n})\n\nexport { NeomorphShadowView }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { TextInputField } from './TextInputField'\n\ntest('renders TextInputField correctly', () => {\n  const placeholder = 'Enter text'\n  const value = 'Hello, world!'\n  const onBlur = jest.fn()\n  const onChangeText = jest.fn()\n\n  const { getByPlaceholderText } = render(\n    <TextInputField\n      placeholder={placeholder}\n      value={value}\n      onBlur={onBlur}\n      onChangeText={onChangeText}\n    />,\n  )\n\n  const input = getByPlaceholderText(placeholder)\n\n  expect(input).toBeDefined()\n  expect(input.props.value).toBe(value)\n\n  // Simulate typing in the input field\n  const newText = 'New text'\n  fireEvent.changeText(input, newText)\n  expect(onChangeText).toHaveBeenCalledWith(newText)\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/hooks/useLeelaGame/useLeelaGame.test.tsx",{"fileContent":"import { renderHook, act } from '@testing-library/react-hooks'\nimport i18next from 'i18next'\n// @ts-ignore\nimport MockAsyncStorage from 'mock-async-storage'\n\nimport { GEM_ICONS } from './images'\nimport { useLeelaGame } from './useLeelaGame'\n\nconst mockAsyncStorage = new MockAsyncStorage()\njest.mock('@react-native-async-storage/async-storage', () => mockAsyncStorage)\n\nmockAsyncStorage.setItem = jest.fn()\n\ndescribe('useLeelaGame', () => {\n  beforeEach(() => {\n    mockAsyncStorage.clear()\n  })\n\n  it('should initialize state correctly', async () => {\n    const initialState = {\n      currentPlayer: {\n        id: 1,\n        plan: 68,\n        previousPlan: 68,\n        isStart: false,\n        isFinished: false,\n        consecutiveSixes: 0,\n        message: i18next.t('sixToBegin'),\n        positionBeforeThreeSixes: 0,\n        avatar: GEM_ICONS[1],\n      },\n      lastRoll: 1,\n      rollHistory: [],\n      planHistory: [68],\n    }\n\n    // Mock AsyncStorage.getItem\n    mockAsyncStorage.setItem('leelaGameState', JSON.stringify(initialState))\n    mockAsyncStorage.getItem = jest\n      .fn()\n      .mockResolvedValue(JSON.stringify(initialState))\n\n    const { result, waitForNextUpdate } = renderHook(() => useLeelaGame())\n\n    // Call the function that triggers state change\n    act(() => {\n      result.current.rollDice()\n    })\n\n    // Wait for the next update\n    await waitForNextUpdate()\n\n    expect(result.current.currentPlayer).toMatchObject(\n      initialState.currentPlayer,\n    )\n    expect(result.current.rollHistory).toEqual(initialState.rollHistory)\n    expect(result.current.planHistory).toEqual(initialState.planHistory)\n  })\n\n  // Test other scenarios similarly\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/hooks/useLeelaGame/images/index.ts","/Users/playra/LeelaAiWeb3/src/hooks/useLeelaGame/useLeelaGame.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/hooks/useLeelaGame/handlePlayerMovement.ts"]}],["/Users/playra/LeelaAiWeb3/src/hooks/useLeelaGame/useLeelaGame.ts",{"fileContent":"import { useEffect, useReducer } from 'react'\n\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { captureException } from 'cons'\nimport i18next from 'i18next'\nimport { Player } from 'types'\n\nimport { handlePlayerMovement } from './handlePlayerMovement'\nimport { GEM_ICONS } from './images'\n\nconst MAX_ROLL = 6\n\ninterface State {\n  currentPlayer: Player\n  lastRoll: number\n  rollHistory: number[]\n  planHistory: number[]\n}\n\ntype Action =\n  | { type: 'ROLL_DICE' }\n  | { type: 'UPDATE_PLAYER'; player: Player }\n  | { type: 'SET_ROLL_HISTORY'; rollHistory: number[] }\n  | { type: 'SET_PLAN_HISTORY'; planHistory: number[] }\n  | { type: 'SET_INITIAL_STATE'; initialState: State }\n\nconst initialState: State = {\n  currentPlayer: {\n    id: 1,\n    plan: 68,\n    previousPlan: 68,\n    isStart: false,\n    isFinished: false,\n    consecutiveSixes: 0,\n    message: i18next.t('sixToBegin'),\n    positionBeforeThreeSixes: 0,\n    avatar: GEM_ICONS[1],\n  },\n  lastRoll: 1,\n  rollHistory: [],\n  planHistory: [68],\n}\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ROLL_DICE':\n      const rollResult = Math.floor(Math.random() * MAX_ROLL) + 1\n      return {\n        ...state,\n        lastRoll: rollResult,\n        rollHistory: [...state.rollHistory, rollResult],\n        currentPlayer: handlePlayerMovement(state.currentPlayer, rollResult),\n      }\n    case 'UPDATE_PLAYER':\n      return {\n        ...state,\n        currentPlayer: action.player,\n      }\n    case 'SET_ROLL_HISTORY':\n      return {\n        ...state,\n        rollHistory: action.rollHistory,\n      }\n    case 'SET_PLAN_HISTORY':\n      return {\n        ...state,\n        planHistory: action.planHistory,\n      }\n    case 'SET_INITIAL_STATE':\n      return action.initialState\n    default:\n      return state\n  }\n}\n\nconst useLeelaGame = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const getSavedState = async () => {\n    try {\n      const savedState = await AsyncStorage.getItem('leelaGameState')\n      return savedState ? JSON.parse(savedState) : initialState\n    } catch (error) {\n      captureException(error, 'getSavedState')\n      return initialState\n    }\n  }\n\n  useEffect(() => {\n    getSavedState().then((savedState) => {\n      dispatch({ type: 'SET_INITIAL_STATE', initialState: savedState })\n    })\n  }, [])\n\n  // Подписка на изменения стейта и сохранение в AsyncStorage\n  useEffect(() => {\n    const saveState = async () => {\n      try {\n        await AsyncStorage.setItem('leelaGameState', JSON.stringify(state))\n      } catch (error) {\n        captureException(error, 'saveState')\n      }\n    }\n\n    saveState()\n  }, [state])\n\n  const rollDice = () => {\n    dispatch({ type: 'ROLL_DICE' })\n  }\n\n  const updatePlayer = (player: Player) => {\n    dispatch({ type: 'UPDATE_PLAYER', player })\n  }\n\n  const setRollHistory = (rollHistory: number[]) => {\n    dispatch({ type: 'SET_ROLL_HISTORY', rollHistory })\n  }\n\n  const setPlanHistory = (planHistory: number[]) => {\n    dispatch({ type: 'SET_PLAN_HISTORY', planHistory })\n  }\n\n  return {\n    currentPlayer: state.currentPlayer,\n    rollHistory: state.rollHistory,\n    planHistory: state.planHistory,\n    rollDice,\n    lastRoll: state.lastRoll,\n    updatePlayer,\n    setRollHistory,\n    setPlanHistory,\n  }\n}\n\nexport { useLeelaGame }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/hooks/useLeelaGame/handlePlayerMovement.ts","/Users/playra/LeelaAiWeb3/src/hooks/useLeelaGame/images/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/hooks/useLeelaGame/handlePlayerMovement.ts",{"fileContent":"import i18next from 'i18next'\nimport { Player } from 'types'\n\nconst MAX_ROLL = 6\nconst TOTAL_PLANS = 72\nconst WIN_PLAN = 68\n\nconst handleToMove = (\n  name: string,\n  updatedPlayer: Player,\n  newPlan: number,\n  to: number,\n  roll: number,\n): Player => {\n  const updatedMessage = i18next.t(name, {\n    currentPlayer: updatedPlayer.id,\n    from: newPlan,\n    to: to,\n    roll,\n  })\n  return {\n    ...updatedPlayer,\n    message: updatedMessage,\n    plan: to,\n  }\n}\n\nconst handlePlayerMovement = (updatedPlayer: Player, roll: number): Player => {\n  if (!updatedPlayer.isStart) {\n    if (roll !== MAX_ROLL) {\n      const startMessage = i18next.t('sixToBegin')\n      return {\n        ...updatedPlayer,\n        message: startMessage,\n      }\n    } else {\n      const updatedMessage = i18next.t('moveAfterSix', {\n        currentPlayer: updatedPlayer.id,\n      })\n      return {\n        ...updatedPlayer,\n        plan: MAX_ROLL,\n        isStart: true,\n        consecutiveSixes: 1,\n        message: updatedMessage,\n      }\n    }\n  }\n\n  let newPlan = updatedPlayer.plan + roll\n\n  if (newPlan > TOTAL_PLANS) {\n    const updatedMessage = i18next.t('stay', {\n      currentPlayer: updatedPlayer.id,\n      roll,\n    })\n    return {\n      ...updatedPlayer,\n      message: updatedMessage,\n    }\n  } else if (newPlan === 12) {\n    return handleToMove('snakes', updatedPlayer, newPlan, 8, roll)\n  } else if (newPlan === 16) {\n    return handleToMove('snakes', updatedPlayer, newPlan, 4, roll)\n  } else if (newPlan === 24) {\n    return handleToMove('snakes', updatedPlayer, newPlan, 7, roll)\n  } else if (newPlan === 29) {\n    return handleToMove('snakes', updatedPlayer, newPlan, 6, roll)\n  } else if (newPlan === 44) {\n    return handleToMove('snakes', updatedPlayer, newPlan, 9, roll)\n  } else if (newPlan === 52) {\n    return handleToMove('snakes', updatedPlayer, newPlan, 35, roll)\n  } else if (newPlan === 55) {\n    return handleToMove('snakes', updatedPlayer, newPlan, 3, roll)\n  } else if (newPlan === 61) {\n    return handleToMove('snakes', updatedPlayer, newPlan, 13, roll)\n  } else if (newPlan === 63) {\n    return handleToMove('snakes', updatedPlayer, newPlan, 2, roll)\n  } else if (newPlan === 72) {\n    return handleToMove('snakes', updatedPlayer, newPlan, 51, roll)\n  } else if (newPlan === 10) {\n    return handleToMove('arrows', updatedPlayer, newPlan, 23, roll)\n  } else if (newPlan === 17) {\n    return handleToMove('arrows', updatedPlayer, newPlan, 69, roll)\n  } else if (newPlan === 20) {\n    return handleToMove('arrows', updatedPlayer, newPlan, 32, roll)\n  } else if (newPlan === 22) {\n    return handleToMove('arrows', updatedPlayer, newPlan, 60, roll)\n  } else if (newPlan === 27) {\n    return handleToMove('arrows', updatedPlayer, newPlan, 41, roll)\n  } else if (newPlan === 28) {\n    return handleToMove('arrows', updatedPlayer, newPlan, 50, roll)\n  } else if (newPlan === 37) {\n    return handleToMove('arrows', updatedPlayer, newPlan, 66, roll)\n  } else if (newPlan === 45) {\n    return handleToMove('arrows', updatedPlayer, newPlan, 67, roll)\n  } else if (newPlan === 46) {\n    return handleToMove('arrows', updatedPlayer, newPlan, 62, roll)\n  } else if (newPlan === 54 || newPlan === WIN_PLAN) {\n    const updatedMessage = i18next.t('finish', {\n      currentPlayer: updatedPlayer.id,\n    })\n    return {\n      ...updatedPlayer,\n      plan: newPlan,\n      previousPlan: newPlan,\n      isFinished: true,\n      isStart: false,\n      message: updatedMessage,\n    }\n  } else {\n    const updatedMessage = i18next.t('moveMessage', {\n      currentPlayer: updatedPlayer.id,\n      roll: roll,\n      from: updatedPlayer.plan,\n      to: newPlan,\n    })\n    return {\n      ...updatedPlayer,\n      plan: newPlan,\n      message: updatedMessage,\n    }\n  }\n}\n\nexport { handlePlayerMovement }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/hooks/useLeelaGame/images/index.ts",{"fileContent":"export const GEM_ICONS = [\n  require('./one.png'),\n  require('./two.png'),\n  require('./three.png'),\n  require('./four.png'),\n  require('./five.png'),\n  require('./six.png'),\n]\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/Address/Address.test.tsx",{"fileContent":"import React from 'react'\n\nimport Clipboard from '@react-native-clipboard/clipboard'\nimport { fireEvent, render } from '@testing-library/react-native'\n\nimport { Address } from '../Address'\n\ndescribe('Address component', () => {\n  it('should copy full address to clipboard and change opacity on press', async () => {\n    const rlyAccount = 'exampleAddress12345'\n\n    const { getByTestId, getByText } = render(\n      <Address rlyAccount={rlyAccount} />,\n    )\n\n    const copyButton = getByTestId('copy-button')\n    expect(copyButton).toBeDefined()\n\n    // Mock the clipboard's setString function\n    const mockSetString = jest.fn()\n    Clipboard.setString = mockSetString\n\n    // Trigger the press event on the copy button\n    fireEvent.press(copyButton)\n\n    // Expect that setString was called with the correct value\n    expect(mockSetString).toHaveBeenCalledWith(rlyAccount)\n    // Check the rendered text after animations complete\n    const renderedText = getByText('examp...ress12345')\n    expect(renderedText).toBeTruthy()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Address/Address.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx",{"fileContent":"export * from './Address'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Address/Address.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Address/Address.tsx",{"fileContent":"import React, { useState } from 'react'\n\nimport { StyleSheet, Pressable } from 'react-native'\n\nimport Clipboard from '@react-native-clipboard/clipboard'\nimport { Space, Text } from 'components'\nimport { accountHumanReadable, gray } from 'cons'\nimport Ionicons from 'react-native-vector-icons/Ionicons'\n\ninterface AddressProps {\n  rlyAccount: string\n}\n\nconst Address: React.FC<AddressProps> = ({ rlyAccount }) => {\n  const { short, full } = accountHumanReadable(rlyAccount)\n  const [isPressed, setIsPressed] = useState(false)\n\n  const copyFullToClipboard = () => {\n    Clipboard.setString(full)\n    setIsPressed(true)\n    setTimeout(() => {\n      setIsPressed(false)\n    }, 300)\n  }\n\n  return (\n    <Pressable\n      onPress={copyFullToClipboard}\n      style={[styles.container, isPressed && styles.pressed]}\n    >\n      <Text h={'h3'} title={short} testID=\"copy-button\" />\n      <Space width={10} />\n      <Ionicons name=\"copy-outline\" size={20} color={gray} />\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    marginTop: 20,\n    opacity: 1,\n  },\n  pressed: {\n    opacity: 0.5,\n  },\n})\n\nexport { Address }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/NeomorphShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx",{"fileContent":"export * from './Gem'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx",{"fileContent":"export * from './ActionButtons'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx",{"fileContent":"export * from './Space'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx",{"fileContent":"export * from './GameBoard'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/GameBoard/images/index.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx",{"fileContent":"export * from './MarkdownView'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx",{"fileContent":"export * from './NeomorphShadowView'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/NeomorphShadowView.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx",{"fileContent":"export * from './NeomorphCircle'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx",{"fileContent":"export * from './NeomorphBlurView'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx",{"fileContent":"export * from './NeomorphFlexView'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx",{"fileContent":"export * from './NeomorphView'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx",{"fileContent":"export * from './Avatar'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts",{"fileContent":"export * from './ButtonCircle/ButtonCircle'\nexport * from './Button/Button'\nexport * from './ButtonEdit/ButtonEdit'\nexport * from './ButtonLink/ButtonLink'\nexport * from './ButtonVectorIcon/ButtonVectorIcon'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonCircle/ButtonCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Button/Button.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonEdit/ButtonEdit.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonLink/ButtonLink.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonVectorIcon/ButtonVectorIcon.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonCircle/ButtonCircle.tsx",{"fileContent":"import React, { memo, useState } from 'react'\n\nimport { Pressable, useColorScheme, StyleSheet } from 'react-native'\n\nimport { dimGray, gray } from 'cons'\nimport { ms, s } from 'react-native-size-matters'\nimport Icon from 'react-native-vector-icons/FontAwesome'\nimport Ionicons from 'react-native-vector-icons/Ionicons'\n\nimport { NeomorphView, NeomorphFlexView } from '../..'\n\ninterface ButtonCircleProps {\n  name: string\n  onPress: () => void\n  isIonicons: boolean\n  size?: number\n}\n\nconst ButtonCircle = memo<ButtonCircleProps>(\n  ({ name, onPress, isIonicons, size = 30 }) => {\n    const [isPressed, setIsPressed] = useState(false)\n\n    const scheme = useColorScheme()\n    const colorTheme = scheme === 'dark' ? dimGray : gray\n\n    const handlePressIn = () => {\n      setIsPressed(true)\n    }\n\n    const handlePressOut = () => {\n      setIsPressed(false)\n      onPress && onPress()\n    }\n\n    return (\n      <Pressable\n        onPress={onPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        style={styles.container}\n        testID=\"buttonCircle\"\n      >\n        {isPressed ? (\n          <NeomorphFlexView viewStyle={styles.card}>\n            {isIonicons ? (\n              <Ionicons\n                name={name}\n                size={size}\n                color={gray}\n                style={styles.icon}\n              />\n            ) : (\n              <Icon\n                name={name}\n                size={size}\n                color={colorTheme}\n                style={styles.icon}\n              />\n            )}\n          </NeomorphFlexView>\n        ) : (\n          <NeomorphView viewStyle={styles.card}>\n            {isIonicons ? (\n              <Ionicons\n                name={name}\n                size={size}\n                color={colorTheme}\n                style={styles.icon}\n              />\n            ) : (\n              <Icon\n                name={name}\n                size={size}\n                color={colorTheme}\n                style={styles.icon}\n              />\n            )}\n          </NeomorphView>\n        )}\n      </Pressable>\n    )\n  },\n)\n\nconst styles = StyleSheet.create({\n  card: {\n    borderRadius: s(30),\n    height: ms(60, 0.9),\n    justifyContent: 'center',\n    width: ms(60, 0.9),\n  },\n  container: {\n    alignItems: 'center',\n    borderRadius: s(30),\n    height: ms(60, 0.9),\n    justifyContent: 'center',\n    width: ms(60, 0.9),\n  },\n  icon: {\n    alignSelf: 'center',\n  },\n  st: {\n    height: 1,\n  },\n})\n\nexport { ButtonCircle }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx",{"fileContent":"export * from './Background'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx",{"fileContent":"export * from './CenterView'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx",{"fileContent":"export * from './CommentBubbleLeft'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx",{"fileContent":"export * from './CommentBubbleRight'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx",{"fileContent":"export * from './Dice'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx",{"fileContent":"export * from './Display'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx",{"fileContent":"export * from './ReportCard'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx",{"fileContent":"export * from './TextInputField'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx",{"fileContent":"export * from './Text'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx",{"fileContent":"export * from './Header'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Header/Header.tsx","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/navigation.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Header/Header.tsx",{"fileContent":"import React, { memo } from 'react'\n\nimport { Platform, View, StyleSheet } from 'react-native'\n\nimport { Avatar, ButtonCircle } from 'components'\nimport { navigate } from 'cons/navigation'\nimport { mvs, s, vs } from 'react-native-size-matters'\n\nconst isIos = Platform.OS === 'ios'\n\ninterface HeaderT {\n  avatar?: string\n  onPress?: () => void | null\n  onPressRight?: () => void\n}\n\nconst Header = memo<HeaderT>(\n  ({\n    onPress = () => {\n      navigate('RULES_SCREEN')\n    },\n    onPressRight = () => {\n      navigate('PLANS_SCREEN')\n    },\n\n    avatar,\n  }) => {\n    return (\n      <View style={styles.container}>\n        {\n          <ButtonCircle\n            name=\"arrow-back\"\n            isIonicons\n            size={40}\n            onPress={onPress}\n          />\n        }\n\n        <View style={styles.flexOne}>\n          {avatar && (\n            <Avatar\n              plan={1}\n              size=\"large\"\n              avatar={avatar}\n              isAccept={true}\n              onPress={() => {\n                // Обработчик для нажатия на аватар\n                console.log('Avatar Pressed')\n              }}\n            />\n          )}\n        </View>\n\n        <ButtonCircle name=\"book\" isIonicons size={40} onPress={onPressRight} />\n      </View>\n    )\n  },\n)\n\nconst styles = StyleSheet.create({\n  childrenStyle: {},\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingBottom: mvs(1, 0.4),\n    zIndex: 20,\n  },\n  flexOne: { flex: 1 },\n  pressStyle: {\n    bottom: 3,\n  },\n  rightViewStyle: {\n    width: isIos ? s(60) : s(44),\n  },\n  titleStyle: {\n    fontSize: vs(18),\n  },\n})\n\nexport { Header }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/navigation.ts","/Users/playra/LeelaAiWeb3/src/components/Address/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Background/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/index.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/index.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/index.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Header/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/cons/navigation.ts",{"fileContent":"import * as React from 'react'\n\nimport { black, dimGray, lightGray, red, secondary, white } from 'cons'\n\nexport const navigationRef = React.createRef<any>()\n\nexport function navigate(name: string, params?: object) {\n  navigationRef.current?.navigate(name, params)\n}\n\nexport const goBack = () => {\n  if (navigationRef.current) {\n    navigationRef.current.goBack()\n  }\n}\n\nexport const isReadyRef = React.createRef<boolean>()\n\nexport const DarkTheme = {\n  dark: true,\n  colors: {\n    primary: secondary,\n    background: black,\n    card: white,\n    text: white,\n    border: dimGray,\n    notification: red,\n  },\n}\n\nexport const LightTheme = {\n  dark: false,\n  colors: {\n    primary: secondary,\n    background: lightGray,\n    card: white,\n    text: black,\n    border: dimGray,\n    notification: red,\n  },\n}\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Pressable/index.ts",{"fileContent":"export * from './Pressable'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Pressable/Pressable.tsx"]}]]