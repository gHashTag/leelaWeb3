2968f85b3441d3e0e1bc6947f71ff688
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StallTrackingInstrumentation = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _utils = require("@sentry/utils");
var _measurements = require("../measurements");
var MARGIN_OF_ERROR_SECONDS = 0.02;
var LOOP_TIMEOUT_INTERVAL_MS = 50;
var MAX_RUNNING_TRANSACTIONS = 10;
var StallTrackingInstrumentation = function () {
  function StallTrackingInstrumentation() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      minimumStallThreshold: 50
    };
    (0, _classCallCheck2.default)(this, StallTrackingInstrumentation);
    this.isTracking = false;
    this._totalStallTime = 0;
    this._stallCount = 0;
    this._lastIntervalMs = 0;
    this._timeout = null;
    this._statsByTransaction = new Map();
    this._minimumStallThreshold = options.minimumStallThreshold;
  }
  (0, _createClass2.default)(StallTrackingInstrumentation, [{
    key: "setupOnce",
    value: function setupOnce() {}
  }, {
    key: "onTransactionStart",
    value: function onTransactionStart(transaction) {
      var _this = this;
      if (this._statsByTransaction.has(transaction)) {
        _utils.logger.error('[StallTracking] Tried to start stall tracking on a transaction already being tracked. Measurements might be lost.');
        return;
      }
      this._startTracking();
      this._statsByTransaction.set(transaction, {
        longestStallTime: 0,
        atTimestamp: null,
        atStart: this._getCurrentStats(transaction)
      });
      this._flushLeakedTransactions();
      if (transaction.spanRecorder) {
        var originalAdd = transaction.spanRecorder.add;
        transaction.spanRecorder.add = function (span) {
          originalAdd.apply(transaction.spanRecorder, [span]);
          var originalSpanFinish = span.finish;
          span.finish = function (endTimestamp) {
            originalSpanFinish.apply(span, [endTimestamp]);
            if (span.endTimestamp) {
              _this._markSpanFinish(transaction, span.endTimestamp);
            }
          };
        };
      }
    }
  }, {
    key: "onTransactionFinish",
    value: function onTransactionFinish(transaction, passedEndTimestamp) {
      var transactionStats = this._statsByTransaction.get(transaction);
      if (!transactionStats) {
        _utils.logger.log('[StallTracking] Stall measurements were not added to transaction due to exceeding the max count.');
        this._statsByTransaction.delete(transaction);
        this._shouldStopTracking();
        return;
      }
      var endTimestamp = passedEndTimestamp !== null && passedEndTimestamp !== void 0 ? passedEndTimestamp : transaction.endTimestamp;
      var spans = transaction.spanRecorder ? transaction.spanRecorder.spans : [];
      var finishedSpanCount = spans.reduce(function (count, s) {
        return s !== transaction && s.endTimestamp ? count + 1 : count;
      }, 0);
      var trimEnd = transaction.toContext().trimEnd;
      var endWillBeTrimmed = trimEnd && finishedSpanCount > 0;
      var isIdleTransaction = ('activities' in transaction);
      var statsOnFinish;
      if (endTimestamp && isIdleTransaction) {
        var spansWillBeCancelled = spans.some(function (s) {
          return s !== transaction && s.startTimestamp < endTimestamp && !s.endTimestamp;
        });
        if (endWillBeTrimmed && !spansWillBeCancelled) {
          if (transactionStats.atTimestamp) {
            statsOnFinish = transactionStats.atTimestamp.stats;
          }
        } else {
          statsOnFinish = this._getCurrentStats(transaction);
        }
      } else if (endWillBeTrimmed) {
        if (transactionStats.atTimestamp) {
          statsOnFinish = transactionStats.atTimestamp.stats;
        }
      } else if (!endTimestamp) {
        statsOnFinish = this._getCurrentStats(transaction);
      }
      this._statsByTransaction.delete(transaction);
      this._shouldStopTracking();
      if (!statsOnFinish) {
        if (typeof endTimestamp !== 'undefined') {
          _utils.logger.log('[StallTracking] Stall measurements not added due to `endTimestamp` being set.');
        } else if (trimEnd) {
          _utils.logger.log('[StallTracking] Stall measurements not added due to `trimEnd` being set but we could not determine the stall measurements at that time.');
        }
        return;
      }
      transaction.setMeasurement(_measurements.STALL_COUNT, statsOnFinish.stall_count.value - transactionStats.atStart.stall_count.value, transactionStats.atStart.stall_count.unit);
      transaction.setMeasurement(_measurements.STALL_TOTAL_TIME, statsOnFinish.stall_total_time.value - transactionStats.atStart.stall_total_time.value, transactionStats.atStart.stall_total_time.unit);
      transaction.setMeasurement(_measurements.STALL_LONGEST_TIME, statsOnFinish.stall_longest_time.value, statsOnFinish.stall_longest_time.unit);
    }
  }, {
    key: "_markSpanFinish",
    value: function _markSpanFinish(transaction, spanEndTimestamp) {
      var previousStats = this._statsByTransaction.get(transaction);
      if (previousStats) {
        if (Math.abs((0, _utils.timestampInSeconds)() - spanEndTimestamp) > MARGIN_OF_ERROR_SECONDS) {
          _utils.logger.log('[StallTracking] Span end not logged due to end timestamp being outside the margin of error from now.');
          if (previousStats.atTimestamp && previousStats.atTimestamp.timestamp < spanEndTimestamp) {
            this._statsByTransaction.set(transaction, Object.assign(Object.assign({}, previousStats), {
              atTimestamp: null
            }));
          }
        } else {
          this._statsByTransaction.set(transaction, Object.assign(Object.assign({}, previousStats), {
            atTimestamp: {
              timestamp: spanEndTimestamp,
              stats: this._getCurrentStats(transaction)
            }
          }));
        }
      }
    }
  }, {
    key: "_getCurrentStats",
    value: function _getCurrentStats(transaction) {
      var _a, _b;
      return {
        stall_count: {
          value: this._stallCount,
          unit: 'none'
        },
        stall_total_time: {
          value: this._totalStallTime,
          unit: 'millisecond'
        },
        stall_longest_time: {
          value: (_b = (_a = this._statsByTransaction.get(transaction)) === null || _a === void 0 ? void 0 : _a.longestStallTime) !== null && _b !== void 0 ? _b : 0,
          unit: 'millisecond'
        }
      };
    }
  }, {
    key: "_startTracking",
    value: function _startTracking() {
      if (!this.isTracking) {
        this.isTracking = true;
        this._lastIntervalMs = Math.floor((0, _utils.timestampInSeconds)() * 1000);
        this._iteration();
      }
    }
  }, {
    key: "_stopTracking",
    value: function _stopTracking() {
      this.isTracking = false;
      if (this._timeout !== null) {
        clearTimeout(this._timeout);
        this._timeout = null;
      }
      this._reset();
    }
  }, {
    key: "_shouldStopTracking",
    value: function _shouldStopTracking() {
      if (this._statsByTransaction.size === 0) {
        this._stopTracking();
      }
    }
  }, {
    key: "_reset",
    value: function _reset() {
      this._stallCount = 0;
      this._totalStallTime = 0;
      this._lastIntervalMs = 0;
      this._statsByTransaction.clear();
    }
  }, {
    key: "_iteration",
    value: function _iteration() {
      var _a;
      var now = (0, _utils.timestampInSeconds)() * 1000;
      var totalTimeTaken = now - this._lastIntervalMs;
      if (totalTimeTaken >= LOOP_TIMEOUT_INTERVAL_MS + this._minimumStallThreshold) {
        var stallTime = totalTimeTaken - LOOP_TIMEOUT_INTERVAL_MS;
        this._stallCount += 1;
        this._totalStallTime += stallTime;
        for (var _ref of this._statsByTransaction.entries()) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var transaction = _ref2[0];
          var value = _ref2[1];
          var longestStallTime = Math.max((_a = value.longestStallTime) !== null && _a !== void 0 ? _a : 0, stallTime);
          this._statsByTransaction.set(transaction, Object.assign(Object.assign({}, value), {
            longestStallTime: longestStallTime
          }));
        }
      }
      this._lastIntervalMs = now;
      if (this.isTracking) {
        this._timeout = setTimeout(this._iteration.bind(this), LOOP_TIMEOUT_INTERVAL_MS);
      }
    }
  }, {
    key: "_flushLeakedTransactions",
    value: function _flushLeakedTransactions() {
      if (this._statsByTransaction.size > MAX_RUNNING_TRANSACTIONS) {
        var counter = 0;
        var len = this._statsByTransaction.size - MAX_RUNNING_TRANSACTIONS;
        var transactions = this._statsByTransaction.keys();
        for (var t of transactions) {
          if (counter >= len) break;
          counter += 1;
          this._statsByTransaction.delete(t);
        }
      }
    }
  }]);
  return StallTrackingInstrumentation;
}();
exports.StallTrackingInstrumentation = StallTrackingInstrumentation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,