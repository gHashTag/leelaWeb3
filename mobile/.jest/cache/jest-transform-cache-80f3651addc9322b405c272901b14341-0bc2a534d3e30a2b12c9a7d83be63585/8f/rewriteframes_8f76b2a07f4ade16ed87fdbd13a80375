fd62ce6826b98a698fae311697771101
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IOS_DEFAULT_BUNDLE_NAME = exports.ANDROID_DEFAULT_BUNDLE_NAME = void 0;
exports.createReactNativeRewriteFrames = createReactNativeRewriteFrames;
var _integrations = require("@sentry/integrations");
var _reactNative = require("react-native");
var _environment = require("../utils/environment");
var ANDROID_DEFAULT_BUNDLE_NAME = 'app:///index.android.bundle';
exports.ANDROID_DEFAULT_BUNDLE_NAME = ANDROID_DEFAULT_BUNDLE_NAME;
var IOS_DEFAULT_BUNDLE_NAME = 'app:///main.jsbundle';
exports.IOS_DEFAULT_BUNDLE_NAME = IOS_DEFAULT_BUNDLE_NAME;
function createReactNativeRewriteFrames() {
  return new _integrations.RewriteFrames({
    iteratee: function iteratee(frame) {
      if (!frame.filename) {
        return frame;
      }
      delete frame.abs_path;
      frame.filename = frame.filename.replace(/^file:\/\//, '').replace(/^address at /, '').replace(/^.*\/[^.]+(\.app|CodePush|.*(?=\/))/, '');
      if (frame.filename === '[native code]' || frame.filename === 'native') {
        return frame;
      }
      if ((0, _environment.isExpo)() && _reactNative.Platform.OS === 'android') {
        frame.filename = ANDROID_DEFAULT_BUNDLE_NAME;
        return frame;
      }
      if ((0, _environment.isExpo)() && _reactNative.Platform.OS === 'ios') {
        frame.filename = IOS_DEFAULT_BUNDLE_NAME;
        return frame;
      }
      var appPrefix = 'app://';
      frame.filename = frame.filename.indexOf('/') === 0 ? `${appPrefix}${frame.filename}` : `${appPrefix}/${frame.filename}`;
      return frame;
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZWdyYXRpb25zIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9lbnZpcm9ubWVudCIsIkFORFJPSURfREVGQVVMVF9CVU5ETEVfTkFNRSIsImV4cG9ydHMiLCJJT1NfREVGQVVMVF9CVU5ETEVfTkFNRSIsImNyZWF0ZVJlYWN0TmF0aXZlUmV3cml0ZUZyYW1lcyIsIlJld3JpdGVGcmFtZXMiLCJpdGVyYXRlZSIsImZyYW1lIiwiZmlsZW5hbWUiLCJhYnNfcGF0aCIsInJlcGxhY2UiLCJpc0V4cG8iLCJQbGF0Zm9ybSIsIk9TIiwiYXBwUHJlZml4IiwiaW5kZXhPZiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9pbnRlZ3JhdGlvbnMvcmV3cml0ZWZyYW1lcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXdyaXRlRnJhbWVzIH0gZnJvbSAnQHNlbnRyeS9pbnRlZ3JhdGlvbnMnO1xuaW1wb3J0IHR5cGUgeyBTdGFja0ZyYW1lIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCB7IGlzRXhwbyB9IGZyb20gJy4uL3V0aWxzL2Vudmlyb25tZW50JztcblxuZXhwb3J0IGNvbnN0IEFORFJPSURfREVGQVVMVF9CVU5ETEVfTkFNRSA9ICdhcHA6Ly8vaW5kZXguYW5kcm9pZC5idW5kbGUnO1xuZXhwb3J0IGNvbnN0IElPU19ERUZBVUxUX0JVTkRMRV9OQU1FID0gJ2FwcDovLy9tYWluLmpzYnVuZGxlJztcblxuLyoqXG4gKiBDcmVhdGVzIFJlYWN0IE5hdGl2ZSBkZWZhdWx0IHJld3JpdGUgZnJhbWVzIGludGVncmF0aW9uXG4gKiB3aGljaCBhcHBlbmRzIGFwcDovLyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBmaWxlbmFtZVxuICogYW5kIHJlbW92ZXMgZmlsZTovLywgJ2FkZHJlc3MgYXQnIHByZWZpeGVzLCBDb2RlUHVzaCBwb3N0Zml4LFxuICogYW5kIEV4cG8gYnVuZGxlIHBvc3RmaXguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWFjdE5hdGl2ZVJld3JpdGVGcmFtZXMoKTogUmV3cml0ZUZyYW1lcyB7XG4gIHJldHVybiBuZXcgUmV3cml0ZUZyYW1lcyh7XG4gICAgaXRlcmF0ZWU6IChmcmFtZTogU3RhY2tGcmFtZSkgPT4ge1xuICAgICAgaWYgKCFmcmFtZS5maWxlbmFtZSkge1xuICAgICAgICByZXR1cm4gZnJhbWU7XG4gICAgICB9XG4gICAgICBkZWxldGUgZnJhbWUuYWJzX3BhdGg7XG5cbiAgICAgIGZyYW1lLmZpbGVuYW1lID0gZnJhbWUuZmlsZW5hbWVcbiAgICAgICAgLnJlcGxhY2UoL15maWxlOlxcL1xcLy8sICcnKVxuICAgICAgICAucmVwbGFjZSgvXmFkZHJlc3MgYXQgLywgJycpXG4gICAgICAgIC5yZXBsYWNlKC9eLipcXC9bXi5dKyhcXC5hcHB8Q29kZVB1c2h8LiooPz1cXC8pKS8sICcnKTtcblxuICAgICAgaWYgKGZyYW1lLmZpbGVuYW1lID09PSAnW25hdGl2ZSBjb2RlXScgfHwgZnJhbWUuZmlsZW5hbWUgPT09ICduYXRpdmUnKSB7XG4gICAgICAgIHJldHVybiBmcmFtZTtcbiAgICAgIH1cblxuICAgICAgLy8gRXhwbyBhZGRzIGhhc2ggdG8gdGhlIGVuZCBvZiBidW5kbGUgbmFtZXNcbiAgICAgIGlmIChpc0V4cG8oKSAmJiBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICAgIGZyYW1lLmZpbGVuYW1lID0gQU5EUk9JRF9ERUZBVUxUX0JVTkRMRV9OQU1FO1xuICAgICAgICByZXR1cm4gZnJhbWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0V4cG8oKSAmJiBQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgICAgZnJhbWUuZmlsZW5hbWUgPSBJT1NfREVGQVVMVF9CVU5ETEVfTkFNRTtcbiAgICAgICAgcmV0dXJuIGZyYW1lO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBhcHBQcmVmaXggPSAnYXBwOi8vJztcbiAgICAgIC8vIFdlIGFsd2F5cyB3YW50IHRvIGhhdmUgYSB0cmlwbGUgc2xhc2hcbiAgICAgIGZyYW1lLmZpbGVuYW1lID1cbiAgICAgICAgZnJhbWUuZmlsZW5hbWUuaW5kZXhPZignLycpID09PSAwID8gYCR7YXBwUHJlZml4fSR7ZnJhbWUuZmlsZW5hbWV9YCA6IGAke2FwcFByZWZpeH0vJHtmcmFtZS5maWxlbmFtZX1gO1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH0sXG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUVPLElBQU1HLDJCQUEyQixHQUFHLDZCQUE2QjtBQUFDQyxPQUFBLENBQUFELDJCQUFBLEdBQUFBLDJCQUFBO0FBQ2xFLElBQU1FLHVCQUF1QixHQUFHLHNCQUFzQjtBQUFDRCxPQUFBLENBQUFDLHVCQUFBLEdBQUFBLHVCQUFBO0FBUXhELFNBQVVDLDhCQUE4QkEsQ0FBQTtFQUM1QyxPQUFPLElBQUlDLDJCQUFhLENBQUM7SUFDdkJDLFFBQVEsRUFBRSxTQUFBQSxTQUFDQyxLQUFpQixFQUFJO01BQzlCLElBQUksQ0FBQ0EsS0FBSyxDQUFDQyxRQUFRLEVBQUU7UUFDbkIsT0FBT0QsS0FBSzs7TUFFZCxPQUFPQSxLQUFLLENBQUNFLFFBQVE7TUFFckJGLEtBQUssQ0FBQ0MsUUFBUSxHQUFHRCxLQUFLLENBQUNDLFFBQVEsQ0FDNUJFLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQ3pCQSxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUMzQkEsT0FBTyxDQUFDLHFDQUFxQyxFQUFFLEVBQUUsQ0FBQztNQUVyRCxJQUFJSCxLQUFLLENBQUNDLFFBQVEsS0FBSyxlQUFlLElBQUlELEtBQUssQ0FBQ0MsUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUNyRSxPQUFPRCxLQUFLOztNQUlkLElBQUksSUFBQUksbUJBQU0sR0FBRSxJQUFJQyxxQkFBUSxDQUFDQyxFQUFFLEtBQUssU0FBUyxFQUFFO1FBQ3pDTixLQUFLLENBQUNDLFFBQVEsR0FBR1AsMkJBQTJCO1FBQzVDLE9BQU9NLEtBQUs7O01BR2QsSUFBSSxJQUFBSSxtQkFBTSxHQUFFLElBQUlDLHFCQUFRLENBQUNDLEVBQUUsS0FBSyxLQUFLLEVBQUU7UUFDckNOLEtBQUssQ0FBQ0MsUUFBUSxHQUFHTCx1QkFBdUI7UUFDeEMsT0FBT0ksS0FBSzs7TUFHZCxJQUFNTyxTQUFTLEdBQUcsUUFBUTtNQUUxQlAsS0FBSyxDQUFDQyxRQUFRLEdBQ1pELEtBQUssQ0FBQ0MsUUFBUSxDQUFDTyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUdELFNBQVMsR0FBR1AsS0FBSyxDQUFDQyxRQUFRLEVBQUUsR0FBRyxHQUFHTSxTQUFTLElBQUlQLEtBQUssQ0FBQ0MsUUFBUSxFQUFFO01BQ3hHLE9BQU9ELEtBQUs7SUFDZDtHQUNELENBQUM7QUFDSiJ9