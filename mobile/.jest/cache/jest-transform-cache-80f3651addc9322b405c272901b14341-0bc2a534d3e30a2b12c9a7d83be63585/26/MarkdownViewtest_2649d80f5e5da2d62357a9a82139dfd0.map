{"version":3,"names":["react_1","__importDefault","require","react_native_1","react_native_2","react_test_renderer_1","MarkdownView_1","describe","mockMarkdown","mockChildren","_jsxRuntime","jsx","View","testID","it","tree","default","create","MarkdownView","markdown","children","toJSON","expect","toMatchSnapshot","_ref","render","getByTestId","getByText","markdownHeading","boldText","italicText","item1","item2","item3","childrenView","toBeTruthy"],"sources":["/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.test.tsx"],"sourcesContent":["import React from 'react'\n\nimport { View } from 'react-native'\n\nimport { render } from '@testing-library/react-native'\nimport renderer from 'react-test-renderer'\n\nimport { MarkdownView } from './MarkdownView'\n\ndescribe('MarkdownView Component', () => {\n  const mockMarkdown =\n    '## Heading 2\\n\\nThis is some **bold** and *italic* text.\\n\\n- Item 1\\n- Item 2\\n- Item 3'\n  const mockChildren = <View testID=\"mock-children\" />\n\n  it('matches snapshot', () => {\n    const tree = renderer\n      .create(<MarkdownView markdown={mockMarkdown} children={mockChildren} />)\n      .toJSON()\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('renders correctly', () => {\n    const { getByTestId, getByText } = render(\n      <MarkdownView markdown={mockMarkdown} children={mockChildren} />,\n    )\n\n    const markdownHeading = getByText('Heading 2')\n    const boldText = getByText('bold')\n    const italicText = getByText('italic')\n    const item1 = getByText('Item 1')\n    const item2 = getByText('Item 2')\n    const item3 = getByText('Item 3')\n    const childrenView = getByTestId('mock-children')\n\n    // Check if the markdown content renders\n    expect(markdownHeading).toBeTruthy()\n    expect(boldText).toBeTruthy()\n    expect(italicText).toBeTruthy()\n    expect(item1).toBeTruthy()\n    expect(item2).toBeTruthy()\n    expect(item3).toBeTruthy()\n\n    // Check if the children view renders\n    expect(childrenView).toBeTruthy()\n  })\n})\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AAEA,IAAAE,cAAA,GAAAF,OAAA;AACA,IAAAG,qBAAA,GAAAJ,eAAA,CAAAC,OAAA;AAEA,IAAAI,cAAA,GAAAJ,OAAA;AAEAK,QAAQ,CAAC,wBAAwB,EAAE,YAAK;EACtC,IAAMC,YAAY,GAChB,0FAA0F;EAC5F,IAAMC,YAAY,GAAG,IAAAC,WAAA,CAAAC,GAAA,EAACR,cAAA,CAAAS,IAAI;IAACC,MAAM,EAAC;EAAe,EAAG;EAEpDC,EAAE,CAAC,kBAAkB,EAAE,YAAK;IAC1B,IAAMC,IAAI,GAAGV,qBAAA,CAAAW,OAAQ,CAClBC,MAAM,CAAC,IAAAP,WAAA,CAAAC,GAAA,EAACL,cAAA,CAAAY,YAAY;MAACC,QAAQ,EAAEX,YAAa;MAACY,QAAQ,EAAEX;IAAa,EAAG,CAAC,CACxEY,MAAM,EAAE;IACXC,MAAM,CAACP,IAAI,CAAC,CAACQ,eAAe,EAAE;EAChC,CAAC,CAAC;EAEFT,EAAE,CAAC,mBAAmB,EAAE,YAAK;IAC3B,IAAAU,IAAA,GAAmC,IAAApB,cAAA,CAAAqB,MAAM,EACvC,IAAAf,WAAA,CAAAC,GAAA,EAACL,cAAA,CAAAY,YAAY;QAACC,QAAQ,EAAEX,YAAa;QAACY,QAAQ,EAAEX;MAAa,EAAG,CACjE;MAFOiB,WAAW,GAAAF,IAAA,CAAXE,WAAW;MAAEC,SAAS,GAAAH,IAAA,CAATG,SAAS;IAI9B,IAAMC,eAAe,GAAGD,SAAS,CAAC,WAAW,CAAC;IAC9C,IAAME,QAAQ,GAAGF,SAAS,CAAC,MAAM,CAAC;IAClC,IAAMG,UAAU,GAAGH,SAAS,CAAC,QAAQ,CAAC;IACtC,IAAMI,KAAK,GAAGJ,SAAS,CAAC,QAAQ,CAAC;IACjC,IAAMK,KAAK,GAAGL,SAAS,CAAC,QAAQ,CAAC;IACjC,IAAMM,KAAK,GAAGN,SAAS,CAAC,QAAQ,CAAC;IACjC,IAAMO,YAAY,GAAGR,WAAW,CAAC,eAAe,CAAC;IAGjDJ,MAAM,CAACM,eAAe,CAAC,CAACO,UAAU,EAAE;IACpCb,MAAM,CAACO,QAAQ,CAAC,CAACM,UAAU,EAAE;IAC7Bb,MAAM,CAACQ,UAAU,CAAC,CAACK,UAAU,EAAE;IAC/Bb,MAAM,CAACS,KAAK,CAAC,CAACI,UAAU,EAAE;IAC1Bb,MAAM,CAACU,KAAK,CAAC,CAACG,UAAU,EAAE;IAC1Bb,MAAM,CAACW,KAAK,CAAC,CAACE,UAAU,EAAE;IAG1Bb,MAAM,CAACY,YAAY,CAAC,CAACC,UAAU,EAAE;EACnC,CAAC,CAAC;AACJ,CAAC,CAAC"}