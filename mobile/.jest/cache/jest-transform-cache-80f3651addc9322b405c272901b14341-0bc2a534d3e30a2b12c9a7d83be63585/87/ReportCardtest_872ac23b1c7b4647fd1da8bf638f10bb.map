{"version":3,"names":["react_1","__importDefault","require","react_native_1","ReportCard_1","describe","mockProps","id","post","plan","accept","text","createTime","liked","comments","ownerId","onPress","jest","fn","fullName","avatar","isAdmin","isLiked","likeCount","commCount","date","handleProfile","handleAdminMenu","handleShareLink","handleLike","handleComment","it","_ref","render","_jsxRuntime","jsx","ReportCard","Object","assign","getByTestId","card","expect","toBeDefined","_ref2","fireEvent","press","toHaveBeenCalledTimes","_ref3"],"sources":["/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.test.tsx"],"sourcesContent":["import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { ReportCard } from './ReportCard'\n\ndescribe('ReportCard', () => {\n  const mockProps = {\n    id: '1',\n    post: {\n      id: 1,\n      plan: 1,\n      accept: true,\n      text: 'Test post text',\n      createTime: 1678840800000,\n      liked: [],\n      comments: [],\n      ownerId: 'user1',\n    },\n    onPress: jest.fn(),\n    fullName: 'John Doe',\n    avatar: 'avatar.png',\n    isAdmin: true,\n    isLiked: false,\n    likeCount: 10,\n    commCount: 5,\n    date: '2023-08-12',\n    handleProfile: jest.fn(),\n    handleAdminMenu: jest.fn(),\n    handleShareLink: jest.fn(),\n    handleLike: jest.fn(),\n    handleComment: jest.fn(),\n  }\n\n  it('should render correctly', () => {\n    const { getByTestId } = render(<ReportCard {...mockProps} />)\n    const card = getByTestId('report-card')\n    expect(card).toBeDefined()\n  })\n\n  it('should call onPress when pressed', () => {\n    const { getByTestId } = render(<ReportCard {...mockProps} />)\n    const card = getByTestId('report-card')\n    fireEvent.press(card)\n    expect(mockProps.onPress).toHaveBeenCalledTimes(1)\n  })\n\n  it('should call handleProfile when avatar is pressed', () => {\n    const { getByTestId } = render(<ReportCard {...mockProps} />)\n    const avatar = getByTestId('report-card-avatar')\n    fireEvent.press(avatar)\n    expect(mockProps.handleProfile).toHaveBeenCalledTimes(1)\n  })\n})\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AAEA,IAAAE,YAAA,GAAAF,OAAA;AAEAG,QAAQ,CAAC,YAAY,EAAE,YAAK;EAC1B,IAAMC,SAAS,GAAG;IAChBC,EAAE,EAAE,GAAG;IACPC,IAAI,EAAE;MACJD,EAAE,EAAE,CAAC;MACLE,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE,IAAI;MACZC,IAAI,EAAE,gBAAgB;MACtBC,UAAU,EAAE,aAAa;MACzBC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE;KACV;IACDC,OAAO,EAAEC,IAAI,CAACC,EAAE,EAAE;IAClBC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE,YAAY;IACpBC,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE,KAAK;IACdC,SAAS,EAAE,EAAE;IACbC,SAAS,EAAE,CAAC;IACZC,IAAI,EAAE,YAAY;IAClBC,aAAa,EAAET,IAAI,CAACC,EAAE,EAAE;IACxBS,eAAe,EAAEV,IAAI,CAACC,EAAE,EAAE;IAC1BU,eAAe,EAAEX,IAAI,CAACC,EAAE,EAAE;IAC1BW,UAAU,EAAEZ,IAAI,CAACC,EAAE,EAAE;IACrBY,aAAa,EAAEb,IAAI,CAACC,EAAE;GACvB;EAEDa,EAAE,CAAC,yBAAyB,EAAE,YAAK;IACjC,IAAAC,IAAA,GAAwB,IAAA7B,cAAA,CAAA8B,MAAM,EAAC,IAAAC,WAAA,CAAAC,GAAA,EAAC/B,YAAA,CAAAgC,UAAU,EAAAC,MAAA,CAAAC,MAAA,KAAKhC,SAAS,CAAC,CAAG,CAAC;MAArDiC,WAAW,GAAAP,IAAA,CAAXO,WAAW;IACnB,IAAMC,IAAI,GAAGD,WAAW,CAAC,aAAa,CAAC;IACvCE,MAAM,CAACD,IAAI,CAAC,CAACE,WAAW,EAAE;EAC5B,CAAC,CAAC;EAEFX,EAAE,CAAC,kCAAkC,EAAE,YAAK;IAC1C,IAAAY,KAAA,GAAwB,IAAAxC,cAAA,CAAA8B,MAAM,EAAC,IAAAC,WAAA,CAAAC,GAAA,EAAC/B,YAAA,CAAAgC,UAAU,EAAAC,MAAA,CAAAC,MAAA,KAAKhC,SAAS,CAAC,CAAG,CAAC;MAArDiC,WAAW,GAAAI,KAAA,CAAXJ,WAAW;IACnB,IAAMC,IAAI,GAAGD,WAAW,CAAC,aAAa,CAAC;IACvCpC,cAAA,CAAAyC,SAAS,CAACC,KAAK,CAACL,IAAI,CAAC;IACrBC,MAAM,CAACnC,SAAS,CAACU,OAAO,CAAC,CAAC8B,qBAAqB,CAAC,CAAC,CAAC;EACpD,CAAC,CAAC;EAEFf,EAAE,CAAC,kDAAkD,EAAE,YAAK;IAC1D,IAAAgB,KAAA,GAAwB,IAAA5C,cAAA,CAAA8B,MAAM,EAAC,IAAAC,WAAA,CAAAC,GAAA,EAAC/B,YAAA,CAAAgC,UAAU,EAAAC,MAAA,CAAAC,MAAA,KAAKhC,SAAS,CAAC,CAAG,CAAC;MAArDiC,WAAW,GAAAQ,KAAA,CAAXR,WAAW;IACnB,IAAMnB,MAAM,GAAGmB,WAAW,CAAC,oBAAoB,CAAC;IAChDpC,cAAA,CAAAyC,SAAS,CAACC,KAAK,CAACzB,MAAM,CAAC;IACvBqB,MAAM,CAACnC,SAAS,CAACoB,aAAa,CAAC,CAACoB,qBAAqB,CAAC,CAAC,CAAC;EAC1D,CAAC,CAAC;AACJ,CAAC,CAAC"}