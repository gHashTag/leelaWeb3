6f0b4e2fba76a7605a3b5f7a675b1c85
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
var __1 = require("../");
var playerWithNumber = {
  id: 1,
  plan: 68,
  avatar: ''
};
describe('Gem Component', function () {
  test('Gem component snapshot', function () {
    var component = react_test_renderer_1.default.create((0, _jsxRuntime.jsx)(__1.Gem, {
      player: playerWithNumber,
      planNumber: 68,
      onPress: function onPress() {}
    }));
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
  test('should have the correct testID prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: function onPress() {}
      })),
      getByTestId = _ref.getByTestId;
    var gemNumber = getByTestId('gem-number');
    expect(gemNumber).toBeDefined();
  });
  test('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: onPressMock
      })),
      getByTestId = _ref2.getByTestId;
    var gemContainer = getByTestId('gem-container');
    react_native_1.fireEvent.press(gemContainer);
    expect(onPressMock).toHaveBeenCalled();
  });
  test('should render number for player with plan number 68', function () {
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        player: playerWithNumber,
        planNumber: 68
      })),
      queryByTestId = _ref3.queryByTestId;
    var numberGem = queryByTestId('gem-number');
    expect(numberGem).toBeNull();
    var imageGem = queryByTestId('player-gem-image');
    expect(imageGem).toBeFalsy();
  });
  test('should render correctly for player with number avatar', function () {
    var playerWithNumberAvatar = {
      id: 3,
      plan: 34,
      avatar: 106
    };
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        player: playerWithNumberAvatar,
        planNumber: 69
      })),
      getByTestId = _ref4.getByTestId;
    var imageGem = getByTestId('player-gem-image');
    expect(imageGem).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwicmVhY3RfdGVzdF9yZW5kZXJlcl8xIiwiX18xIiwicGxheWVyV2l0aE51bWJlciIsImlkIiwicGxhbiIsImF2YXRhciIsImRlc2NyaWJlIiwidGVzdCIsImNvbXBvbmVudCIsImRlZmF1bHQiLCJjcmVhdGUiLCJfanN4UnVudGltZSIsImpzeCIsIkdlbSIsInBsYXllciIsInBsYW5OdW1iZXIiLCJvblByZXNzIiwidHJlZSIsInRvSlNPTiIsImV4cGVjdCIsInRvTWF0Y2hTbmFwc2hvdCIsIl9yZWYiLCJyZW5kZXIiLCJnZXRCeVRlc3RJZCIsImdlbU51bWJlciIsInRvQmVEZWZpbmVkIiwib25QcmVzc01vY2siLCJqZXN0IiwiZm4iLCJfcmVmMiIsImdlbUNvbnRhaW5lciIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZWYzIiwicXVlcnlCeVRlc3RJZCIsIm51bWJlckdlbSIsInRvQmVOdWxsIiwiaW1hZ2VHZW0iLCJ0b0JlRmFsc3kiLCJwbGF5ZXJXaXRoTnVtYmVyQXZhdGFyIiwiX3JlZjQiLCJ0b0JlVHJ1dGh5Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9HZW0vR2VtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb21wb25lbnRzL0dlbS9HZW0udGVzdC50c3hcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJ1xuXG5pbXBvcnQgeyBHZW0gfSBmcm9tICcuLi8nXG5cbmNvbnN0IHBsYXllcldpdGhOdW1iZXIgPSB7XG4gIGlkOiAxLFxuICBwbGFuOiA2OCxcbiAgYXZhdGFyOiAnJyxcbn1cblxuZGVzY3JpYmUoJ0dlbSBDb21wb25lbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ0dlbSBjb21wb25lbnQgc25hcHNob3QnLCAoKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gcmVuZGVyZXIuY3JlYXRlKFxuICAgICAgPEdlbSBwbGF5ZXI9e3BsYXllcldpdGhOdW1iZXJ9IHBsYW5OdW1iZXI9ezY4fSBvblByZXNzPXsoKSA9PiB7fX0gLz4sXG4gICAgKVxuXG4gICAgY29uc3QgdHJlZSA9IGNvbXBvbmVudC50b0pTT04oKVxuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKVxuICB9KVxuXG4gIHRlc3QoJ3Nob3VsZCBoYXZlIHRoZSBjb3JyZWN0IHRlc3RJRCBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8R2VtIHBsYW5OdW1iZXI9ezV9IG9uUHJlc3M9eygpID0+IHt9fSAvPilcbiAgICBjb25zdCBnZW1OdW1iZXIgPSBnZXRCeVRlc3RJZCgnZ2VtLW51bWJlcicpXG4gICAgZXhwZWN0KGdlbU51bWJlcikudG9CZURlZmluZWQoKVxuICB9KVxuXG4gIHRlc3QoJ3Nob3VsZCBjYWxsIHRoZSBvblByZXNzIGZ1bmN0aW9uIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBvblByZXNzTW9jayA9IGplc3QuZm4oKVxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8R2VtIHBsYW5OdW1iZXI9ezV9IG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPilcbiAgICBjb25zdCBnZW1Db250YWluZXIgPSBnZXRCeVRlc3RJZCgnZ2VtLWNvbnRhaW5lcicpXG4gICAgZmlyZUV2ZW50LnByZXNzKGdlbUNvbnRhaW5lcilcbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICB9KVxuXG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgbnVtYmVyIGZvciBwbGF5ZXIgd2l0aCBwbGFuIG51bWJlciA2OCcsICgpID0+IHtcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxHZW0gcGxheWVyPXtwbGF5ZXJXaXRoTnVtYmVyfSBwbGFuTnVtYmVyPXs2OH0gLz4sXG4gICAgKVxuXG4gICAgY29uc3QgbnVtYmVyR2VtID0gcXVlcnlCeVRlc3RJZCgnZ2VtLW51bWJlcicpXG4gICAgZXhwZWN0KG51bWJlckdlbSkudG9CZU51bGwoKVxuXG4gICAgY29uc3QgaW1hZ2VHZW0gPSBxdWVyeUJ5VGVzdElkKCdwbGF5ZXItZ2VtLWltYWdlJylcbiAgICBleHBlY3QoaW1hZ2VHZW0pLnRvQmVGYWxzeSgpXG4gIH0pXG5cbiAgdGVzdCgnc2hvdWxkIHJlbmRlciBjb3JyZWN0bHkgZm9yIHBsYXllciB3aXRoIG51bWJlciBhdmF0YXInLCAoKSA9PiB7XG4gICAgY29uc3QgcGxheWVyV2l0aE51bWJlckF2YXRhciA9IHtcbiAgICAgIGlkOiAzLFxuICAgICAgcGxhbjogMzQsXG4gICAgICBhdmF0YXI6IDEwNixcbiAgICB9XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEdlbSBwbGF5ZXI9e3BsYXllcldpdGhOdW1iZXJBdmF0YXJ9IHBsYW5OdW1iZXI9ezY5fSAvPixcbiAgICApXG4gICAgY29uc3QgaW1hZ2VHZW0gPSBnZXRCeVRlc3RJZCgncGxheWVyLWdlbS1pbWFnZScpXG4gICAgZXhwZWN0KGltYWdlR2VtKS50b0JlVHJ1dGh5KClcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLHFCQUFBLEdBQUFILGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLEdBQUEsR0FBQUgsT0FBQTtBQUVBLElBQU1JLGdCQUFnQixHQUFHO0VBQ3ZCQyxFQUFFLEVBQUUs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