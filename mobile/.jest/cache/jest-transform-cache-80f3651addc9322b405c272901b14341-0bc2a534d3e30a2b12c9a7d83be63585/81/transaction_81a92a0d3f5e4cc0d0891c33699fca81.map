{"version":3,"names":["_utils","require","onlySampleIfChildSpans","transaction","spansCount","spanRecorder","spans","filter","span","spanId","length","logger","log","op","sampled","exports"],"sources":["../../../src/js/tracing/transaction.ts"],"sourcesContent":["import type { IdleTransaction } from '@sentry/core';\nimport type { BeforeFinishCallback } from '@sentry/core/types/tracing/idletransaction';\nimport { logger } from '@sentry/utils';\n\n/**\n * Idle Transaction callback to only sample transactions with child spans.\n * To avoid side effects of other callbacks this should be hooked as the last callback.\n */\nexport const onlySampleIfChildSpans: BeforeFinishCallback = (transaction: IdleTransaction): void => {\n  const spansCount =\n    transaction.spanRecorder &&\n    transaction.spanRecorder.spans.filter(span => span.spanId !== transaction.spanId).length;\n\n  if (!spansCount || spansCount <= 0) {\n    logger.log(`Not sampling as ${transaction.op} transaction has no child spans.`);\n    transaction.sampled = false;\n  }\n};\n"],"mappings":";;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AAMO,IAAMC,sBAAsB,GAAyB,SAA/CA,sBAAsBA,CAA0BC,WAA4B,EAAU;EACjG,IAAMC,UAAU,GACdD,WAAW,CAACE,YAAY,IACxBF,WAAW,CAACE,YAAY,CAACC,KAAK,CAACC,MAAM,CAAC,UAAAC,IAAI;IAAA,OAAIA,IAAI,CAACC,MAAM,KAAKN,WAAW,CAACM,MAAM;EAAA,EAAC,CAACC,MAAM;EAE1F,IAAI,CAACN,UAAU,IAAIA,UAAU,IAAI,CAAC,EAAE;IAClCO,aAAM,CAACC,GAAG,CAAC,mBAAmBT,WAAW,CAACU,EAAE,kCAAkC,CAAC;IAC/EV,WAAW,CAACW,OAAO,GAAG,KAAK;;AAE/B,CAAC;AAACC,OAAA,CAAAb,sBAAA,GAAAA,sBAAA"}