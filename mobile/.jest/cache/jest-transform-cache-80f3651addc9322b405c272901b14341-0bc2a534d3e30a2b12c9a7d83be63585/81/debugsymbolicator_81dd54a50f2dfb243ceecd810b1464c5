86ebbf5210a9345cc4e5d376eb7af747
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DebugSymbolicator = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var INTERNAL_CALLSITES_REGEX = new RegExp(['ReactNativeRenderer-dev\\.js$', 'MessageQueue\\.js$'].join('|'));
var DebugSymbolicator = function () {
  function DebugSymbolicator() {
    (0, _classCallCheck2.default)(this, DebugSymbolicator);
    this.name = DebugSymbolicator.id;
  }
  (0, _createClass2.default)(DebugSymbolicator, [{
    key: "setupOnce",
    value: function setupOnce() {
      var _this = this;
      (0, _core.addGlobalEventProcessor)(function (event, hint) {
        return (0, _tslib.__awaiter)(_this, void 0, void 0, function* () {
          var self = (0, _core.getCurrentHub)().getIntegration(DebugSymbolicator);
          if (!self || hint === undefined || hint.originalException === undefined) {
            return event;
          }
          var reactError = hint.originalException;
          var parseErrorStack = require('react-native/Libraries/Core/Devtools/parseErrorStack');
          var stack;
          try {
            stack = parseErrorStack(reactError);
          } catch (e) {
            stack = parseErrorStack(reactError.stack);
          }
          yield self._symbolicate(event, stack);
          event.platform = 'node';
          return event;
        });
      });
    }
  }, {
    key: "_symbolicate",
    value: function _symbolicate(event, stack) {
      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
        try {
          var symbolicateStackTrace = require('react-native/Libraries/Core/Devtools/symbolicateStackTrace');
          var prettyStack = yield symbolicateStackTrace(stack);
          if (prettyStack) {
            var newStack = prettyStack;
            if (prettyStack.stack) {
              newStack = prettyStack.stack;
            }
            var stackWithoutInternalCallsites = newStack.filter(function (frame) {
              return frame.file && frame.file.match(INTERNAL_CALLSITES_REGEX) === null;
            });
            var symbolicatedFrames = yield this._convertReactNativeFramesToSentryFrames(stackWithoutInternalCallsites);
            this._replaceFramesInEvent(event, symbolicatedFrames);
          } else {
            _utils.logger.error('The stack is null');
          }
        } catch (error) {
          if (error instanceof Error) {
            _utils.logger.warn(`Unable to symbolicate stack trace: ${error.message}`);
          }
        }
      });
    }
  }, {
    key: "_convertReactNativeFramesToSentryFrames",
    value: function _convertReactNativeFramesToSentryFrames(frames) {
      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
        var _this2 = this;
        var getDevServer;
        try {
          getDevServer = require('react-native/Libraries/Core/Devtools/getDevServer');
        } catch (_oO) {}
        return Promise.all(frames.map(function (frame) {
          return (0, _tslib.__awaiter)(_this2, void 0, void 0, function* () {
            var inApp = !!frame.column && !!frame.lineNumber;
            inApp = inApp && frame.file !== undefined && !frame.file.includes('node_modules') && !frame.file.includes('native code');
            var newFrame = {
              colno: frame.column,
              filename: frame.file,
              function: frame.methodName,
              in_app: inApp,
              lineno: inApp ? frame.lineNumber : undefined,
              platform: inApp ? 'javascript' : 'node'
            };
            if (newFrame.function) {
              var addressAtPos = newFrame.function.indexOf('(address at');
              if (addressAtPos >= 0) {
                newFrame.function = newFrame.function.substr(0, addressAtPos).trim();
              }
            }
            if (inApp) {
              yield this._addSourceContext(newFrame, getDevServer);
            }
            return newFrame;
          });
        }));
      });
    }
  }, {
    key: "_replaceFramesInEvent",
    value: function _replaceFramesInEvent(event, frames) {
      if (event.exception && event.exception.values && event.exception.values[0] && event.exception.values[0].stacktrace) {
        event.exception.values[0].stacktrace.frames = frames.reverse();
      }
    }
  }, {
    key: "_addSourceContext",
    value: function _addSourceContext(frame, getDevServer) {
      var _a, _b;
      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
        var response;
        var segments = (_b = (_a = frame.filename) === null || _a === void 0 ? void 0 : _a.split('/')) !== null && _b !== void 0 ? _b : [];
        if (getDevServer) {
          for (var idx in segments) {
            if (Object.prototype.hasOwnProperty.call(segments, idx)) {
              response = yield fetch(`${getDevServer().url}${segments.slice(-idx).join('/')}`, {
                method: 'GET'
              });
              if (response.ok) {
                break;
              }
            }
          }
        }
        if (response && response.ok) {
          var content = yield response.text();
          var lines = content.split('\n');
          (0, _utils.addContextToFrame)(lines, frame);
        }
      });
    }
  }]);
  return DebugSymbolicator;
}();
exports.DebugSymbolicator = DebugSymbolicator;
DebugSymbolicator.id = 'DebugSymbolicator';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,