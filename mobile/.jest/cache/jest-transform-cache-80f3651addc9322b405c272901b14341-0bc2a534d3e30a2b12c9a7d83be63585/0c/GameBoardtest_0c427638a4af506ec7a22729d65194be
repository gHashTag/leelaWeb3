fdbfd481780852d218a002c3b4e8a90d
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
test('should render the correct number of Gem components based on the players prop', function () {
  var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getAllByTestId = _ref.getAllByTestId;
  var gemComponents = getAllByTestId('gem-container');
  var playerGemImages = getAllByTestId('player-gem-image');
  expect(playerGemImages.length).toEqual(2);
  expect(gemComponents.length).toEqual(72);
});
test('should render player avatars', function () {
  var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getByTestId = _ref2.getByTestId;
  players.forEach(function (player) {
    var gemImage = getByTestId(`gem-${player.id}`);
    expect(gemImage).toBeTruthy();
  });
});
test('should render plan numbers for empty spaces', function () {
  var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getByText = _ref3.getByText;
  var emptyPlanNumbers = [68, 69, 70, 71, 72];
  emptyPlanNumbers.forEach(function (planNumber) {
    var gemImage = getByText(planNumber.toString());
    expect(gemImage).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsInRlc3QiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHYW1lQm9hcmQiLCJnZXRBbGxCeVRlc3RJZCIsImdlbUNvbXBvbmVudHMiLCJwbGF5ZXJHZW1JbWFnZXMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0VxdWFsIiwiX3JlZjIiLCJnZXRCeVRlc3RJZCIsImZvckVhY2giLCJwbGF5ZXIiLCJnZW1JbWFnZSIsInRvQmVUcnV0aHkiLCJfcmVmMyIsImdldEJ5VGV4dCIsImVtcHR5UGxhbk51bWJlcnMiLCJwbGFuTnVtYmVyIiwidG9TdHJpbmciXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL0dhbWVCb2FyZC9HYW1lQm9hcmQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJ3R5cGVzJ1xuXG5pbXBvcnQgeyBHYW1lQm9hcmQgfSBmcm9tICcuLi8nXG5cbmNvbnN0IHBsYXllcnM6IFBsYXllcltdID0gW1xuICB7XG4gICAgaWQ6IDIsXG4gICAgcGxhbjogNzIsXG4gICAgYXZhdGFyOiAxMDYsXG4gIH0sXG4gIHtcbiAgICBpZDogNCxcbiAgICBwbGFuOiAzNCxcbiAgICBhdmF0YXI6XG4gICAgICAnaHR0cHM6Ly9iYWZrcmVpZnRybWZtaW1sdm8yNnhheGZ2dDJ5cG5qamFhdnE1bWdua2psanM2bWN6ZmVraWk0Y210cS5pcGZzLm5mdHN0b3JhZ2UubGluay8nLFxuICB9LFxuXVxuXG50ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBjb3JyZWN0IG51bWJlciBvZiBHZW0gY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgcGxheWVycyBwcm9wJywgKCkgPT4ge1xuICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPilcbiAgY29uc3QgZ2VtQ29tcG9uZW50cyA9IGdldEFsbEJ5VGVzdElkKCdnZW0tY29udGFpbmVyJylcbiAgY29uc3QgcGxheWVyR2VtSW1hZ2VzID0gZ2V0QWxsQnlUZXN0SWQoJ3BsYXllci1nZW0taW1hZ2UnKVxuICBleHBlY3QocGxheWVyR2VtSW1hZ2VzLmxlbmd0aCkudG9FcXVhbCgyKSAvLyDQn9GA0L7QstC10YDQutCwINC90LAgMiDQuNCz0YDQvtC60LBcbiAgZXhwZWN0KGdlbUNvbXBvbmVudHMubGVuZ3RoKS50b0VxdWFsKDcyKSAvLyDQn9GA0L7QstC10YDQutCwINC90LAg0L7QsdGJ0LXQtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQutC+0LzQv9C+0L3QtdC90YLQvtCyIEdlbVxufSlcblxudGVzdCgnc2hvdWxkIHJlbmRlciBwbGF5ZXIgYXZhdGFycycsICgpID0+IHtcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG5cbiAgcGxheWVycy5mb3JFYWNoKChwbGF5ZXIpID0+IHtcbiAgICBjb25zdCBnZW1JbWFnZSA9IGdldEJ5VGVzdElkKGBnZW0tJHtwbGF5ZXIuaWR9YClcbiAgICBleHBlY3QoZ2VtSW1hZ2UpLnRvQmVUcnV0aHkoKVxuICB9KVxufSlcblxudGVzdCgnc2hvdWxkIHJlbmRlciBwbGFuIG51bWJlcnMgZm9yIGVtcHR5IHNwYWNlcycsICgpID0+IHtcbiAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuXG4gIGNvbnN0IGVtcHR5UGxhbk51bWJlcnMgPSBbNjgsIDY5LCA3MCwgNzEsIDcyXVxuICBlbXB0eVBsYW5OdW1iZXJzLmZvckVhY2goKHBsYW5OdW1iZXIpID0+IHtcbiAgICBjb25zdCBnZW1JbWFnZSA9IGdldEJ5VGV4dChwbGFuTnVtYmVyLnRvU3RyaW5nKCkpXG4gICAgZXhwZWN0KGdlbUltYWdlKS50b0JlVHJ1dGh5KClcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUdBLElBQUFFLEdBQUEsR0FBQUYsT0FBQTtBQUVBLElBQU1HLE9BQU8sR0FBYSxDQUN4QjtFQUNFQyxFQUFFLEVBQUUsQ0FBQztFQUNMQyxJQUFJLEVBQUUsRUFBRTtFQUNSQyxNQUFNLEVBQUU7Q0FDVCxFQUNEO0VBQ0VGLEVBQUUsRUFBRSxDQUFDO0VBQ0xDLElBQUksRUFBRSxFQUFFO0VBQ1JDLE1BQU0sRUFDSjtDQUNILENBQ0Y7QUFFREMsSUFBSSxDQUFDLDhFQUE4RSxFQUFFLFlBQUs7RUFDeEYsSUFBQUMsSUFBQSxHQUEyQixJQUFBUCxjQUFBLENBQUFRLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1QsR0FBQSxDQUFBVSxTQUFTO01BQUNULE9BQU8sRUFBRUE7SUFBUSxFQUFHLENBQUM7SUFBMURVLGNBQWMsR0FBQUwsSUFBQSxDQUFkSyxjQUFjO0VBQ3RCLElBQU1DLGFBQWEsR0FBR0QsY0FBYyxDQUFDLGVBQWUsQ0FBQztFQUNyRCxJQUFNRSxlQUFlLEdBQUdGLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQztFQUMxREcsTUFBTSxDQUFDRCxlQUFlLENBQUNFLE1BQU0sQ0FBQyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0VBQ3pDRixNQUFNLENBQUNGLGFBQWEsQ0FBQ0csTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxFQUFFLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBRUZYLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxZQUFLO0VBQ3hDLElBQUFZLEtBQUEsR0FBd0IsSUFBQWxCLGNBQUEsQ0FBQVEsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVCxHQUFBLENBQUFVLFNBQVM7TUFBQ1QsT0FBTyxFQUFFQTtJQUFRLEVBQUcsQ0FBQztJQUF2RGlCLFdBQVcsR0FBQUQsS0FBQSxDQUFYQyxXQUFXO0VBRW5CakIsT0FBTyxDQUFDa0IsT0FBTyxDQUFDLFVBQUNDLE1BQU0sRUFBSTtJQUN6QixJQUFNQyxRQUFRLEdBQUdILFdBQVcsQ0FBQyxPQUFPRSxNQUFNLENBQUNsQixFQUFFLEVBQUUsQ0FBQztJQUNoRFksTUFBTSxDQUFDTyxRQUFRLENBQUMsQ0FBQ0MsVUFBVSxFQUFFO0VBQy9CLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGakIsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLFlBQUs7RUFDdkQsSUFBQWtCLEtBQUEsR0FBc0IsSUFBQXhCLGNBQUEsQ0FBQVEsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVCxHQUFBLENBQUFVLFNBQVM7TUFBQ1QsT0FBTyxFQUFFQTtJQUFRLEVBQUcsQ0FBQztJQUFyRHVCLFNBQVMsR0FBQUQsS0FBQSxDQUFUQyxTQUFTO0VBRWpCLElBQU1DLGdCQUFnQixHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztFQUM3Q0EsZ0JBQWdCLENBQUNOLE9BQU8sQ0FBQyxVQUFDTyxVQUFVLEVBQUk7SUFDdEMsSUFBTUwsUUFBUSxHQUFHRyxTQUFTLENBQUNFLFVBQVUsQ0FBQ0MsUUFBUSxFQUFFLENBQUM7SUFDakRiLE1BQU0sQ0FBQ08sUUFBUSxDQUFDLENBQUNDLFVBQVUsRUFBRTtFQUMvQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==