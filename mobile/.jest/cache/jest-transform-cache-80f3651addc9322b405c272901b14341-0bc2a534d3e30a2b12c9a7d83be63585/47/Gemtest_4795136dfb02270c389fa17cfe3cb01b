722dd86388d5106e18b4f74a668fde24
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var images_1 = require("./images");
describe('Gem Component', function () {
  test('should render the correct image based on playerNumber prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        playerNumber: 3,
        onPress: function onPress() {}
      })),
      getByTestId = _ref.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(gemImage.props.source).toEqual(images_1.ICONS[2]);
  });
  test('should render the default image if playerNumber prop is invalid', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        playerNumber: 10,
        onPress: function onPress() {}
      })),
      getByTestId = _ref2.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(gemImage.props.source).toEqual(images_1.ICONS[0]);
  });
  test('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        playerNumber: 5,
        onPress: onPressMock
      })),
      getByTestId = _ref3.getByTestId;
    var gemContainer = getByTestId('gem-container');
    react_native_1.fireEvent.press(gemContainer);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwiaW1hZ2VzXzEiLCJkZXNjcmliZSIsInRlc3QiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHZW0iLCJwbGF5ZXJOdW1iZXIiLCJvblByZXNzIiwiZ2V0QnlUZXN0SWQiLCJnZW1JbWFnZSIsImV4cGVjdCIsInByb3BzIiwic291cmNlIiwidG9FcXVhbCIsIklDT05TIiwiX3JlZjIiLCJvblByZXNzTW9jayIsImplc3QiLCJmbiIsIl9yZWYzIiwiZ2VtQ29udGFpbmVyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9HZW0vR2VtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHtHZW19IGZyb20gJy4uLydcbmltcG9ydCB7SUNPTlN9IGZyb20gJy4vaW1hZ2VzJ1xuXG5kZXNjcmliZSgnR2VtIENvbXBvbmVudCcsICgpID0+IHtcbiAgdGVzdCgnc2hvdWxkIHJlbmRlciB0aGUgY29ycmVjdCBpbWFnZSBiYXNlZCBvbiBwbGF5ZXJOdW1iZXIgcHJvcCcsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxHZW0gcGxheWVyTnVtYmVyPXszfSBvblByZXNzPXsoKSA9PiB7fX0gLz4pXG4gICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRlc3RJZCgnZ2VtLWltYWdlJylcbiAgICBleHBlY3QoZ2VtSW1hZ2UucHJvcHMuc291cmNlKS50b0VxdWFsKElDT05TWzJdKSAvLyBDaGVjayB0aGUgY29ycmVjdCBpbWFnZSBiYXNlZCBvbiBwbGF5ZXJOdW1iZXIgcHJvcFxuICB9KVxuXG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGRlZmF1bHQgaW1hZ2UgaWYgcGxheWVyTnVtYmVyIHByb3AgaXMgaW52YWxpZCcsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxHZW0gcGxheWVyTnVtYmVyPXsxMH0gb25QcmVzcz17KCkgPT4ge319IC8+KVxuICAgIGNvbnN0IGdlbUltYWdlID0gZ2V0QnlUZXN0SWQoJ2dlbS1pbWFnZScpXG4gICAgZXhwZWN0KGdlbUltYWdlLnByb3BzLnNvdXJjZSkudG9FcXVhbChJQ09OU1swXSkgLy8gQ2hlY2sgdGhlIGRlZmF1bHQgaW1hZ2UgaWYgcGxheWVyTnVtYmVyIGlzIGludmFsaWRcbiAgfSlcblxuICB0ZXN0KCdzaG91bGQgY2FsbCB0aGUgb25QcmVzcyBmdW5jdGlvbiB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKClcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxHZW0gcGxheWVyTnVtYmVyPXs1fSBvblByZXNzPXtvblByZXNzTW9ja30gLz4pXG4gICAgY29uc3QgZ2VtQ29udGFpbmVyID0gZ2V0QnlUZXN0SWQoJ2dlbS1jb250YWluZXInKVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZW1Db250YWluZXIpXG4gICAgZXhwZWN0KG9uUHJlc3NNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLEdBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUgsT0FBQTtBQUVBSSxRQUFRLENBQUMsZUFBZSxFQUFFLFlBQUs7RUFDN0JDLElBQUksQ0FBQyw0REFBNEQsRUFBRSxZQUFLO0lBQ3RFLElBQUFDLElBQUEsR0FBc0IsSUFBQUwsY0FBQSxDQUFBTSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNQLEdBQUEsQ0FBQVEsR0FBRztRQUFDQyxZQUFZLEVBQUUsQ0FBRTtRQUFDQyxPQUFPLEVBQUUsU0FBQUEsUUFBQSxFQUFLLENBQUU7TUFBRSxFQUFHLENBQUM7TUFBbEVDLFdBQVcsR0FBQVAsSUFBQSxDQUFYTyxXQUFXO0lBQ2xCLElBQU1DLFFBQVEsR0FBR0QsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUN6Q0UsTUFBTSxDQUFDRCxRQUFRLENBQUNFLEtBQUssQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQ2YsUUFBQSxDQUFBZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2pELENBQUMsQ0FBQztFQUVGZCxJQUFJLENBQUMsaUVBQWlFLEVBQUUsWUFBSztJQUMzRSxJQUFBZSxLQUFBLEdBQXNCLElBQUFuQixjQUFBLENBQUFNLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1AsR0FBQSxDQUFBUSxHQUFHO1FBQUNDLFlBQVksRUFBRSxFQUFHO1FBQUNDLE9BQU8sRUFBRSxTQUFBQSxRQUFBLEVBQUssQ0FBRTtNQUFFLEVBQUcsQ0FBQztNQUFuRUMsV0FBVyxHQUFBTyxLQUFBLENBQVhQLFdBQVc7SUFDbEIsSUFBTUMsUUFBUSxHQUFHRCxXQUFXLENBQUMsV0FBVyxDQUFDO0lBQ3pDRSxNQUFNLENBQUNELFFBQVEsQ0FBQ0UsS0FBSyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDZixRQUFBLENBQUFnQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDO0VBRUZkLElBQUksQ0FBQywrQ0FBK0MsRUFBRSxZQUFLO0lBQ3pELElBQU1nQixXQUFXLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQzdCLElBQUFDLEtBQUEsR0FBc0IsSUFBQXZCLGNBQUEsQ0FBQU0sTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUCxHQUFBLENBQUFRLEdBQUc7UUFBQ0MsWUFBWSxFQUFFLENBQUU7UUFBQ0MsT0FBTyxFQUFFUztNQUFZLEVBQUcsQ0FBQztNQUFyRVIsV0FBVyxHQUFBVyxLQUFBLENBQVhYLFdBQVc7SUFDbEIsSUFBTVksWUFBWSxHQUFHWixXQUFXLENBQUMsZUFBZSxDQUFDO0lBQ2pEWixjQUFBLENBQUF5QixTQUFTLENBQUNDLEtBQUssQ0FBQ0YsWUFBWSxDQUFDO0lBQzdCVixNQUFNLENBQUNNLFdBQVcsQ0FBQyxDQUFDTyxnQkFBZ0IsRUFBRTtFQUN4QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==