8dd08dc72fed1dfb009fde359d8b8e67
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock("./Animated", function () {
  return Object.assign({}, jest.requireActual("./Animated"), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var Dice_1 = require("./Dice");
describe('Dice Component', function () {
  var mockProps;
  beforeEach(function () {
    mockProps = {
      lastRoll: 1,
      disabled: false,
      rollDice: jest.fn()
    };
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Dice_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the rollDice function on press when not disabled', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Dice_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.rollDice).toHaveBeenCalledTimes(1);
  });
  it('does not call the rollDice function on press when disabled', function () {
    mockProps.disabled = true;
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Dice_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref3.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.rollDice).not.toHaveBeenCalled();
  });
  it('updates dice image when rollDice function is called', function () {
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Dice_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref4.getByTestId,
      rerender = _ref4.rerender;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    var newDiceRoll = 2;
    rerender((0, _jsxRuntime.jsx)(Dice_1.Dice, Object.assign({}, mockProps, {
      lastRoll: newDiceRoll
    })));
    var diceImage = getByTestId('dice-image');
    expect(diceImage.props.source).toEqual(require(`./assets/${newDiceRoll}.png`));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIkRpY2VfMSIsImRlc2NyaWJlIiwibW9ja1Byb3BzIiwiYmVmb3JlRWFjaCIsImxhc3RSb2xsIiwiZGlzYWJsZWQiLCJyb2xsRGljZSIsImZuIiwidXNlRmFrZVRpbWVycyIsImFmdGVyRWFjaCIsInVzZVJlYWxUaW1lcnMiLCJpdCIsIl9yZWYiLCJyZW5kZXIiLCJqc3giLCJEaWNlIiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsIl9yZWYyIiwiYWN0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJydW5BbGxUaW1lcnMiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVmMyIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVmNCIsInJlcmVuZGVyIiwibmV3RGljZVJvbGwiLCJkaWNlSW1hZ2UiLCJwcm9wcyIsInNvdXJjZSIsInRvRXF1YWwiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL0RpY2UvRGljZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcblxuaW1wb3J0IHsgRGljZSwgRGljZVByb3BzIH0gZnJvbSAnLi9EaWNlJ1xuXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKVxuamVzdC5tb2NrKCcuL0FuaW1hdGVkJywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnLi9BbmltYXRlZCcpLFxuICAgIGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50OiAoY29tcG9uZW50OiBhbnkpID0+IHtcbiAgICAgIHJldHVybiBjb21wb25lbnRcbiAgICB9LFxuICB9XG59KVxuXG5kZXNjcmliZSgnRGljZSBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBtb2NrUHJvcHM6IERpY2VQcm9wc1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrUHJvcHMgPSB7XG4gICAgICBsYXN0Um9sbDogMSxcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgIHJvbGxEaWNlOiBqZXN0LmZuKCksXG4gICAgfVxuICAgIGplc3QudXNlRmFrZVRpbWVycygpXG4gIH0pXG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKVxuICB9KVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIHRoZSBwcm92aWRlZCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gLz4pXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKS50b0JlRGVmaW5lZCgpXG4gIH0pXG5cbiAgaXQoJ2NhbGxzIHRoZSByb2xsRGljZSBmdW5jdGlvbiBvbiBwcmVzcyB3aGVuIG5vdCBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gLz4pXG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKVxuICAgIH0pXG5cbiAgICBleHBlY3QobW9ja1Byb3BzLnJvbGxEaWNlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgfSlcblxuICBpdCgnZG9lcyBub3QgY2FsbCB0aGUgcm9sbERpY2UgZnVuY3Rpb24gb24gcHJlc3Mgd2hlbiBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBtb2NrUHJvcHMuZGlzYWJsZWQgPSB0cnVlXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKClcbiAgICB9KVxuXG4gICAgZXhwZWN0KG1vY2tQcm9wcy5yb2xsRGljZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuICB9KVxuXG4gIGl0KCd1cGRhdGVzIGRpY2UgaW1hZ2Ugd2hlbiByb2xsRGljZSBmdW5jdGlvbiBpcyBjYWxsZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgcmVyZW5kZXIgfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpXG4gICAgfSlcblxuICAgIC8vIE1vY2sgYSBuZXcgZGljZSByb2xsIHZhbHVlXG4gICAgY29uc3QgbmV3RGljZVJvbGwgPSAyXG4gICAgcmVyZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gbGFzdFJvbGw9e25ld0RpY2VSb2xsfSAvPilcblxuICAgIGNvbnN0IGRpY2VJbWFnZSA9IGdldEJ5VGVzdElkKCdkaWNlLWltYWdlJykgLy8gQXNzdW1pbmcgeW91IGhhdmUgdGVzdElEIG9uIEFuaW1hdGVkLkltYWdlXG4gICAgZXhwZWN0KGRpY2VJbWFnZS5wcm9wcy5zb3VyY2UpLnRvRXF1YWwoXG4gICAgICByZXF1aXJlKGAuL2Fzc2V0cy8ke25ld0RpY2VSb2xsfS5wbmdgKSxcbiAgICApXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOztBQU1BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzREFBc0QsQ0FBQztBQUNqRUQsV0FBQSxHQUFLQyxJQUFJLGVBQWUsWUFBSztFQUMzQixPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDS0MsSUFBSSxDQUFDQyxhQUFhLGFBQWEsQ0FBQztJQUNuQ0MsdUJBQXVCLEVBQUUsU0FBQUEsd0JBQUNDLFNBQWMsRUFBSTtNQUMxQyxPQUFPQSxTQUFTO0lBQ2xCO0VBQUM7QUFFTCxDQUFDLENBQUM7QUFBQSxJQUFBQyxXQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxLQUFBO0VBQUFDLFlBQUE7QUFBQSxTQUFBWCxZQUFBO0VBQUEsSUFBQVksUUFBQSxHQUFBSCxPQUFBO0lBQUFMLElBQUEsR0FBQVEsUUFBQSxDQUFBUixJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTs7Ozs7Ozs7O0FBZEYsSUFBQVMsT0FBQSxHQUFBQyxlQUFBLENBQUFMLE9BQUE7QUFFQSxJQUFBTSxjQUFBLEdBQUFOLE9BQUE7QUFFQSxJQUFBTyxNQUFBLEdBQUFQLE9BQUE7QUFZQVEsUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQUs7RUFDOUIsSUFBSUMsU0FBb0I7RUFDeEJDLFVBQVUsQ0FBQyxZQUFLO0lBQ2RELFNBQVMsR0FBRztNQUNWRSxRQUFRLEVBQUUsQ0FBQztNQUNYQyxRQUFRLEVBQUUsS0FBSztNQUNmQyxRQUFRLEVBQUVsQixJQUFJLENBQUNtQixFQUFFO0tBQ2xCO0lBQ0RuQixJQUFJLENBQUNvQixhQUFhLEVBQUU7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLFNBQVMsQ0FBQyxZQUFLO0lBQ2JyQixJQUFJLENBQUNzQixhQUFhLEVBQUU7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLEVBQUUs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