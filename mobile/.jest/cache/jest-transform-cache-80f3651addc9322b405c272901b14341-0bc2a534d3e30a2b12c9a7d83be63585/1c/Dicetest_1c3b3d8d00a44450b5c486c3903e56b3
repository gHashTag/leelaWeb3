b2594759f0ff67b8b51bbd7f878b5c57
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock("./Animated", function () {
  return Object.assign({}, jest.requireActual("./Animated"), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var Dice_1 = require("./Dice");
describe('Dice Component', function () {
  var mockProps;
  beforeEach(function () {
    mockProps = {
      lastRoll: 1,
      disabled: false,
      rollDice: jest.fn()
    };
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Dice_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the rollDice function on press when not disabled', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Dice_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.rollDice).toHaveBeenCalledTimes(1);
  });
  it('does not call the rollDice function on press when disabled', function () {
    mockProps.disabled = true;
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Dice_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref3.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.rollDice).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIkRpY2VfMSIsImRlc2NyaWJlIiwibW9ja1Byb3BzIiwiYmVmb3JlRWFjaCIsImxhc3RSb2xsIiwiZGlzYWJsZWQiLCJyb2xsRGljZSIsImZuIiwidXNlRmFrZVRpbWVycyIsImFmdGVyRWFjaCIsInVzZVJlYWxUaW1lcnMiLCJpdCIsIl9yZWYiLCJyZW5kZXIiLCJqc3giLCJEaWNlIiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsIl9yZWYyIiwiYWN0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJydW5BbGxUaW1lcnMiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVmMyIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL0RpY2UvRGljZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcblxuaW1wb3J0IHsgRGljZSwgRGljZVByb3BzIH0gZnJvbSAnLi9EaWNlJ1xuXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKVxuamVzdC5tb2NrKCcuL0FuaW1hdGVkJywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnLi9BbmltYXRlZCcpLFxuICAgIGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50OiAoY29tcG9uZW50OiBhbnkpID0+IHtcbiAgICAgIHJldHVybiBjb21wb25lbnRcbiAgICB9LFxuICB9XG59KVxuXG5kZXNjcmliZSgnRGljZSBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBtb2NrUHJvcHM6IERpY2VQcm9wc1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrUHJvcHMgPSB7XG4gICAgICBsYXN0Um9sbDogMSxcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgIHJvbGxEaWNlOiBqZXN0LmZuKCksXG4gICAgfVxuICAgIGplc3QudXNlRmFrZVRpbWVycygpXG4gIH0pXG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKVxuICB9KVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIHRoZSBwcm92aWRlZCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gLz4pXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKS50b0JlRGVmaW5lZCgpXG4gIH0pXG5cbiAgaXQoJ2NhbGxzIHRoZSByb2xsRGljZSBmdW5jdGlvbiBvbiBwcmVzcyB3aGVuIG5vdCBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gLz4pXG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKVxuICAgIH0pXG5cbiAgICBleHBlY3QobW9ja1Byb3BzLnJvbGxEaWNlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgfSlcblxuICBpdCgnZG9lcyBub3QgY2FsbCB0aGUgcm9sbERpY2UgZnVuY3Rpb24gb24gcHJlc3Mgd2hlbiBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBtb2NrUHJvcHMuZGlzYWJsZWQgPSB0cnVlXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKClcbiAgICB9KVxuXG4gICAgZXhwZWN0KG1vY2tQcm9wcy5yb2xsRGljZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7QUFNQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsc0RBQXNELENBQUM7QUFDakVELFdBQUEsR0FBS0MsSUFBSSxlQUFlLFlBQUs7RUFDM0IsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tDLElBQUksQ0FBQ0MsYUFBYSxhQUFhLENBQUM7SUFDbkNDLHVCQUF1QixFQUFFLFNBQUFBLHdCQUFDQyxTQUFjLEVBQUk7TUFDMUMsT0FBT0EsU0FBUztJQUNsQjtFQUFDO0FBRUwsQ0FBQyxDQUFDO0FBQUEsSUFBQUMsV0FBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsS0FBQTtFQUFBQyxZQUFBO0FBQUEsU0FBQVgsWUFBQTtFQUFBLElBQUFZLFFBQUEsR0FBQUgsT0FBQTtJQUFBTCxJQUFBLEdBQUFRLFFBQUEsQ0FBQVIsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7Ozs7Ozs7OztBQWRGLElBQUFTLE9BQUEsR0FBQUMsZUFBQSxDQUFBTCxPQUFBO0FBRUEsSUFBQU0sY0FBQSxHQUFBTixPQUFBO0FBRUEsSUFBQU8sTUFBQSxHQUFBUCxPQUFBO0FBWUFRLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFLO0VBQzlCLElBQUlDLFNBQW9CO0VBQ3hCQyxVQUFVLENBQUMsWUFBSztJQUNkRCxTQUFTLEdBQUc7TUFDVkUsUUFBUSxFQUFFLENBQUM7TUFDWEMsUUFBUSxFQUFFLEtBQUs7TUFDZkMsUUFBUSxFQUFFbEIsSUFBSSxDQUFDbUIsRUFBRTtLQUNsQjtJQUNEbkIsSUFBSSxDQUFDb0IsYUFBYSxFQUFFO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxTQUFTLENBQUMsWUFBSztJQUNickIsSUFBSSxDQUFDc0IsYUFBYSxFQUFFO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxFQUFFLENBQUMsMkNBQTJDLEVBQUUsWUFBSztJQUNuRCxJQUFBQyxJQUFBLEdBQXdCLElBQUFiLGNBQUEsQ0FBQWMsTUFBTSxFQUFDLElBQUFyQixXQUFBLENBQUFzQixHQUFBLEVBQUNkLE1BQUEsQ0FBQWUsSUFBSSxFQUFBN0IsTUFBQSxDQUFBQyxNQUFBLEtBQUtlLFNBQVMsQ0FBQyxDQUFHLENBQUM7TUFBL0NjLFdBQVcsR0FBQUosSUFBQSxDQUFYSSxXQUFXO0lBQ25CQyxNQUFNLENBQUNELFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUNFLFdBQVcsRUFBRTtFQUNyRCxDQUFDLENBQUM7RUFFRlAsRUFBRSxDQUFDLHdEQUF3RCxFQUFFLFlBQUs7SUFDaEUsSUFBQVEsS0FBQSxHQUF3QixJQUFBcEIsY0FBQSxDQUFBYyxNQUFNLEVBQUMsSUFBQXJCLFdBQUEsQ0FBQXNCLEdBQUEsRUFBQ2QsTUFBQSxDQUFBZSxJQUFJLEVBQUE3QixNQUFBLENBQUFDLE1BQUEsS0FBS2UsU0FBUyxDQUFDLENBQUcsQ0FBQztNQUEvQ2MsV0FBVyxHQUFBRyxLQUFBLENBQVhILFdBQVc7SUFFbkIsSUFBQWpCLGNBQUEsQ0FBQXFCLEdBQUcsRUFBQyxZQUFLO01BQ1ByQixjQUFBLENBQUFzQixTQUFTLENBQUNDLEtBQUssQ0FBQ04sV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7TUFDOUM1QixJQUFJLENBQUNtQyxZQUFZLEVBQUU7SUFDckIsQ0FBQyxDQUFDO0lBRUZOLE1BQU0sQ0FBQ2YsU0FBUyxDQUFDSSxRQUFRLENBQUMsQ0FBQ2tCLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUNyRCxDQUFDLENBQUM7RUFFRmIsRUFBRSxDQUFDLDREQUE0RCxFQUFFLFlBQUs7SUFDcEVULFNBQVMsQ0FBQ0csUUFBUSxHQUFHLElBQUk7SUFDekIsSUFBQW9CLEtBQUEsR0FBd0IsSUFBQTFCLGNBQUEsQ0FBQWMsTUFBTSxFQUFDLElBQUFyQixXQUFBLENBQUFzQixHQUFBLEVBQUNkLE1BQUEsQ0FBQWUsSUFBSSxFQUFBN0IsTUFBQSxDQUFBQyxNQUFBLEtBQUtlLFNBQVMsQ0FBQyxDQUFHLENBQUM7TUFBL0NjLFdBQVcsR0FBQVMsS0FBQSxDQUFYVCxXQUFXO0lBRW5CLElBQUFqQixjQUFBLENBQUFxQixHQUFHLEVBQUMsWUFBSztNQUNQckIsY0FBQSxDQUFBc0IsU0FBUyxDQUFDQyxLQUFLLENBQUNOLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO01BQzlDNUIsSUFBSSxDQUFDbUMsWUFBWSxFQUFFO0lBQ3JCLENBQUMsQ0FBQztJQUVGTixNQUFNLENBQUNmLFNBQVMsQ0FBQ0ksUUFBUSxDQUFDLENBQUNvQixHQUFHLENBQUNDLGdCQUFnQixFQUFFO0VBQ25ELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9