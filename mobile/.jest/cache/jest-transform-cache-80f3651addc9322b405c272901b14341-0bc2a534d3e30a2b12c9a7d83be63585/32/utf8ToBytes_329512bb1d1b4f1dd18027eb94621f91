b50fbee1256262927b159ce3f56f57da
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utf8ToBytes = utf8ToBytes;
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);
    if (codePoint > 0xd7ff && codePoint < 0xe000) {
      if (!leadSurrogate) {
        if (codePoint > 0xdbff) {
          if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
          continue;
        } else if (i + 1 === length) {
          if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
          continue;
        }
        leadSurrogate = codePoint;
        continue;
      }
      if (codePoint < 0xdc00) {
        if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
        leadSurrogate = codePoint;
        continue;
      }
      codePoint = (leadSurrogate - 0xd800 << 10 | codePoint - 0xdc00) + 0x10000;
    } else if (leadSurrogate) {
      if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
    }
    leadSurrogate = null;
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xc0, codePoint & 0x3f | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xc | 0xe0, codePoint >> 0x6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xf0, codePoint >> 0xc & 0x3f | 0x80, codePoint >> 0x6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }
  return bytes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGY4VG9CeXRlcyIsInN0cmluZyIsInVuaXRzIiwiSW5maW5pdHkiLCJjb2RlUG9pbnQiLCJsZW5ndGgiLCJsZWFkU3Vycm9nYXRlIiwiYnl0ZXMiLCJpIiwiY2hhckNvZGVBdCIsInB1c2giLCJFcnJvciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9qcy92ZW5kb3IvYnVmZmVyL3V0ZjhUb0J5dGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9ibG9iLzc5NWJiYjViZGExYjM5ZjEzNzBlYmQ3ODRiZWE2MTA3YjA4N2UzYTcvaW5kZXguanMjTDE5NTZcblxuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbi8vIENvcHlyaWdodCAoYykgRmVyb3NzIEFib3VraGFkaWplaCwgYW5kIG90aGVyIGNvbnRyaWJ1dG9ycy5cblxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gYSBieXRlIGFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1dGY4VG9CeXRlcyhzdHJpbmc6IHN0cmluZywgdW5pdHM/OiBudW1iZXIpOiBudW1iZXJbXSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHk7XG4gIGxldCBjb2RlUG9pbnQ7XG4gIGNvbnN0IGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIGxldCBsZWFkU3Vycm9nYXRlID0gbnVsbDtcbiAgY29uc3QgYnl0ZXM6IG51bWJlcltdID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweGQ3ZmYgJiYgY29kZVBvaW50IDwgMHhlMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweGRiZmYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4ZWYsIDB4YmYsIDB4YmQpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4ZWYsIDB4YmYsIDB4YmQpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50O1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhkYzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweGVmLCAweGJmLCAweGJkKTtcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAoKChsZWFkU3Vycm9nYXRlIC0gMHhkODAwKSA8PCAxMCkgfCAoY29kZVBvaW50IC0gMHhkYzAwKSkgKyAweDEwMDAwO1xuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4ZWYsIDB4YmYsIDB4YmQpO1xuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsO1xuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrO1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpO1xuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVhaztcbiAgICAgIGJ5dGVzLnB1c2goKGNvZGVQb2ludCA+PiAweDYpIHwgMHhjMCwgKGNvZGVQb2ludCAmIDB4M2YpIHwgMHg4MCk7XG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWs7XG4gICAgICBieXRlcy5wdXNoKChjb2RlUG9pbnQgPj4gMHhjKSB8IDB4ZTAsICgoY29kZVBvaW50ID4+IDB4NikgJiAweDNmKSB8IDB4ODAsIChjb2RlUG9pbnQgJiAweDNmKSB8IDB4ODApO1xuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVhaztcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIChjb2RlUG9pbnQgPj4gMHgxMikgfCAweGYwLFxuICAgICAgICAoKGNvZGVQb2ludCA+PiAweGMpICYgMHgzZikgfCAweDgwLFxuICAgICAgICAoKGNvZGVQb2ludCA+PiAweDYpICYgMHgzZikgfCAweDgwLFxuICAgICAgICAoY29kZVBvaW50ICYgMHgzZikgfCAweDgwLFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXM7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUE2Qk0sU0FBVUEsV0FBV0EsQ0FBQ0MsTUFBYyxFQUFFQyxLQUFjO0VBQ3hEQSxLQUFLLEdBQUdBLEtBQUssSUFBSUMsUUFBUTtFQUN6QixJQUFJQyxTQUFTO0VBQ2IsSUFBTUMsTUFBTSxHQUFHSixNQUFNLENBQUNJLE1BQU07RUFDNUIsSUFBSUMsYUFBYSxHQUFHLElBQUk7RUFDeEIsSUFBTUMsS0FBSyxHQUFhLEVBQUU7RUFFMUIsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdILE1BQU0sRUFBRSxFQUFFRyxDQUFDLEVBQUU7SUFDL0JKLFNBQVMsR0FBR0gsTUFBTSxDQUFDUSxVQUFVLENBQUNELENBQUMsQ0FBQztJQUdoQyxJQUFJSixTQUFTLEdBQUcsTUFBTSxJQUFJQSxTQUFTLEdBQUcsTUFBTSxFQUFFO01BRTVDLElBQUksQ0FBQ0UsYUFBYSxFQUFFO1FBRWxCLElBQUlGLFNBQVMsR0FBRyxNQUFNLEVBQUU7VUFFdEIsSUFBSSxDQUFDRixLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFSyxLQUFLLENBQUNHLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztVQUNuRDtTQUNELE1BQU0sSUFBSUYsQ0FBQyxHQUFHLENBQUMsS0FBS0gsTUFBTSxFQUFFO1VBRTNCLElBQUksQ0FBQ0gsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRUssS0FBSyxDQUFDRyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7VUFDbkQ7O1FBSUZKLGFBQWEsR0FBR0YsU0FBUztRQUV6Qjs7TUFJRixJQUFJQSxTQUFTLEdBQUcsTUFBTSxFQUFFO1FBQ3RCLElBQUksQ0FBQ0YsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRUssS0FBSyxDQUFDRyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7UUFDbkRKLGFBQWEsR0FBR0YsU0FBUztRQUN6Qjs7TUFJRkEsU0FBUyxHQUFHLENBQUdFLGFBQWEsR0FBRyxNQUFNLElBQUssRUFBRSxHQUFLRixTQUFTLEdBQUcsTUFBTyxJQUFJLE9BQU87S0FDaEYsTUFBTSxJQUFJRSxhQUFhLEVBQUU7TUFFeEIsSUFBSSxDQUFDSixLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFSyxLQUFLLENBQUNHLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQzs7SUFHckRKLGFBQWEsR0FBRyxJQUFJO0lBR3BCLElBQUlGLFNBQVMsR0FBRyxJQUFJLEVBQUU7TUFDcEIsSUFBSSxDQUFDRixLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUN0QkssS0FBSyxDQUFDRyxJQUFJLENBQUNOLFNBQVMsQ0FBQztLQUN0QixNQUFNLElBQUlBLFNBQVMsR0FBRyxLQUFLLEVBQUU7TUFDNUIsSUFBSSxDQUFDRixLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUN0QkssS0FBSyxDQUFDRyxJQUFJLENBQUVOLFNBQVMsSUFBSSxHQUFHLEdBQUksSUFBSSxFQUFHQSxTQUFTLEdBQUcsSUFBSSxHQUFJLElBQUksQ0FBQztLQUNqRSxNQUFNLElBQUlBLFNBQVMsR0FBRyxPQUFPLEVBQUU7TUFDOUIsSUFBSSxDQUFDRixLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUN0QkssS0FBSyxDQUFDRyxJQUFJLENBQUVOLFNBQVMsSUFBSSxHQUFHLEdBQUksSUFBSSxFQUFJQSxTQUFTLElBQUksR0FBRyxHQUFJLElBQUksR0FBSSxJQUFJLEVBQUdBLFNBQVMsR0FBRyxJQUFJLEdBQUksSUFBSSxDQUFDO0tBQ3JHLE1BQU0sSUFBSUEsU0FBUyxHQUFHLFFBQVEsRUFBRTtNQUMvQixJQUFJLENBQUNGLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO01BQ3RCSyxLQUFLLENBQUNHLElBQUksQ0FDUE4sU0FBUyxJQUFJLElBQUksR0FBSSxJQUFJLEVBQ3hCQSxTQUFTLElBQUksR0FBRyxHQUFJLElBQUksR0FBSSxJQUFJLEVBQ2hDQSxTQUFTLElBQUksR0FBRyxHQUFJLElBQUksR0FBSSxJQUFJLEVBQ2pDQSxTQUFTLEdBQUcsSUFBSSxHQUFJLElBQUksQ0FDMUI7S0FDRixNQUFNO01BQ0wsTUFBTSxJQUFJTyxLQUFLLENBQUMsb0JBQW9CLENBQUM7OztFQUl6QyxPQUFPSixLQUFLO0FBQ2QifQ==