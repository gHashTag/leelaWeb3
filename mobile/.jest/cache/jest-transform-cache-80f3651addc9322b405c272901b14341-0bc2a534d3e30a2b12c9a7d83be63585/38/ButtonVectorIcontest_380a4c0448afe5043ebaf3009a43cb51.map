{"version":3,"names":["react_1","__importDefault","require","react_native_1","ButtonVectorIcon_1","describe","it","onPressMock","jest","fn","_ref","render","_jsxRuntime","jsx","ButtonVectorIcon","name","onPress","testID","getByTestId","buttonVectorIcon","fireEvent","press","expect","toHaveBeenCalledTimes","iconName","_ref2","renderedIcon","toBeTruthy","count","_ref3","getByText","renderedCount","toString"],"sources":["/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonVectorIcon/ButtonVectorIcon.test.tsx"],"sourcesContent":["import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { ButtonVectorIcon } from './ButtonVectorIcon'\n\ndescribe('ButtonVectorIcon Component', () => {\n  it('calls onPress callback when pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(\n      <ButtonVectorIcon\n        name=\"icon-name\"\n        onPress={onPressMock}\n        testID=\"button-vector-icon\"\n      />,\n    )\n\n    const buttonVectorIcon = getByTestId('button-vector-icon')\n\n    // Simulate button press\n    fireEvent.press(buttonVectorIcon)\n\n    // Check if the onPress callback was called\n    expect(onPressMock).toHaveBeenCalledTimes(1)\n  })\n\n  it('renders correct icon', () => {\n    const iconName = 'volume-up'\n    const { getByTestId } = render(\n      <ButtonVectorIcon\n        name={iconName}\n        onPress={() => {}}\n        testID=\"button-vector-icon\"\n      />,\n    )\n\n    const renderedIcon = getByTestId('button-vector-icon')\n\n    // Check if the correct icon is rendered\n    expect(renderedIcon).toBeTruthy()\n    // You might also want to check for the specific icon library used (FontAwesome, Ionicons, etc.)\n    // For example, if FontAwesome is used:\n    // expect(renderedIcon.getByType(Icon).props.name).toBe(iconName);\n    // If Ionicons is used:\n    // expect(renderedIcon.getByType(Ionicons).props.name).toBe(iconName);\n  })\n\n  it('renders count correctly', () => {\n    const count = 10\n    const { getByTestId, getByText } = render(\n      <ButtonVectorIcon\n        name=\"volume-up\"\n        onPress={() => {}}\n        count={count}\n        testID=\"button-vector-icon\"\n      />,\n    )\n\n    const renderedIcon = getByTestId('button-vector-icon')\n    const renderedCount = getByText(count.toString())\n\n    // Check if the count is rendered correctly\n    expect(renderedIcon).toBeTruthy()\n    expect(renderedCount).toBeTruthy()\n  })\n})\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AAEA,IAAAE,kBAAA,GAAAF,OAAA;AAEAG,QAAQ,CAAC,4BAA4B,EAAE,YAAK;EAC1CC,EAAE,CAAC,qCAAqC,EAAE,YAAK;IAC7C,IAAMC,WAAW,GAAGC,IAAI,CAACC,EAAE,EAAE;IAC7B,IAAAC,IAAA,GAAwB,IAAAP,cAAA,CAAAQ,MAAM,EAC5B,IAAAC,WAAA,CAAAC,GAAA,EAACT,kBAAA,CAAAU,gBAAgB;QACfC,IAAI,EAAC,WAAW;QAChBC,OAAO,EAAET,WAAY;QACrBU,MAAM,EAAC;MAAoB,EAC3B,CACH;MANOC,WAAW,GAAAR,IAAA,CAAXQ,WAAW;IAQnB,IAAMC,gBAAgB,GAAGD,WAAW,CAAC,oBAAoB,CAAC;IAG1Df,cAAA,CAAAiB,SAAS,CAACC,KAAK,CAACF,gBAAgB,CAAC;IAGjCG,MAAM,CAACf,WAAW,CAAC,CAACgB,qBAAqB,CAAC,CAAC,CAAC;EAC9C,CAAC,CAAC;EAEFjB,EAAE,CAAC,sBAAsB,EAAE,YAAK;IAC9B,IAAMkB,QAAQ,GAAG,WAAW;IAC5B,IAAAC,KAAA,GAAwB,IAAAtB,cAAA,CAAAQ,MAAM,EAC5B,IAAAC,WAAA,CAAAC,GAAA,EAACT,kBAAA,CAAAU,gBAAgB;QACfC,IAAI,EAAES,QAAS;QACfR,OAAO,EAAE,SAAAA,QAAA,EAAK,CAAE,CAAE;QAClBC,MAAM,EAAC;MAAoB,EAC3B,CACH;MANOC,WAAW,GAAAO,KAAA,CAAXP,WAAW;IAQnB,IAAMQ,YAAY,GAAGR,WAAW,CAAC,oBAAoB,CAAC;IAGtDI,MAAM,CAACI,YAAY,CAAC,CAACC,UAAU,EAAE;EAMnC,CAAC,CAAC;EAEFrB,EAAE,CAAC,yBAAyB,EAAE,YAAK;IACjC,IAAMsB,KAAK,GAAG,EAAE;IAChB,IAAAC,KAAA,GAAmC,IAAA1B,cAAA,CAAAQ,MAAM,EACvC,IAAAC,WAAA,CAAAC,GAAA,EAACT,kBAAA,CAAAU,gBAAgB;QACfC,IAAI,EAAC,WAAW;QAChBC,OAAO,EAAE,SAAAA,QAAA,EAAK,CAAE,CAAE;QAClBY,KAAK,EAAEA,KAAM;QACbX,MAAM,EAAC;MAAoB,EAC3B,CACH;MAPOC,WAAW,GAAAW,KAAA,CAAXX,WAAW;MAAEY,SAAS,GAAAD,KAAA,CAATC,SAAS;IAS9B,IAAMJ,YAAY,GAAGR,WAAW,CAAC,oBAAoB,CAAC;IACtD,IAAMa,aAAa,GAAGD,SAAS,CAACF,KAAK,CAACI,QAAQ,EAAE,CAAC;IAGjDV,MAAM,CAACI,YAAY,CAAC,CAACC,UAAU,EAAE;IACjCL,MAAM,CAACS,aAAa,CAAC,CAACJ,UAAU,EAAE;EACpC,CAAC,CAAC;AACJ,CAAC,CAAC"}