2f27b81d9b11a5bf1cea7c982683d709
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NATIVE = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
var _reactNative = require("react-native");
var _misc = require("./misc");
var _environment = require("./utils/environment");
var _vendor = require("./vendor");
var RNSentry = (0, _environment.isTurboModuleEnabled)() ? _reactNative.TurboModuleRegistry.get('RNSentry') : _reactNative.NativeModules.RNSentry;
var NATIVE = {
  fetchModules: function fetchModules() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if (!this.enableNative) {
        throw this._DisabledNativeError;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        throw this._NativeClientError;
      }
      var raw = yield RNSentry.fetchModules();
      if (raw) {
        return JSON.parse(raw);
      }
      return null;
    });
  },
  sendEnvelope: function sendEnvelope(envelope) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if (!this.enableNative) {
        _utils.logger.warn('Event was skipped as native SDK is not enabled.');
        return;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        throw this._NativeClientError;
      }
      var _utf8ToBytes = (0, _vendor.utf8ToBytes)('\n'),
        _utf8ToBytes2 = (0, _slicedToArray2.default)(_utf8ToBytes, 1),
        EOL = _utf8ToBytes2[0];
      var _envelope = (0, _slicedToArray2.default)(envelope, 2),
        envelopeHeader = _envelope[0],
        envelopeItems = _envelope[1];
      var headerString = JSON.stringify(envelopeHeader);
      var envelopeBytes = (0, _vendor.utf8ToBytes)(headerString);
      envelopeBytes.push(EOL);
      var hardCrashed = false;
      for (var rawItem of envelopeItems) {
        var _envelopeBytes;
        var _this$_processItem = this._processItem(rawItem),
          _this$_processItem2 = (0, _slicedToArray2.default)(_this$_processItem, 2),
          itemHeader = _this$_processItem2[0],
          itemPayload = _this$_processItem2[1];
        var bytesContentType = void 0;
        var bytesPayload = [];
        if (typeof itemPayload === 'string') {
          bytesContentType = 'text/plain';
          bytesPayload = (0, _vendor.utf8ToBytes)(itemPayload);
        } else if (itemPayload instanceof Uint8Array) {
          bytesContentType = typeof itemHeader.content_type === 'string' ? itemHeader.content_type : 'application/octet-stream';
          bytesPayload = (0, _toConsumableArray2.default)(itemPayload);
        } else {
          bytesContentType = 'application/json';
          bytesPayload = (0, _vendor.utf8ToBytes)(JSON.stringify(itemPayload));
          if (!hardCrashed) {
            hardCrashed = (0, _misc.isHardCrash)(itemPayload);
          }
        }
        itemHeader.content_type = bytesContentType;
        itemHeader.length = bytesPayload.length;
        var serializedItemHeader = JSON.stringify(itemHeader);
        (_envelopeBytes = envelopeBytes).push.apply(_envelopeBytes, (0, _toConsumableArray2.default)((0, _vendor.utf8ToBytes)(serializedItemHeader)));
        envelopeBytes.push(EOL);
        envelopeBytes = envelopeBytes.concat(bytesPayload);
        envelopeBytes.push(EOL);
      }
      yield RNSentry.captureEnvelope(envelopeBytes, {
        store: hardCrashed
      });
    });
  },
  initNativeSdk: function initNativeSdk(originalOptions) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      var options = Object.assign({
        enableNative: true,
        autoInitializeNativeSdk: true
      }, originalOptions);
      if (!options.enableNative) {
        if (options.enableNativeNagger) {
          _utils.logger.warn('Note: Native Sentry SDK is disabled.');
        }
        this.enableNative = false;
        return false;
      }
      if (!options.autoInitializeNativeSdk) {
        if (options.enableNativeNagger) {
          _utils.logger.warn('Note: Native Sentry SDK was not initialized automatically, you will need to initialize it manually. If you wish to disable the native SDK and get rid of this warning, pass enableNative: false');
        }
        this.enableNative = true;
        return false;
      }
      if (!options.dsn) {
        _utils.logger.warn('Warning: No DSN was provided. The Sentry SDK will be disabled. Native SDK will also not be initalized.');
        this.enableNative = false;
        return false;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        throw this._NativeClientError;
      }
      var beforeSend = options.beforeSend,
        beforeBreadcrumb = options.beforeBreadcrumb,
        beforeSendTransaction = options.beforeSendTransaction,
        integrations = options.integrations,
        filteredOptions = (0, _tslib.__rest)(options, ["beforeSend", "beforeBreadcrumb", "beforeSendTransaction", "integrations"]);
      var nativeIsReady = yield RNSentry.initNativeSdk(filteredOptions);
      this.nativeIsReady = nativeIsReady;
      this.enableNative = true;
      return nativeIsReady;
    });
  },
  fetchNativeRelease: function fetchNativeRelease() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if (!this.enableNative) {
        throw this._DisabledNativeError;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        throw this._NativeClientError;
      }
      return RNSentry.fetchNativeRelease();
    });
  },
  fetchNativeSdkInfo: function fetchNativeSdkInfo() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if (!this.enableNative) {
        throw this._DisabledNativeError;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        throw this._NativeClientError;
      }
      return RNSentry.fetchNativeSdkInfo();
    });
  },
  fetchNativeDeviceContexts: function fetchNativeDeviceContexts() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if (!this.enableNative) {
        throw this._DisabledNativeError;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        throw this._NativeClientError;
      }
      return RNSentry.fetchNativeDeviceContexts();
    });
  },
  fetchNativeAppStart: function fetchNativeAppStart() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if (!this.enableNative) {
        _utils.logger.warn(this._DisabledNativeError);
        return null;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        _utils.logger.error(this._NativeClientError);
        return null;
      }
      return RNSentry.fetchNativeAppStart();
    });
  },
  fetchNativeFrames: function fetchNativeFrames() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if (!this.enableNative) {
        throw this._DisabledNativeError;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        throw this._NativeClientError;
      }
      return RNSentry.fetchNativeFrames();
    });
  },
  nativeCrash: function nativeCrash() {
    if (!this.enableNative) {
      return;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      throw this._NativeClientError;
    }
    RNSentry.crash();
  },
  setUser: function setUser(user) {
    if (!this.enableNative) {
      return;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      throw this._NativeClientError;
    }
    var userKeys = null;
    var userDataKeys = null;
    if (user) {
      var id = user.id,
        ip_address = user.ip_address,
        email = user.email,
        username = user.username,
        segment = user.segment,
        otherKeys = (0, _tslib.__rest)(user, ["id", "ip_address", "email", "username", "segment"]);
      var requiredUser = {
        id: id,
        ip_address: ip_address,
        email: email,
        username: username,
        segment: segment
      };
      userKeys = this._serializeObject(requiredUser);
      userDataKeys = this._serializeObject(otherKeys);
    }
    RNSentry.setUser(userKeys, userDataKeys);
  },
  setTag: function setTag(key, value) {
    if (!this.enableNative) {
      return;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      throw this._NativeClientError;
    }
    var stringifiedValue = typeof value === 'string' ? value : JSON.stringify(value);
    RNSentry.setTag(key, stringifiedValue);
  },
  setExtra: function setExtra(key, extra) {
    if (!this.enableNative) {
      return;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      throw this._NativeClientError;
    }
    var stringifiedExtra = typeof extra === 'string' ? extra : JSON.stringify(extra);
    RNSentry.setExtra(key, stringifiedExtra);
  },
  addBreadcrumb: function addBreadcrumb(breadcrumb) {
    if (!this.enableNative) {
      return;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      throw this._NativeClientError;
    }
    RNSentry.addBreadcrumb(Object.assign(Object.assign({}, breadcrumb), {
      level: breadcrumb.level ? this._processLevel(breadcrumb.level) : undefined
    }));
  },
  clearBreadcrumbs: function clearBreadcrumbs() {
    if (!this.enableNative) {
      return;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      throw this._NativeClientError;
    }
    RNSentry.clearBreadcrumbs();
  },
  setContext: function setContext(key, context) {
    if (!this.enableNative) {
      return;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      throw this._NativeClientError;
    }
    RNSentry.setContext(key, context !== null ? (0, _utils.normalize)(context) : null);
  },
  closeNativeSdk: function closeNativeSdk() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      var _this = this;
      if (!this.enableNative) {
        return;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        return;
      }
      return RNSentry.closeNativeSdk().then(function () {
        _this.enableNative = false;
      });
    });
  },
  disableNativeFramesTracking: function disableNativeFramesTracking() {
    if (!this.enableNative) {
      return;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      return;
    }
    RNSentry.disableNativeFramesTracking();
  },
  enableNativeFramesTracking: function enableNativeFramesTracking() {
    if (!this.enableNative) {
      return;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      return;
    }
    RNSentry.enableNativeFramesTracking();
  },
  isNativeAvailable: function isNativeAvailable() {
    return this.enableNative && this._isModuleLoaded(RNSentry);
  },
  captureScreenshot: function captureScreenshot() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if (!this.enableNative) {
        _utils.logger.warn(this._DisabledNativeError);
        return null;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        _utils.logger.error(this._NativeClientError);
        return null;
      }
      var raw;
      try {
        raw = yield RNSentry.captureScreenshot();
      } catch (e) {
        _utils.logger.warn('Failed to capture screenshot', e);
      }
      if (raw) {
        return raw.map(function (item) {
          return Object.assign(Object.assign({}, item), {
            data: new Uint8Array(item.data)
          });
        });
      } else {
        return null;
      }
    });
  },
  fetchViewHierarchy: function fetchViewHierarchy() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if (!this.enableNative) {
        throw this._DisabledNativeError;
      }
      if (!this._isModuleLoaded(RNSentry)) {
        throw this._NativeClientError;
      }
      var raw = yield RNSentry.fetchViewHierarchy();
      return raw ? new Uint8Array(raw) : null;
    });
  },
  startProfiling: function startProfiling() {
    if (!this.enableNative) {
      throw this._DisabledNativeError;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      throw this._NativeClientError;
    }
    var _RNSentry$startProfil = RNSentry.startProfiling(),
      started = _RNSentry$startProfil.started,
      error = _RNSentry$startProfil.error;
    if (started) {
      _utils.logger.log('[NATIVE] Start Profiling');
    } else {
      _utils.logger.error('[NATIVE] Start Profiling Failed', error);
    }
    return !!started;
  },
  stopProfiling: function stopProfiling() {
    if (!this.enableNative) {
      throw this._DisabledNativeError;
    }
    if (!this._isModuleLoaded(RNSentry)) {
      throw this._NativeClientError;
    }
    var _RNSentry$stopProfili = RNSentry.stopProfiling(),
      profile = _RNSentry$stopProfili.profile,
      error = _RNSentry$stopProfili.error;
    if (!profile || error) {
      _utils.logger.error('[NATIVE] Stop Profiling Failed', error);
      return null;
    }
    try {
      return JSON.parse(profile);
    } catch (e) {
      _utils.logger.error('[NATIVE] Failed to parse Hermes Profile JSON', e);
      return null;
    }
  },
  _processItem: function _processItem(item) {
    var _item = (0, _slicedToArray2.default)(item, 2),
      itemHeader = _item[0],
      itemPayload = _item[1];
    if (itemHeader.type == 'event' || itemHeader.type == 'transaction') {
      var event = this._processLevels(itemPayload);
      if (NATIVE.platform === 'android') {
        if ('message' in event) {
          event.message = {
            message: event.message
          };
        }
      }
      return [itemHeader, event];
    }
    return item;
  },
  _serializeObject: function _serializeObject(data) {
    var serialized = {};
    Object.keys(data).forEach(function (dataKey) {
      var value = data[dataKey];
      serialized[dataKey] = typeof value === 'string' ? value : JSON.stringify(value);
    });
    return serialized;
  },
  _processLevels: function _processLevels(event) {
    var _this2 = this;
    var _a;
    var processed = Object.assign(Object.assign({}, event), {
      level: event.level ? this._processLevel(event.level) : undefined,
      breadcrumbs: (_a = event.breadcrumbs) === null || _a === void 0 ? void 0 : _a.map(function (breadcrumb) {
        return Object.assign(Object.assign({}, breadcrumb), {
          level: breadcrumb.level ? _this2._processLevel(breadcrumb.level) : undefined
        });
      })
    });
    return processed;
  },
  _processLevel: function _processLevel(level) {
    if (level == 'log') {
      return 'debug';
    }
    return level;
  },
  _isModuleLoaded: function _isModuleLoaded(module) {
    return !!module;
  },
  _DisabledNativeError: new _utils.SentryError('Native is disabled'),
  _NativeClientError: new _utils.SentryError("Native Client is not available, can't start on native."),
  enableNative: true,
  nativeIsReady: false,
  platform: _reactNative.Platform.OS
};
exports.NATIVE = NATIVE;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,