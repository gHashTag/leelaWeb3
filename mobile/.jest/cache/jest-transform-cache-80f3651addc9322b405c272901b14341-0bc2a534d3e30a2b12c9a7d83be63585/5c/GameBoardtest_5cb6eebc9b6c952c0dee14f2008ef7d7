f9de9e30206721a150ea88ffe5ebebb7
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
describe('GameBoard Component', function () {
  test('should render the correct number of Gem components based on the players prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
        players: players
      })),
      getAllByTestId = _ref.getAllByTestId;
    var gemComponents = getAllByTestId('gem-container');
    var playerGemImages = getAllByTestId('player-gem-image');
    expect(playerGemImages.length).toEqual(2);
    expect(gemComponents.length).toEqual(72);
  });
  test('should render correct player avatars', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
        players: players
      })),
      getByTestId = _ref2.getByTestId,
      queryByTestId = _ref2.queryByTestId,
      getAllByTestId = _ref2.getAllByTestId;
    players.forEach(function (player) {
      var gemImage = getAllByTestId(`gem-${player.id}`)[0];
      expect(gemImage).toBeTruthy();
      if (typeof player.avatar === 'string') {
        var playerGemImage = getByTestId(`player-gem-image-${player.id}`);
        expect(playerGemImage).toBeTruthy();
        expect(playerGemImage.props.source.uri).toEqual(player.avatar);
      } else {
        var _playerGemImage = queryByTestId(`player-gem-image-${player.id}`);
        expect(_playerGemImage).toBeFalsy();
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsImRlc2NyaWJlIiwidGVzdCIsIl9yZWYiLCJyZW5kZXIiLCJfanN4UnVudGltZSIsImpzeCIsIkdhbWVCb2FyZCIsImdldEFsbEJ5VGVzdElkIiwiZ2VtQ29tcG9uZW50cyIsInBsYXllckdlbUltYWdlcyIsImV4cGVjdCIsImxlbmd0aCIsInRvRXF1YWwiLCJfcmVmMiIsImdldEJ5VGVzdElkIiwicXVlcnlCeVRlc3RJZCIsImZvckVhY2giLCJwbGF5ZXIiLCJnZW1JbWFnZSIsInRvQmVUcnV0aHkiLCJwbGF5ZXJHZW1JbWFnZSIsInByb3BzIiwic291cmNlIiwidXJpIiwidG9CZUZhbHN5Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9HYW1lQm9hcmQvR2FtZUJvYXJkLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICd0eXBlcydcblxuaW1wb3J0IHsgR2FtZUJvYXJkIH0gZnJvbSAnLi4vJ1xuXG5jb25zdCBwbGF5ZXJzOiBQbGF5ZXJbXSA9IFtcbiAge1xuICAgIGlkOiAyLFxuICAgIHBsYW46IDcyLFxuICAgIGF2YXRhcjogMTA2LFxuICB9LFxuICB7XG4gICAgaWQ6IDQsXG4gICAgcGxhbjogMzQsXG4gICAgYXZhdGFyOlxuICAgICAgJ2h0dHBzOi8vYmFma3JlaWZ0cm1mbWltbHZvMjZ4YXhmdnQyeXBuamphYXZxNW1nbmtqbGpzNm1jemZla2lpNGNtdHEuaXBmcy5uZnRzdG9yYWdlLmxpbmsvJyxcbiAgfSxcbl1cblxuZGVzY3JpYmUoJ0dhbWVCb2FyZCBDb21wb25lbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG4gICAgY29uc3QgZ2VtQ29tcG9uZW50cyA9IGdldEFsbEJ5VGVzdElkKCdnZW0tY29udGFpbmVyJylcbiAgICBjb25zdCBwbGF5ZXJHZW1JbWFnZXMgPSBnZXRBbGxCeVRlc3RJZCgncGxheWVyLWdlbS1pbWFnZScpXG4gICAgZXhwZWN0KHBsYXllckdlbUltYWdlcy5sZW5ndGgpLnRvRXF1YWwoMikgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwIDIg0LjQs9GA0L7QutCwXG4gICAgZXhwZWN0KGdlbUNvbXBvbmVudHMubGVuZ3RoKS50b0VxdWFsKDcyKSAvLyDQn9GA0L7QstC10YDQutCwINC90LAg0L7QsdGJ0LXQtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQutC+0LzQv9C+0L3QtdC90YLQvtCyIEdlbVxuICB9KVxuXG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgY29ycmVjdCBwbGF5ZXIgYXZhdGFycycsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBxdWVyeUJ5VGVzdElkLCBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPixcbiAgICApXG4gICAgcGxheWVycy5mb3JFYWNoKChwbGF5ZXIpID0+IHtcbiAgICAgIGNvbnN0IGdlbUltYWdlID0gZ2V0QWxsQnlUZXN0SWQoYGdlbS0ke3BsYXllci5pZH1gKVswXVxuICAgICAgZXhwZWN0KGdlbUltYWdlKS50b0JlVHJ1dGh5KClcblxuICAgICAgaWYgKHR5cGVvZiBwbGF5ZXIuYXZhdGFyID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBwbGF5ZXJHZW1JbWFnZSA9IGdldEJ5VGVzdElkKGBwbGF5ZXItZ2VtLWltYWdlLSR7cGxheWVyLmlkfWApXG4gICAgICAgIGV4cGVjdChwbGF5ZXJHZW1JbWFnZSkudG9CZVRydXRoeSgpXG4gICAgICAgIGV4cGVjdChwbGF5ZXJHZW1JbWFnZS5wcm9wcy5zb3VyY2UudXJpKS50b0VxdWFsKHBsYXllci5hdmF0YXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwbGF5ZXJHZW1JbWFnZSA9IHF1ZXJ5QnlUZXN0SWQoYHBsYXllci1nZW0taW1hZ2UtJHtwbGF5ZXIuaWR9YClcbiAgICAgICAgZXhwZWN0KHBsYXllckdlbUltYWdlKS50b0JlRmFsc3koKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG59KVxuXG4vLyB0ZXN0KCdzaG91bGQgcmVuZGVyIHBsYXllciBhdmF0YXJzJywgKCkgPT4ge1xuLy8gICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPilcblxuLy8gICBwbGF5ZXJzLmZvckVhY2goKHBsYXllcikgPT4ge1xuLy8gICAgIGNvbnN0IGdlbUltYWdlID0gZ2V0QnlUZXN0SWQoYGdlbS0ke3BsYXllci5pZH1gKVxuLy8gICAgIGV4cGVjdChnZW1JbWFnZSkudG9CZVRydXRoeSgpXG4vLyAgIH0pXG4vLyB9KVxuXG4vLyB0ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBjb3JyZWN0IG51bWJlciBvZiBHZW0gY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgcGxheWVycyBwcm9wJywgKCkgPT4ge1xuLy8gICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPilcblxuLy8gICBjb25zdCBnZW1Db21wb25lbnRzID0gZ2V0QWxsQnlUZXN0SWQoL15nZW0tXFxkKyQvKVxuLy8gICBleHBlY3QoZ2VtQ29tcG9uZW50cy5sZW5ndGgpLnRvRXF1YWwoNzIpIC8vINCe0LHRidC10LUg0LrQvtC70LjRh9C10YHRgtCy0L4gR2VtINC60L7QvNC/0L7QvdC10L3RgtC+0LIg0LHQtdC3INC/0YPRgdGC0YvRhSDRj9GH0LXQtdC6XG4vLyB9KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFHQSxJQUFBRSxHQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFNRyxPQUFPLEdBQWEsQ0FDeEI7RUFDRUMsRUFBRSxFQUFFLENBQUM7RUFDTEMsSUFBSSxFQUFFLEVBQUU7RUFDUkMsTUFBTSxFQUFFO0NBQ1QsRUFDRDtFQUNFRixFQUFFLEVBQUUsQ0FBQztFQUNMQyxJQUFJLEVBQUUsRUFBRTtFQUNSQyxNQUFNLEVBQ0o7Q0FDSCxDQUNGO0FBRURDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxZQUFLO0VBQ25DQyxJQUFJLENBQUMsOEVBQThFLEVBQUUsWUFBSztJQUN4RixJQUFBQyxJQUFBLEdBQTJCLElBQUFSLGNBQUEsQ0FBQVMsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVixHQUFBLENBQUFXLFNBQVM7UUFBQ1YsT0FBTyxFQUFFQTtNQUFRLEVBQUcsQ0FBQztNQUExRFcsY0FBYyxHQUFBTCxJQUFBLENBQWRLLGNBQWM7SUFDdEIsSUFBTUMsYUFBYSxHQUFHRCxjQUFjLENBQUMsZUFBZSxDQUFDO0lBQ3JELElBQU1FLGVBQWUsR0FBR0YsY0FBYyxDQUFDLGtCQUFrQixDQUFDO0lBQzFERyxNQUFNLENBQUNELGVBQWUsQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDekNGLE1BQU0sQ0FBQ0YsYUFBYSxDQUFDRyxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLEVBQUUsQ0FBQztFQUMxQyxDQUFDLENBQUM7RUFFRlgsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLFlBQUs7SUFDaEQsSUFBQVksS0FBQSxHQUF1RCxJQUFBbkIsY0FBQSxDQUFBUyxNQUFNLEVBQzNELElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVixHQUFBLENBQUFXLFNBQVM7UUFBQ1YsT0FBTyxFQUFFQTtNQUFRLEVBQUcsQ0FDaEM7TUFGT2tCLFdBQVcsR0FBQUQsS0FBQSxDQUFYQyxXQUFXO01BQUVDLGFBQWEsR0FBQUYsS0FBQSxDQUFiRSxhQUFhO01BQUVSLGNBQWMsR0FBQU0sS0FBQSxDQUFkTixjQUFjO0lBR2xEWCxPQUFPLENBQUNvQixPQUFPLENBQUMsVUFBQ0MsTUFBTSxFQUFJO01BQ3pCLElBQU1DLFFBQVEsR0FBR1gsY0FBYyxDQUFDLE9BQU9VLE1BQU0sQ0FBQ3BCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3REYSxNQUFNLENBQUNRLFFBQVEsQ0FBQyxDQUFDQyxVQUFVLEVBQUU7TUFFN0IsSUFBSSxPQUFPRixNQUFNLENBQUNsQixNQUFNLEtBQUssUUFBUSxFQUFFO1FBQ3JDLElBQU1xQixjQUFjLEdBQUdOLFdBQVcsQ0FBQyxvQkFBb0JHLE1BQU0sQ0FBQ3BCLEVBQUUsRUFBRSxDQUFDO1FBQ25FYSxNQUFNLENBQUNVLGNBQWMsQ0FBQyxDQUFDRCxVQUFVLEVBQUU7UUFDbkNULE1BQU0sQ0FBQ1UsY0FBYyxDQUFDQyxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUNYLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDbEIsTUFBTSxDQUFDO09BQy9ELE1BQU07UUFDTCxJQUFNcUIsZUFBYyxHQUFHTCxhQUFhLENBQUMsb0JBQW9CRSxNQUFNLENBQUNwQixFQUFFLEVBQUUsQ0FBQztRQUNyRWEsTUFBTSxDQUFDVSxlQUFjLENBQUMsQ0FBQ0ksU0FBUyxFQUFFOztJQUV0QyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==