960dec2151276af3c7d938146c08f7e2
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NeomorphFlexView = void 0;
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var native_1 = require("@react-navigation/native");
var cons_1 = require("../../cons");
var react_native_neomorph_shadows_1 = require("react-native-neomorph-shadows");
var NeomorphFlexView = function NeomorphFlexView(_ref) {
  var children = _ref.children,
    viewStyle = _ref.viewStyle,
    _ref$borderRadius = _ref.borderRadius,
    borderRadius = _ref$borderRadius === void 0 ? 40 : _ref$borderRadius;
  var _ref2 = (0, native_1.useTheme)(),
    dark = _ref2.dark;
  var backgroundColor = dark ? cons_1.black : cons_1.lightGray;
  return (0, _jsxRuntime.jsx)(react_native_neomorph_shadows_1.NeomorphFlex, {
    inner: true,
    style: Object.assign({}, styles.container, viewStyle, {
      backgroundColor: backgroundColor,
      borderRadius: borderRadius
    }),
    children: (0, _jsxRuntime.jsx)(react_native_1.View, {
      style: Object.assign({}, viewStyle, {
        borderRadius: borderRadius
      }),
      children: children
    })
  });
};
exports.NeomorphFlexView = NeomorphFlexView;
var styles = react_native_1.StyleSheet.create({
  container: {
    marginHorizontal: 40,
    shadowRadius: 5
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwibmF0aXZlXzEiLCJjb25zXzEiLCJyZWFjdF9uYXRpdmVfbmVvbW9ycGhfc2hhZG93c18xIiwiTmVvbW9ycGhGbGV4VmlldyIsIl9yZWYiLCJjaGlsZHJlbiIsInZpZXdTdHlsZSIsIl9yZWYkYm9yZGVyUmFkaXVzIiwiYm9yZGVyUmFkaXVzIiwiX3JlZjIiLCJ1c2VUaGVtZSIsImRhcmsiLCJiYWNrZ3JvdW5kQ29sb3IiLCJibGFjayIsImxpZ2h0R3JheSIsIl9qc3hSdW50aW1lIiwianN4IiwiTmVvbW9ycGhGbGV4IiwiaW5uZXIiLCJzdHlsZSIsIk9iamVjdCIsImFzc2lnbiIsInN0eWxlcyIsImNvbnRhaW5lciIsIlZpZXciLCJleHBvcnRzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsIm1hcmdpbkhvcml6b250YWwiLCJzaGFkb3dSYWRpdXMiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL05lb21vcnBoRmxleFZpZXcvTmVvbW9ycGhGbGV4Vmlldy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBWaWV3LCBWaWV3U3R5bGUsIFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmltcG9ydCB7IHVzZVRoZW1lIH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJ1xuaW1wb3J0IHsgYmxhY2ssIGxpZ2h0R3JheSB9IGZyb20gJ2NvbnMnXG5pbXBvcnQgeyBOZW9tb3JwaEZsZXggfSBmcm9tICdyZWFjdC1uYXRpdmUtbmVvbW9ycGgtc2hhZG93cydcblxuaW50ZXJmYWNlIE5lb21vcnBoRmxleFZpZXdQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbiAgdmlld1N0eWxlPzogVmlld1N0eWxlXG4gIGJvcmRlclJhZGl1cz86IG51bWJlclxufVxuXG5jb25zdCBOZW9tb3JwaEZsZXhWaWV3OiBSZWFjdC5GQzxOZW9tb3JwaEZsZXhWaWV3UHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIHZpZXdTdHlsZSxcbiAgYm9yZGVyUmFkaXVzID0gNDAsXG59KSA9PiB7XG4gIGNvbnN0IHsgZGFyayB9ID0gdXNlVGhlbWUoKVxuICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBkYXJrID8gYmxhY2sgOiBsaWdodEdyYXlcbiAgcmV0dXJuIChcbiAgICA8TmVvbW9ycGhGbGV4XG4gICAgICBpbm5lclxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLi4uc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgLi4udmlld1N0eWxlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIGJvcmRlclJhZGl1cyxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPFZpZXcgc3R5bGU9e3sgLi4udmlld1N0eWxlLCBib3JkZXJSYWRpdXMgfX0+e2NoaWxkcmVufTwvVmlldz5cbiAgICA8L05lb21vcnBoRmxleD5cbiAgKVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIG1hcmdpbkhvcml6b250YWw6IDQwLFxuICAgIHNoYWRvd1JhZGl1czogNSxcbiAgfSxcbn0pXG5cbmV4cG9ydCB7IE5lb21vcnBoRmxleFZpZXcgfVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsUUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksK0JBQUEsR0FBQUosT0FBQTtBQVFBLElBQU1LLGdCQUFnQixHQUFvQyxTQUFwREEsZ0JBQWdCQSxDQUFBQyxJQUFBLEVBSWpCO0VBQUEsSUFISEMsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7SUFDUkMsU0FBUyxHQUFBRixJQUFBLENBQVRFLFNBQVM7SUFBQUMsaUJBQUEsR0FBQUgsSUFBQSxDQUNUSSxZQUFZO0lBQVpBLFlBQVksR0FBQUQsaUJBQUEsY0FBRyxFQUFFLEdBQUFBLGlCQUFBO0VBRWpCLElBQUFFLEtBQUEsR0FBaUIsSUFBQVQsUUFBQSxDQUFBVSxRQUFRLEdBQUU7SUFBbkJDLElBQUksR0FBQUYsS0FBQSxDQUFKRSxJQUFJO0VBQ1osSUFBTUMsZUFBZSxHQUFHRCxJQUFJLEdBQUdWLE1BQUEsQ0FBQVksS0FBSyxHQUFHWixNQUFBLENBQUFhLFNBQVM7RUFDaEQsT0FDRSxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ2QsK0JBQUEsQ0FBQWUsWUFBWTtJQUNYQyxLQUFLO0lBQ0xDLEtBQUssRUFBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0FDLE1BQU0sQ0FBQ0MsU0FBUyxFQUNoQmpCLFNBQVM7TUFDWk0sZUFBZSxFQUFmQSxlQUFlO01BQ2ZKLFlBQVksRUFBWkE7SUFBWSxFQUNaO0lBQUFILFFBQUEsRUFFRixJQUFBVSxXQUFBLENBQUFDLEdBQUEsRUFBQ2pCLGNBQUEsQ0FBQXlCLElBQUk7TUFBQ0wsS0FBSyxFQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FBT2YsU0FBUztRQUFFRSxZQUFZLEVBQVpBO01BQVksRUFBRztNQUFBSCxRQUFBLEVBQUVBO0lBQVEsQ0FBTztFQUMvRCxDQUFjLENBQUM7QUFFbkIsQ0FBQztBQVNRb0IsT0FBQSxDQUFBdEIsZ0JBQUEsR0FBQUEsZ0JBQUE7QUFQVCxJQUFNbUIsTUFBTSxHQUFHdkIsY0FBQSxDQUFBMkIsVUFBVSxDQUFDQyxNQUFNLENBQUM7RUFDL0JKLFNBQVMsRUFBRTtJQUNUSyxnQkFBZ0IsRUFBRSxFQUFFO0lBQ3BCQyxZQUFZLEVBQUU7O0NBRWpCLENBQUMifQ==