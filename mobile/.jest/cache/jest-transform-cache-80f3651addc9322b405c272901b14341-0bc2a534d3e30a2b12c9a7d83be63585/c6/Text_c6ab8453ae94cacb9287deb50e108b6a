40d780900caff2b30270c9663c87e2e2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["h", "colors", "title", "oneColor", "numberOfLines", "textStyle", "testID", "onPress"];
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx";
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = exports.textStyles = void 0;
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var cons_1 = require("../../cons");
var react_native_size_matters_1 = require("react-native-size-matters");
var Text = (0, react_1.memo)(function (_ref) {
  var h = _ref.h,
    colors = _ref.colors,
    title = _ref.title,
    _ref$oneColor = _ref.oneColor,
    oneColor = _ref$oneColor === void 0 ? cons_1.gray : _ref$oneColor,
    numberOfLines = _ref.numberOfLines,
    textStyle = _ref.textStyle,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'text' : _ref$testID,
    onPress = _ref.onPress,
    textProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var scheme = (0, react_native_1.useColorScheme)();
  var isDark = scheme === 'dark';
  var curColor = oneColor;
  if (colors) {
    curColor = isDark ? colors.dark : colors.light;
  }
  var hStyle;
  if (h && exports.textStyles[h]) {
    hStyle = Object.assign({}, exports.textStyles[h], {
      color: curColor
    });
  }
  var mergedStyles = react_native_1.StyleSheet.flatten([hStyle, textStyle]);
  return (0, _jsxRuntime.jsx)(react_native_1.Text, Object.assign({
    style: mergedStyles
  }, textProps, {
    testID: testID,
    ellipsizeMode: "tail",
    numberOfLines: numberOfLines,
    onPress: onPress,
    children: title
  }));
});
exports.Text = Text;
exports.textStyles = react_native_1.StyleSheet.create({
  h0: {
    fontFamily: react_native_1.Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.ms)(95, 0.5) : (0, react_native_size_matters_1.ms)(95, 0.3),
    textShadowOffset: {
      width: 1,
      height: 1
    },
    textShadowRadius: 1
  },
  h1: {
    fontFamily: 'mont',
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.ms)(35, 0.3) : (0, react_native_size_matters_1.ms)(35, 0.6),
    fontWeight: 'bold',
    textShadowOffset: {
      width: 1,
      height: 1
    },
    textShadowRadius: 1
  },
  h2: {
    fontFamily: 'mont',
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.s)(20) : (0, react_native_size_matters_1.s)(20),
    fontWeight: 'bold',
    lineHeight: 20
  },
  h3: {
    fontFamily: 'mont',
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.ms)(18, 0.6) : (0, react_native_size_matters_1.ms)(18, 0.6),
    lineHeight: 20,
    textShadowOffset: {
      width: 1,
      height: 1
    },
    textShadowRadius: 1
  },
  h4: {
    fontFamily: react_native_1.Platform.OS === 'ios' ? 'mont' : 'mont',
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.s)(15) : (0, react_native_size_matters_1.s)(15),
    lineHeight: 18
  },
  h5: {
    fontFamily: 'mont',
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.ms)(12, 0.8) : (0, react_native_size_matters_1.s)(15)
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,