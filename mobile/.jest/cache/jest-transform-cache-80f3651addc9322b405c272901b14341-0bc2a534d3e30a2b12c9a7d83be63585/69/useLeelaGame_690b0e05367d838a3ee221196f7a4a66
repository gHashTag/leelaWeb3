eea9eecfa0a2e4946a1cf4b6afcacb97
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLeelaGame = void 0;
var react_1 = require("react");
var async_storage_1 = __importDefault(require("@react-native-async-storage/async-storage"));
var cons_1 = require("../../cons");
var i18next_1 = __importDefault(require("i18next"));
var handlePlayerMovement_1 = require("./handlePlayerMovement");
var images_1 = require("./images");
var MAX_ROLL = 6;
var initialState = {
  currentPlayer: {
    id: 1,
    plan: 68,
    previousPlan: 68,
    isStart: false,
    isFinished: false,
    consecutiveSixes: 0,
    message: i18next_1.default.t('sixToBegin'),
    positionBeforeThreeSixes: 0,
    avatar: images_1.GEM_ICONS[1]
  },
  lastRoll: 1,
  rollHistory: [],
  planHistory: [68]
};
var reducer = function reducer(state, action) {
  switch (action.type) {
    case 'ROLL_DICE':
      var rollResult = Math.floor(Math.random() * MAX_ROLL) + 1;
      return Object.assign({}, state, {
        lastRoll: rollResult,
        rollHistory: [].concat((0, _toConsumableArray2.default)(state.rollHistory), [rollResult]),
        currentPlayer: (0, handlePlayerMovement_1.handlePlayerMovement)(state.currentPlayer, rollResult)
      });
    case 'UPDATE_PLAYER':
      return Object.assign({}, state, {
        currentPlayer: action.player
      });
    case 'SET_ROLL_HISTORY':
      return Object.assign({}, state, {
        rollHistory: action.rollHistory
      });
    case 'SET_PLAN_HISTORY':
      return Object.assign({}, state, {
        planHistory: action.planHistory
      });
    case 'SET_INITIAL_STATE':
      return action.initialState;
    default:
      return state;
  }
};
var useLeelaGame = function useLeelaGame() {
  var _ref = (0, react_1.useReducer)(reducer, initialState),
    _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    state = _ref2[0],
    dispatch = _ref2[1];
  var getSavedState = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var savedState = yield async_storage_1.default.getItem('leelaGameState');
        return savedState ? JSON.parse(savedState) : initialState;
      } catch (error) {
        (0, cons_1.captureException)(error, 'getSavedState');
        return initialState;
      }
    });
    return function getSavedState() {
      return _ref3.apply(this, arguments);
    };
  }();
  (0, react_1.useEffect)(function () {
    getSavedState().then(function (savedState) {
      dispatch({
        type: 'SET_INITIAL_STATE',
        initialState: savedState
      });
    });
  }, []);
  (0, react_1.useEffect)(function () {
    var saveState = function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield async_storage_1.default.setItem('leelaGameState', JSON.stringify(state));
        } catch (error) {
          console.error(`On:saveState/ My Error: ${error}`);
        }
      });
      return function saveState() {
        return _ref4.apply(this, arguments);
      };
    }();
    saveState();
  }, [state]);
  var rollDice = function rollDice() {
    dispatch({
      type: 'ROLL_DICE'
    });
  };
  var updatePlayer = function updatePlayer(player) {
    dispatch({
      type: 'UPDATE_PLAYER',
      player: player
    });
  };
  var setRollHistory = function setRollHistory(rollHistory) {
    dispatch({
      type: 'SET_ROLL_HISTORY',
      rollHistory: rollHistory
    });
  };
  var setPlanHistory = function setPlanHistory(planHistory) {
    dispatch({
      type: 'SET_PLAN_HISTORY',
      planHistory: planHistory
    });
  };
  return {
    currentPlayer: state.currentPlayer,
    rollHistory: state.rollHistory,
    planHistory: state.planHistory,
    rollDice: rollDice,
    lastRoll: state.lastRoll,
    updatePlayer: updatePlayer,
    setRollHistory: setRollHistory,
    setPlanHistory: setPlanHistory
  };
};
exports.useLeelaGame = useLeelaGame;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,