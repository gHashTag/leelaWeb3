507fd295dc2c59a4e5bd7865f1ef4d6d
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx";
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dice = void 0;
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var react_native_size_matters_1 = require("react-native-size-matters");
var Dice = function Dice(_ref) {
  var _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    rollDice = _ref.rollDice,
    lastRoll = _ref.lastRoll,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size;
  var isDarkMode = (0, react_native_1.useColorScheme)() === 'dark';
  var spinValue = (0, react_1.useRef)(new react_native_1.Animated.Value(0)).current;
  var spin = spinValue.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '360deg']
  });
  var animateDice = function animateDice() {
    if (disabled) {
      return;
    }
    spinValue.setValue(0);
    react_native_1.Animated.timing(spinValue, {
      toValue: 10,
      duration: 500,
      easing: react_native_1.Easing.cubic,
      useNativeDriver: true
    }).start(function () {
      rollDice();
    });
  };
  var getSize = function getSize() {
    switch (size) {
      case 'small':
        return (0, react_native_size_matters_1.vs)(50);
      case 'large':
        return (0, react_native_size_matters_1.vs)(120);
      case 'medium':
      default:
        return (0, react_native_size_matters_1.vs)(80);
    }
  };
  var getImage = function getImage(number, isDarkTheme) {
    switch (number) {
      case 1:
        return isDarkTheme ? require("./assets_dark/1.png") : require("./assets_light/1.png");
      case 2:
        return isDarkTheme ? require("./assets_dark/2.png") : require("./assets_light/2.png");
      case 3:
        return isDarkTheme ? require("./assets_dark/3.png") : require("./assets_light/3.png");
      case 4:
        return isDarkTheme ? require("./assets_dark/4.png") : require("./assets_light/4.png");
      case 5:
        return isDarkTheme ? require("./assets_dark/5.png") : require("./assets_light/5.png");
      case 6:
        return isDarkTheme ? require("./assets_dark/6.png") : require("./assets_light/6.png");
      default:
        return null;
    }
  };
  return (0, _jsxRuntime.jsx)(react_native_1.Pressable, {
    onPress: animateDice,
    style: styles.diceContainer,
    testID: "dice-component",
    children: (0, _jsxRuntime.jsx)(react_native_1.Animated.Image, {
      style: [styles.image, {
        transform: [{
          rotate: spin
        }],
        height: getSize(),
        width: getSize()
      }],
      source: getImage(lastRoll, isDarkMode),
      testID: "dice-image"
    })
  });
};
exports.Dice = Dice;
var styles = react_native_size_matters_1.ScaledSheet.create({
  diceContainer: {
    alignItems: 'center',
    alignSelf: 'center',
    marginVertical: (0, react_native_size_matters_1.vs)(12)
  },
  image: {
    height: (0, react_native_size_matters_1.vs)(65),
    width: (0, react_native_size_matters_1.vs)(65)
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,