8f1b3b9685b06840e12b7453fa7281fd
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MARGIN_OF_ERROR_SECONDS = void 0;
exports.adjustTransactionDuration = adjustTransactionDuration;
exports.getBlankTransactionContext = exports.defaultTransactionSource = exports.customTransactionSource = void 0;
exports.getTimeOriginMilliseconds = getTimeOriginMilliseconds;
exports.instrumentChildSpanFinish = instrumentChildSpanFinish;
exports.isNearToNow = isNearToNow;
var _utils = require("@sentry/utils");
var defaultTransactionSource = 'component';
exports.defaultTransactionSource = defaultTransactionSource;
var customTransactionSource = 'custom';
exports.customTransactionSource = customTransactionSource;
var getBlankTransactionContext = function getBlankTransactionContext(name) {
  return {
    name: 'Route Change',
    op: 'navigation',
    tags: {
      'routing.instrumentation': name
    },
    data: {},
    metadata: {
      source: defaultTransactionSource
    }
  };
};
exports.getBlankTransactionContext = getBlankTransactionContext;
var MARGIN_OF_ERROR_SECONDS = 0.05;
exports.MARGIN_OF_ERROR_SECONDS = MARGIN_OF_ERROR_SECONDS;
var timeOriginMilliseconds = Date.now();
function adjustTransactionDuration(maxDurationMs, transaction, endTimestamp) {
  var diff = endTimestamp - transaction.startTimestamp;
  var isOutdatedTransaction = endTimestamp && (diff > maxDurationMs || diff < 0);
  if (isOutdatedTransaction) {
    transaction.setStatus('deadline_exceeded');
    transaction.setTag('maxTransactionDurationExceeded', 'true');
  }
}
function getTimeOriginMilliseconds() {
  return timeOriginMilliseconds;
}
function instrumentChildSpanFinish(transaction, callback) {
  if (transaction.spanRecorder) {
    var originalAdd = transaction.spanRecorder.add;
    transaction.spanRecorder.add = function (span) {
      originalAdd.apply(transaction.spanRecorder, [span]);
      var originalSpanFinish = span.finish;
      span.finish = function (endTimestamp) {
        originalSpanFinish.apply(span, [endTimestamp]);
        callback(span, endTimestamp);
      };
    };
  }
}
function isNearToNow(timestamp) {
  return Math.abs((0, _utils.timestampInSeconds)() - timestamp) <= MARGIN_OF_ERROR_SECONDS;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbHMiLCJyZXF1aXJlIiwiZGVmYXVsdFRyYW5zYWN0aW9uU291cmNlIiwiZXhwb3J0cyIsImN1c3RvbVRyYW5zYWN0aW9uU291cmNlIiwiZ2V0QmxhbmtUcmFuc2FjdGlvbkNvbnRleHQiLCJuYW1lIiwib3AiLCJ0YWdzIiwiZGF0YSIsIm1ldGFkYXRhIiwic291cmNlIiwiTUFSR0lOX09GX0VSUk9SX1NFQ09ORFMiLCJ0aW1lT3JpZ2luTWlsbGlzZWNvbmRzIiwiRGF0ZSIsIm5vdyIsImFkanVzdFRyYW5zYWN0aW9uRHVyYXRpb24iLCJtYXhEdXJhdGlvbk1zIiwidHJhbnNhY3Rpb24iLCJlbmRUaW1lc3RhbXAiLCJkaWZmIiwic3RhcnRUaW1lc3RhbXAiLCJpc091dGRhdGVkVHJhbnNhY3Rpb24iLCJzZXRTdGF0dXMiLCJzZXRUYWciLCJnZXRUaW1lT3JpZ2luTWlsbGlzZWNvbmRzIiwiaW5zdHJ1bWVudENoaWxkU3BhbkZpbmlzaCIsImNhbGxiYWNrIiwic3BhblJlY29yZGVyIiwib3JpZ2luYWxBZGQiLCJhZGQiLCJzcGFuIiwiYXBwbHkiLCJvcmlnaW5hbFNwYW5GaW5pc2giLCJmaW5pc2giLCJpc05lYXJUb05vdyIsInRpbWVzdGFtcCIsIk1hdGgiLCJhYnMiLCJ0aW1lc3RhbXBJblNlY29uZHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvdHJhY2luZy91dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IElkbGVUcmFuc2FjdGlvbiwgU3BhbiwgVHJhbnNhY3Rpb24gfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBUcmFuc2FjdGlvbkNvbnRleHQsIFRyYW5zYWN0aW9uU291cmNlIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyB0aW1lc3RhbXBJblNlY29uZHMgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUcmFuc2FjdGlvblNvdXJjZTogVHJhbnNhY3Rpb25Tb3VyY2UgPSAnY29tcG9uZW50JztcbmV4cG9ydCBjb25zdCBjdXN0b21UcmFuc2FjdGlvblNvdXJjZTogVHJhbnNhY3Rpb25Tb3VyY2UgPSAnY3VzdG9tJztcblxuZXhwb3J0IGNvbnN0IGdldEJsYW5rVHJhbnNhY3Rpb25Db250ZXh0ID0gKG5hbWU6IHN0cmluZyk6IFRyYW5zYWN0aW9uQ29udGV4dCA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1JvdXRlIENoYW5nZScsXG4gICAgb3A6ICduYXZpZ2F0aW9uJyxcbiAgICB0YWdzOiB7XG4gICAgICAncm91dGluZy5pbnN0cnVtZW50YXRpb24nOiBuYW1lLFxuICAgIH0sXG4gICAgZGF0YToge30sXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIHNvdXJjZTogZGVmYXVsdFRyYW5zYWN0aW9uU291cmNlLFxuICAgIH0sXG4gIH07XG59O1xuXG4vKipcbiAqIEEgbWFyZ2luIG9mIGVycm9yIG9mIDUwbXMgaXMgYWxsb3dlZCBmb3IgdGhlIGFzeW5jIG5hdGl2ZSBicmlkZ2UgY2FsbC5cbiAqIEFueXRoaW5nIGxhcmdlciB3b3VsZCByZWR1Y2UgdGhlIGFjY3VyYWN5IG9mIG91ciBmcmFtZXMgbWVhc3VyZW1lbnRzLlxuICovXG5leHBvcnQgY29uc3QgTUFSR0lOX09GX0VSUk9SX1NFQ09ORFMgPSAwLjA1O1xuXG5jb25zdCB0aW1lT3JpZ2luTWlsbGlzZWNvbmRzID0gRGF0ZS5ub3coKTtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRqdXN0VHJhbnNhY3Rpb25EdXJhdGlvbihcbiAgbWF4RHVyYXRpb25NczogbnVtYmVyLFxuICB0cmFuc2FjdGlvbjogSWRsZVRyYW5zYWN0aW9uLFxuICBlbmRUaW1lc3RhbXA6IG51bWJlcixcbik6IHZvaWQge1xuICBjb25zdCBkaWZmID0gZW5kVGltZXN0YW1wIC0gdHJhbnNhY3Rpb24uc3RhcnRUaW1lc3RhbXA7XG4gIGNvbnN0IGlzT3V0ZGF0ZWRUcmFuc2FjdGlvbiA9IGVuZFRpbWVzdGFtcCAmJiAoZGlmZiA+IG1heER1cmF0aW9uTXMgfHwgZGlmZiA8IDApO1xuICBpZiAoaXNPdXRkYXRlZFRyYW5zYWN0aW9uKSB7XG4gICAgdHJhbnNhY3Rpb24uc2V0U3RhdHVzKCdkZWFkbGluZV9leGNlZWRlZCcpO1xuICAgIHRyYW5zYWN0aW9uLnNldFRhZygnbWF4VHJhbnNhY3Rpb25EdXJhdGlvbkV4Y2VlZGVkJywgJ3RydWUnKTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRpbWVzdGFtcCB3aGVyZSB0aGUgSlMgZ2xvYmFsIHNjb3BlIHdhcyBpbml0aWFsaXplZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWVPcmlnaW5NaWxsaXNlY29uZHMoKTogbnVtYmVyIHtcbiAgcmV0dXJuIHRpbWVPcmlnaW5NaWxsaXNlY29uZHM7XG59XG5cbi8qKlxuICogQ2FsbHMgdGhlIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBjaGlsZCBzcGFuIG9mIHRoZSB0cmFuc2FjdGlvbiBpcyBmaW5pc2hlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RydW1lbnRDaGlsZFNwYW5GaW5pc2goXG4gIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbixcbiAgY2FsbGJhY2s6IChzcGFuOiBTcGFuLCBlbmRUaW1lc3RhbXA/OiBudW1iZXIpID0+IHZvaWQsXG4pOiB2b2lkIHtcbiAgaWYgKHRyYW5zYWN0aW9uLnNwYW5SZWNvcmRlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICBjb25zdCBvcmlnaW5hbEFkZCA9IHRyYW5zYWN0aW9uLnNwYW5SZWNvcmRlci5hZGQ7XG5cbiAgICB0cmFuc2FjdGlvbi5zcGFuUmVjb3JkZXIuYWRkID0gKHNwYW46IFNwYW4pOiB2b2lkID0+IHtcbiAgICAgIG9yaWdpbmFsQWRkLmFwcGx5KHRyYW5zYWN0aW9uLnNwYW5SZWNvcmRlciwgW3NwYW5dKTtcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgY29uc3Qgb3JpZ2luYWxTcGFuRmluaXNoID0gc3Bhbi5maW5pc2g7XG5cbiAgICAgIHNwYW4uZmluaXNoID0gKGVuZFRpbWVzdGFtcD86IG51bWJlcikgPT4ge1xuICAgICAgICBvcmlnaW5hbFNwYW5GaW5pc2guYXBwbHkoc3BhbiwgW2VuZFRpbWVzdGFtcF0pO1xuXG4gICAgICAgIGNhbGxiYWNrKHNwYW4sIGVuZFRpbWVzdGFtcCk7XG4gICAgICB9O1xuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSB0aW1lc3RhbXAgaXMgbm93IG9yIHdpdGhpbiB0aGUgc3BlY2lmaWVkIG1hcmdpbiBvZiBlcnJvciBmcm9tIG5vdy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmVhclRvTm93KHRpbWVzdGFtcDogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiBNYXRoLmFicyh0aW1lc3RhbXBJblNlY29uZHMoKSAtIHRpbWVzdGFtcCkgPD0gTUFSR0lOX09GX0VSUk9SX1NFQ09ORFM7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUVPLElBQU1DLHdCQUF3QixHQUFzQixXQUFXO0FBQUNDLE9BQUEsQ0FBQUQsd0JBQUEsR0FBQUEsd0JBQUE7QUFDaEUsSUFBTUUsdUJBQXVCLEdBQXNCLFFBQVE7QUFBQ0QsT0FBQSxDQUFBQyx1QkFBQSxHQUFBQSx1QkFBQTtBQUU1RCxJQUFNQywwQkFBMEIsR0FBRyxTQUE3QkEsMEJBQTBCQSxDQUFJQyxJQUFZLEVBQXdCO0VBQzdFLE9BQU87SUFDTEEsSUFBSSxFQUFFLGNBQWM7SUFDcEJDLEVBQUUsRUFBRSxZQUFZO0lBQ2hCQyxJQUFJLEVBQUU7TUFDSix5QkFBeUIsRUFBRUY7S0FDNUI7SUFDREcsSUFBSSxFQUFFLEVBQUU7SUFDUkMsUUFBUSxFQUFFO01BQ1JDLE1BQU0sRUFBRVQ7O0dBRVg7QUFDSCxDQUFDO0FBQUNDLE9BQUEsQ0FBQUUsMEJBQUEsR0FBQUEsMEJBQUE7QUFNSyxJQUFNTyx1QkFBdUIsR0FBRyxJQUFJO0FBQUNULE9BQUEsQ0FBQVMsdUJBQUEsR0FBQUEsdUJBQUE7QUFFNUMsSUFBTUMsc0JBQXNCLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxFQUFFO0FBS25DLFNBQVVDLHlCQUF5QkEsQ0FDdkNDLGFBQXFCLEVBQ3JCQyxXQUE0QixFQUM1QkMsWUFBb0I7RUFFcEIsSUFBTUMsSUFBSSxHQUFHRCxZQUFZLEdBQUdELFdBQVcsQ0FBQ0csY0FBYztFQUN0RCxJQUFNQyxxQkFBcUIsR0FBR0gsWUFBWSxLQUFLQyxJQUFJLEdBQUdILGFBQWEsSUFBSUcsSUFBSSxHQUFHLENBQUMsQ0FBQztFQUNoRixJQUFJRSxxQkFBcUIsRUFBRTtJQUN6QkosV0FBVyxDQUFDSyxTQUFTLENBQUMsbUJBQW1CLENBQUM7SUFDMUNMLFdBQVcsQ0FBQ00sTUFBTSxDQUFDLGdDQUFnQyxFQUFFLE1BQU0sQ0FBQzs7QUFFaEU7QUFLTSxTQUFVQyx5QkFBeUJBLENBQUE7RUFDdkMsT0FBT1osc0JBQXNCO0FBQy9CO0FBS00sU0FBVWEseUJBQXlCQSxDQUN2Q1IsV0FBd0IsRUFDeEJTLFFBQXFEO0VBRXJELElBQUlULFdBQVcsQ0FBQ1UsWUFBWSxFQUFFO0lBRTVCLElBQU1DLFdBQVcsR0FBR1gsV0FBVyxDQUFDVSxZQUFZLENBQUNFLEdBQUc7SUFFaERaLFdBQVcsQ0FBQ1UsWUFBWSxDQUFDRSxHQUFHLEdBQUcsVUFBQ0MsSUFBVSxFQUFVO01BQ2xERixXQUFXLENBQUNHLEtBQUssQ0FBQ2QsV0FBVyxDQUFDVSxZQUFZLEVBQUUsQ0FBQ0csSUFBSSxDQUFDLENBQUM7TUFHbkQsSUFBTUUsa0JBQWtCLEdBQUdGLElBQUksQ0FBQ0csTUFBTTtNQUV0Q0gsSUFBSSxDQUFDRyxNQUFNLEdBQUcsVUFBQ2YsWUFBcUIsRUFBSTtRQUN0Q2Msa0JBQWtCLENBQUNELEtBQUssQ0FBQ0QsSUFBSSxFQUFFLENBQUNaLFlBQVksQ0FBQyxDQUFDO1FBRTlDUSxRQUFRLENBQUNJLElBQUksRUFBRVosWUFBWSxDQUFDO01BQzlCLENBQUM7SUFDSCxDQUFDOztBQUVMO0FBS00sU0FBVWdCLFdBQVdBLENBQUNDLFNBQWlCO0VBQzNDLE9BQU9DLElBQUksQ0FBQ0MsR0FBRyxDQUFDLElBQUFDLHlCQUFrQixHQUFFLEdBQUdILFNBQVMsQ0FBQyxJQUFJeEIsdUJBQXVCO0FBQzlFIn0=