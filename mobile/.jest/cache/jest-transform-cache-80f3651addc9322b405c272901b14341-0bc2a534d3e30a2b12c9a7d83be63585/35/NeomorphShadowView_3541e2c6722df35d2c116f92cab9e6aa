7a67b27a5f8ca4209eaa87acdcd66384
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/NeomorphShadowView/NeomorphShadowView.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NeomorphShadowView = void 0;
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var cons_1 = require("../../cons");
var react_native_neomorph_shadows_1 = require("react-native-neomorph-shadows");
var react_native_size_matters_1 = require("react-native-size-matters");
var NeomorphShadowView = function NeomorphShadowView(_ref) {
  var children = _ref.children,
    viewStyle = _ref.viewStyle,
    shadowStyle = _ref.shadowStyle;
  return (0, _jsxRuntime.jsx)(react_native_neomorph_shadows_1.Shadow, {
    draw: true,
    style: Object.assign({}, styles.shadow, shadowStyle),
    children: (0, _jsxRuntime.jsx)(react_native_1.View, {
      style: viewStyle,
      children: children
    })
  });
};
exports.NeomorphShadowView = NeomorphShadowView;
var styles = react_native_size_matters_1.ScaledSheet.create({
  shadow: {
    alignSelf: 'center',
    shadowOffset: {
      width: 3,
      height: 3
    },
    shadowRadius: 6,
    shadowColor: cons_1.lightGray,
    shadowOpacity: 1,
    borderRadius: 25,
    backgroundColor: cons_1.white,
    alignItems: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiY29uc18xIiwicmVhY3RfbmF0aXZlX25lb21vcnBoX3NoYWRvd3NfMSIsInJlYWN0X25hdGl2ZV9zaXplX21hdHRlcnNfMSIsIk5lb21vcnBoU2hhZG93VmlldyIsIl9yZWYiLCJjaGlsZHJlbiIsInZpZXdTdHlsZSIsInNoYWRvd1N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJTaGFkb3ciLCJkcmF3Iiwic3R5bGUiLCJPYmplY3QiLCJhc3NpZ24iLCJzdHlsZXMiLCJzaGFkb3ciLCJWaWV3IiwiZXhwb3J0cyIsIlNjYWxlZFNoZWV0IiwiY3JlYXRlIiwiYWxpZ25TZWxmIiwic2hhZG93T2Zmc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJzaGFkb3dSYWRpdXMiLCJzaGFkb3dDb2xvciIsImxpZ2h0R3JheSIsInNoYWRvd09wYWNpdHkiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ3aGl0ZSIsImFsaWduSXRlbXMiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL05lb21vcnBoU2hhZG93Vmlldy9OZW9tb3JwaFNoYWRvd1ZpZXcudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgVmlldywgVmlld1Byb3BzLCBWaWV3U3R5bGUgfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmltcG9ydCB7IGxpZ2h0R3JheSwgd2hpdGUgfSBmcm9tICdjb25zJ1xuaW1wb3J0IHsgU2hhZG93IH0gZnJvbSAncmVhY3QtbmF0aXZlLW5lb21vcnBoLXNoYWRvd3MnXG5pbXBvcnQgeyBTY2FsZWRTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1zaXplLW1hdHRlcnMnXG5cbnR5cGUgRmxleFN0eWxlUHJvcGVydGllcyA9XG4gIHwgJ2ZsZXgnXG4gIHwgJ2FsaWduU2VsZidcbiAgfCAnZmxleEdyb3cnXG4gIHwgJ2ZsZXhTaHJpbmsnXG4gIHwgJ2ZsZXhCYXNpcydcblxudHlwZSBWaWV3U3R5bGVXaXRob3V0RmxleCA9IFBpY2s8XG4gIFZpZXdTdHlsZSxcbiAgRXhjbHVkZTxrZXlvZiBWaWV3U3R5bGUsIEZsZXhTdHlsZVByb3BlcnRpZXM+XG4+XG5cbmludGVyZmFjZSBWaWV3U3R5bGVXaXRoU2hhZG93IGV4dGVuZHMgVmlld1N0eWxlV2l0aG91dEZsZXgge1xuICBzaGFkb3dPZmZzZXQ/OiB7XG4gICAgd2lkdGg6IG51bWJlclxuICAgIGhlaWdodDogbnVtYmVyXG4gIH1cbiAgc2hhZG93T3BhY2l0eT86IG51bWJlclxuICBzaGFkb3dDb2xvcj86IHN0cmluZ1xuICBzaGFkb3dSYWRpdXM/OiBudW1iZXJcbiAgYm9yZGVyUmFkaXVzPzogbnVtYmVyXG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZ1xuICB3aWR0aD86IG51bWJlclxuICBoZWlnaHQ/OiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIE5lb21vcnBoU2hhZG93Vmlld1Byb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxuICBzaGFkb3dTdHlsZT86IFZpZXdTdHlsZVdpdGhTaGFkb3dcbiAgdmlld1N0eWxlPzogVmlld1Byb3BzXG59XG5cbmNvbnN0IE5lb21vcnBoU2hhZG93VmlldzogUmVhY3QuRkM8TmVvbW9ycGhTaGFkb3dWaWV3UHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIHZpZXdTdHlsZSxcbiAgc2hhZG93U3R5bGUsXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFNoYWRvd1xuICAgICAgLy8gQHRzLWlnbm9yZVxuXG4gICAgICBkcmF3XG4gICAgICBzdHlsZT17e1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIC4uLnN0eWxlcy5zaGFkb3csXG4gICAgICAgIC4uLnNoYWRvd1N0eWxlLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8VmlldyBzdHlsZT17dmlld1N0eWxlfT57Y2hpbGRyZW59PC9WaWV3PlxuICAgIDwvU2hhZG93PlxuICApXG59XG5cbmNvbnN0IHN0eWxlcyA9IFNjYWxlZFNoZWV0LmNyZWF0ZSh7XG4gIHNoYWRvdzoge1xuICAgIGFsaWduU2VsZjogJ2NlbnRlcicsXG4gICAgc2hhZG93T2Zmc2V0OiB7IHdpZHRoOiAzLCBoZWlnaHQ6IDMgfSxcbiAgICBzaGFkb3dSYWRpdXM6IDYsXG4gICAgc2hhZG93Q29sb3I6IGxpZ2h0R3JheSxcbiAgICBzaGFkb3dPcGFjaXR5OiAxLFxuICAgIGJvcmRlclJhZGl1czogMjUsXG4gICAgYmFja2dyb3VuZENvbG9yOiB3aGl0ZSxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfSxcbn0pXG5cbmV4cG9ydCB7IE5lb21vcnBoU2hhZG93VmlldyB9XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRywrQkFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksMkJBQUEsR0FBQUosT0FBQTtBQWtDQSxJQUFNSyxrQkFBa0IsR0FBc0MsU0FBeERBLGtCQUFrQkEsQ0FBQUMsSUFBQSxFQUluQjtFQUFBLElBSEhDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQ1JDLFNBQVMsR0FBQUYsSUFBQSxDQUFURSxTQUFTO0lBQ1RDLFdBQVcsR0FBQUgsSUFBQSxDQUFYRyxXQUFXO0VBRVgsT0FDRSxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1IsK0JBQUEsQ0FBQVMsTUFBTTtJQUdMQyxJQUFJO0lBQ0pDLEtBQUssRUFBQUMsTUFBQSxDQUFBQyxNQUFBLEtBRUFDLE1BQU0sQ0FBQ0MsTUFBTSxFQUNiVCxXQUFXLENBQ2Q7SUFBQUYsUUFBQSxFQUVGLElBQUFHLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVixjQUFBLENBQUFrQixJQUFJO01BQUNMLEtBQUssRUFBRU4sU0FBVTtNQUFBRCxRQUFBLEVBQUVBO0lBQVEsQ0FBTztFQUMxQyxDQUFRLENBQUM7QUFFYixDQUFDO0FBZVFhLE9BQUEsQ0FBQWYsa0JBQUEsR0FBQUEsa0JBQUE7QUFiVCxJQUFNWSxNQUFNLEdBQUdiLDJCQUFBLENBQUFpQixXQUFXLENBQUNDLE1BQU0sQ0FBQztFQUNoQ0osTUFBTSxFQUFFO0lBQ05LLFNBQVMsRUFBRSxRQUFRO0lBQ25CQyxZQUFZLEVBQUU7TUFBRUMsS0FBSyxFQUFFLENBQUM7TUFBRUMsTUFBTSxFQUFFO0lBQUMsQ0FBRTtJQUNyQ0MsWUFBWSxFQUFFLENBQUM7SUFDZkMsV0FBVyxFQUFFMUIsTUFBQSxDQUFBMkIsU0FBUztJQUN0QkMsYUFBYSxFQUFFLENBQUM7SUFDaEJDLFlBQVksRUFBRSxFQUFFO0lBQ2hCQyxlQUFlLEVBQUU5QixNQUFBLENBQUErQixLQUFLO0lBQ3RCQyxVQUFVLEVBQUU7O0NBRWYsQ0FBQyJ9