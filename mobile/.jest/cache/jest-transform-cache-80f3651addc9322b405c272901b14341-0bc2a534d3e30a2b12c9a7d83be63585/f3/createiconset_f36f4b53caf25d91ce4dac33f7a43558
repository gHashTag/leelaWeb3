70fda4fd229c57f934cb52f998b7bf76
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_COLOR = void 0;
exports.default = createIconSet;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _ensureNativeModuleAvailable = _interopRequireDefault(require("./ensure-native-module-available"));
var _createIconSourceCache = _interopRequireDefault(require("./create-icon-source-cache"));
var _iconButton = _interopRequireDefault(require("./icon-button"));
var _NativeRNVectorIcons = _interopRequireDefault(require("./NativeRNVectorIcons"));
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "/Users/playra/LeelaAiWeb3/node_modules/react-native-vector-icons/lib/create-icon-set.js";
var _excluded = ["name", "size", "color", "style", "children"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var DEFAULT_ICON_SIZE = 12;
exports.DEFAULT_ICON_SIZE = DEFAULT_ICON_SIZE;
var DEFAULT_ICON_COLOR = 'black';
exports.DEFAULT_ICON_COLOR = DEFAULT_ICON_COLOR;
function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {
  var fontBasename = fontFile ? fontFile.replace(/\.(otf|ttf)$/, '') : fontFamily;
  var fontReference = _reactNative.Platform.select({
    windows: `/Assets/${fontFile}#${fontFamily}`,
    android: fontBasename,
    web: fontBasename,
    default: fontFamily
  });
  var IconNamePropType = _propTypes.default.oneOf(Object.keys(glyphMap));
  var Icon = function (_PureComponent) {
    (0, _inherits2.default)(Icon, _PureComponent);
    var _super = _createSuper(Icon);
    function Icon() {
      (0, _classCallCheck2.default)(this, Icon);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(Icon, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          name = _this$props.name,
          size = _this$props.size,
          color = _this$props.color,
          style = _this$props.style,
          children = _this$props.children,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var glyph = name ? glyphMap[name] || '?' : '';
        if (typeof glyph === 'number') {
          glyph = String.fromCodePoint(glyph);
        }
        var styleDefaults = {
          fontSize: size,
          color: color
        };
        var styleOverrides = {
          fontFamily: fontReference,
          fontWeight: 'normal',
          fontStyle: 'normal'
        };
        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];
        return (0, _jsxRuntime.jsxs)(_reactNative.Text, Object.assign({
          selectable: false
        }, props, {
          children: [glyph, children]
        }));
      }
    }]);
    return Icon;
  }(_react.PureComponent);
  Icon.propTypes = {
    allowFontScaling: _propTypes.default.bool,
    name: IconNamePropType,
    size: _propTypes.default.number,
    color: _propTypes.default.any,
    children: _propTypes.default.node,
    style: _propTypes.default.any
  };
  Icon.defaultProps = {
    size: DEFAULT_ICON_SIZE,
    allowFontScaling: false
  };
  var imageSourceCache = (0, _createIconSourceCache.default)();
  function resolveGlyph(name) {
    var glyph = glyphMap[name] || '?';
    if (typeof glyph === 'number') {
      return String.fromCodePoint(glyph);
    }
    return glyph;
  }
  function getImageSourceSync(name) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
    (0, _ensureNativeModuleAvailable.default)();
    var glyph = resolveGlyph(name);
    var processedColor = (0, _reactNative.processColor)(color);
    var cacheKey = `${glyph}:${size}:${processedColor}`;
    if (imageSourceCache.has(cacheKey)) {
      return imageSourceCache.get(cacheKey);
    }
    try {
      var imagePath = _NativeRNVectorIcons.default.getImageForFontSync(fontReference, glyph, size, processedColor);
      var value = {
        uri: imagePath,
        scale: _reactNative.PixelRatio.get()
      };
      imageSourceCache.setValue(cacheKey, value);
      return value;
    } catch (error) {
      imageSourceCache.setError(cacheKey, error);
      throw error;
    }
  }
  function getImageSource(_x) {
    return _getImageSource.apply(this, arguments);
  }
  function _getImageSource() {
    _getImageSource = (0, _asyncToGenerator2.default)(function* (name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      (0, _ensureNativeModuleAvailable.default)();
      var glyph = resolveGlyph(name);
      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = `${glyph}:${size}:${processedColor}`;
      if (imageSourceCache.has(cacheKey)) {
        return imageSourceCache.get(cacheKey);
      }
      try {
        var imagePath = yield _NativeRNVectorIcons.default.getImageForFont(fontReference, glyph, size, processedColor);
        var value = {
          uri: imagePath,
          scale: _reactNative.PixelRatio.get()
        };
        imageSourceCache.setValue(cacheKey, value);
        return value;
      } catch (error) {
        imageSourceCache.setError(cacheKey, error);
        throw error;
      }
    });
    return _getImageSource.apply(this, arguments);
  }
  function loadFont() {
    return _loadFont.apply(this, arguments);
  }
  function _loadFont() {
    _loadFont = (0, _asyncToGenerator2.default)(function* () {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;
      if (_reactNative.Platform.OS === 'ios') {
        (0, _ensureNativeModuleAvailable.default)();
        if (!file) {
          throw new Error('Unable to load font, because no file was specified. ');
        }
        yield _NativeRNVectorIcons.default.loadFontWithFileName.apply(_NativeRNVectorIcons.default, (0, _toConsumableArray2.default)(file.split('.')));
      }
    });
    return _loadFont.apply(this, arguments);
  }
  function hasIcon(name) {
    return Object.prototype.hasOwnProperty.call(glyphMap, name);
  }
  function getRawGlyphMap() {
    return glyphMap;
  }
  function getFontFamily() {
    return fontReference;
  }
  Icon.Button = (0, _iconButton.default)(Icon);
  Icon.getImageSource = getImageSource;
  Icon.getImageSourceSync = getImageSourceSync;
  Icon.loadFont = loadFont;
  Icon.hasIcon = hasIcon;
  Icon.getRawGlyphMap = getRawGlyphMap;
  Icon.getFontFamily = getFontFamily;
  return Icon;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdE5hdGl2ZSIsIl9lbnN1cmVOYXRpdmVNb2R1bGVBdmFpbGFibGUiLCJfY3JlYXRlSWNvblNvdXJjZUNhY2hlIiwiX2ljb25CdXR0b24iLCJfTmF0aXZlUk5WZWN0b3JJY29ucyIsIl9qc3hSdW50aW1lIiwiX2pzeEZpbGVOYW1lIiwiX2V4Y2x1ZGVkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YyIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwidmFsdWVPZiIsImUiLCJERUZBVUxUX0lDT05fU0laRSIsImV4cG9ydHMiLCJERUZBVUxUX0lDT05fQ09MT1IiLCJjcmVhdGVJY29uU2V0IiwiZ2x5cGhNYXAiLCJmb250RmFtaWx5IiwiZm9udEZpbGUiLCJmb250U3R5bGUiLCJmb250QmFzZW5hbWUiLCJyZXBsYWNlIiwiZm9udFJlZmVyZW5jZSIsIlBsYXRmb3JtIiwic2VsZWN0Iiwid2luZG93cyIsImFuZHJvaWQiLCJ3ZWIiLCJJY29uTmFtZVByb3BUeXBlIiwiUHJvcFR5cGVzIiwib25lT2YiLCJrZXlzIiwiSWNvbiIsIl9QdXJlQ29tcG9uZW50IiwiX2luaGVyaXRzMiIsIl9zdXBlciIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwidmFsdWUiLCJyZW5kZXIiLCJfdGhpcyRwcm9wcyIsInByb3BzIiwibmFtZSIsInNpemUiLCJjb2xvciIsInN0eWxlIiwiY2hpbGRyZW4iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiZ2x5cGgiLCJTdHJpbmciLCJmcm9tQ29kZVBvaW50Iiwic3R5bGVEZWZhdWx0cyIsImZvbnRTaXplIiwic3R5bGVPdmVycmlkZXMiLCJmb250V2VpZ2h0IiwianN4cyIsIlRleHQiLCJhc3NpZ24iLCJzZWxlY3RhYmxlIiwiUHVyZUNvbXBvbmVudCIsInByb3BUeXBlcyIsImFsbG93Rm9udFNjYWxpbmciLCJib29sIiwibnVtYmVyIiwiYW55Iiwibm9kZSIsImRlZmF1bHRQcm9wcyIsImltYWdlU291cmNlQ2FjaGUiLCJjcmVhdGVJY29uU291cmNlQ2FjaGUiLCJyZXNvbHZlR2x5cGgiLCJnZXRJbWFnZVNvdXJjZVN5bmMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJlbnN1cmVOYXRpdmVNb2R1bGVBdmFpbGFibGUiLCJwcm9jZXNzZWRDb2xvciIsInByb2Nlc3NDb2xvciIsImNhY2hlS2V5IiwiaW1hZ2VQYXRoIiwiTmF0aXZlSWNvbkFQSSIsImdldEltYWdlRm9yRm9udFN5bmMiLCJ1cmkiLCJzY2FsZSIsIlBpeGVsUmF0aW8iLCJzZXRWYWx1ZSIsImVycm9yIiwic2V0RXJyb3IiLCJnZXRJbWFnZVNvdXJjZSIsIl94IiwiX2dldEltYWdlU291cmNlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZ2V0SW1hZ2VGb3JGb250IiwibG9hZEZvbnQiLCJfbG9hZEZvbnQiLCJmaWxlIiwiT1MiLCJFcnJvciIsImxvYWRGb250V2l0aEZpbGVOYW1lIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsInNwbGl0IiwiaGFzSWNvbiIsImdldFJhd0dseXBoTWFwIiwiZ2V0Rm9udEZhbWlseSIsIkJ1dHRvbiIsImNyZWF0ZUljb25CdXR0b25Db21wb25lbnQiXSwic291cmNlcyI6WyJjcmVhdGUtaWNvbi1zZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUGxhdGZvcm0sIFBpeGVsUmF0aW8sIHByb2Nlc3NDb2xvciwgVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCBlbnN1cmVOYXRpdmVNb2R1bGVBdmFpbGFibGUgZnJvbSAnLi9lbnN1cmUtbmF0aXZlLW1vZHVsZS1hdmFpbGFibGUnO1xuaW1wb3J0IGNyZWF0ZUljb25Tb3VyY2VDYWNoZSBmcm9tICcuL2NyZWF0ZS1pY29uLXNvdXJjZS1jYWNoZSc7XG5pbXBvcnQgY3JlYXRlSWNvbkJ1dHRvbkNvbXBvbmVudCBmcm9tICcuL2ljb24tYnV0dG9uJztcbmltcG9ydCBOYXRpdmVJY29uQVBJIGZyb20gJy4vTmF0aXZlUk5WZWN0b3JJY29ucyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lDT05fU0laRSA9IDEyO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfSUNPTl9DT0xPUiA9ICdibGFjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUljb25TZXQoXG4gIGdseXBoTWFwLFxuICBmb250RmFtaWx5LFxuICBmb250RmlsZSxcbiAgZm9udFN0eWxlXG4pIHtcbiAgLy8gQW5kcm9pZCBkb2Vzbid0IGNhcmUgYWJvdXQgYWN0dWFsIGZvbnRGYW1pbHkgbmFtZSwgaXQgd2lsbCBvbmx5IGxvb2sgaW4gZm9udHMgZm9sZGVyLlxuICBjb25zdCBmb250QmFzZW5hbWUgPSBmb250RmlsZVxuICAgID8gZm9udEZpbGUucmVwbGFjZSgvXFwuKG90Znx0dGYpJC8sICcnKVxuICAgIDogZm9udEZhbWlseTtcblxuICBjb25zdCBmb250UmVmZXJlbmNlID0gUGxhdGZvcm0uc2VsZWN0KHtcbiAgICB3aW5kb3dzOiBgL0Fzc2V0cy8ke2ZvbnRGaWxlfSMke2ZvbnRGYW1pbHl9YCxcbiAgICBhbmRyb2lkOiBmb250QmFzZW5hbWUsXG4gICAgd2ViOiBmb250QmFzZW5hbWUsXG4gICAgZGVmYXVsdDogZm9udEZhbWlseSxcbiAgfSk7XG5cbiAgY29uc3QgSWNvbk5hbWVQcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhnbHlwaE1hcCkpO1xuXG4gIGNsYXNzIEljb24gZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgYWxsb3dGb250U2NhbGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgICBuYW1lOiBJY29uTmFtZVByb3BUeXBlLFxuICAgICAgc2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgIGNvbG9yOiBQcm9wVHlwZXMuYW55LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L2ZvcmJpZC1wcm9wLXR5cGVzXG4gICAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgICBzdHlsZTogUHJvcFR5cGVzLmFueSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9mb3JiaWQtcHJvcC10eXBlc1xuICAgIH07XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgc2l6ZTogREVGQVVMVF9JQ09OX1NJWkUsXG4gICAgICBhbGxvd0ZvbnRTY2FsaW5nOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3QgeyBuYW1lLCBzaXplLCBjb2xvciwgc3R5bGUsIGNoaWxkcmVuLCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgbGV0IGdseXBoID0gbmFtZSA/IGdseXBoTWFwW25hbWVdIHx8ICc/JyA6ICcnO1xuICAgICAgaWYgKHR5cGVvZiBnbHlwaCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZ2x5cGggPSBTdHJpbmcuZnJvbUNvZGVQb2ludChnbHlwaCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0eWxlRGVmYXVsdHMgPSB7XG4gICAgICAgIGZvbnRTaXplOiBzaXplLFxuICAgICAgICBjb2xvcixcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0ge1xuICAgICAgICBmb250RmFtaWx5OiBmb250UmVmZXJlbmNlLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgIH07XG5cbiAgICAgIHByb3BzLnN0eWxlID0gW3N0eWxlRGVmYXVsdHMsIHN0eWxlLCBzdHlsZU92ZXJyaWRlcywgZm9udFN0eWxlIHx8IHt9XTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFRleHQgc2VsZWN0YWJsZT17ZmFsc2V9IHsuLi5wcm9wc30+XG4gICAgICAgICAge2dseXBofVxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBpbWFnZVNvdXJjZUNhY2hlID0gY3JlYXRlSWNvblNvdXJjZUNhY2hlKCk7XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUdseXBoKG5hbWUpIHtcbiAgICBjb25zdCBnbHlwaCA9IGdseXBoTWFwW25hbWVdIHx8ICc/JztcbiAgICBpZiAodHlwZW9mIGdseXBoID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KGdseXBoKTtcbiAgICB9XG4gICAgcmV0dXJuIGdseXBoO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW1hZ2VTb3VyY2VTeW5jKFxuICAgIG5hbWUsXG4gICAgc2l6ZSA9IERFRkFVTFRfSUNPTl9TSVpFLFxuICAgIGNvbG9yID0gREVGQVVMVF9JQ09OX0NPTE9SXG4gICkge1xuICAgIGVuc3VyZU5hdGl2ZU1vZHVsZUF2YWlsYWJsZSgpO1xuXG4gICAgY29uc3QgZ2x5cGggPSByZXNvbHZlR2x5cGgobmFtZSk7XG4gICAgY29uc3QgcHJvY2Vzc2VkQ29sb3IgPSBwcm9jZXNzQ29sb3IoY29sb3IpO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7Z2x5cGh9OiR7c2l6ZX06JHtwcm9jZXNzZWRDb2xvcn1gO1xuXG4gICAgaWYgKGltYWdlU291cmNlQ2FjaGUuaGFzKGNhY2hlS2V5KSkge1xuICAgICAgcmV0dXJuIGltYWdlU291cmNlQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGltYWdlUGF0aCA9IE5hdGl2ZUljb25BUEkuZ2V0SW1hZ2VGb3JGb250U3luYyhcbiAgICAgICAgZm9udFJlZmVyZW5jZSxcbiAgICAgICAgZ2x5cGgsXG4gICAgICAgIHNpemUsXG4gICAgICAgIHByb2Nlc3NlZENvbG9yXG4gICAgICApO1xuICAgICAgY29uc3QgdmFsdWUgPSB7IHVyaTogaW1hZ2VQYXRoLCBzY2FsZTogUGl4ZWxSYXRpby5nZXQoKSB9O1xuICAgICAgaW1hZ2VTb3VyY2VDYWNoZS5zZXRWYWx1ZShjYWNoZUtleSwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbWFnZVNvdXJjZUNhY2hlLnNldEVycm9yKGNhY2hlS2V5LCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBnZXRJbWFnZVNvdXJjZShcbiAgICBuYW1lLFxuICAgIHNpemUgPSBERUZBVUxUX0lDT05fU0laRSxcbiAgICBjb2xvciA9IERFRkFVTFRfSUNPTl9DT0xPUlxuICApIHtcbiAgICBlbnN1cmVOYXRpdmVNb2R1bGVBdmFpbGFibGUoKTtcblxuICAgIGNvbnN0IGdseXBoID0gcmVzb2x2ZUdseXBoKG5hbWUpO1xuICAgIGNvbnN0IHByb2Nlc3NlZENvbG9yID0gcHJvY2Vzc0NvbG9yKGNvbG9yKTtcbiAgICBjb25zdCBjYWNoZUtleSA9IGAke2dseXBofToke3NpemV9OiR7cHJvY2Vzc2VkQ29sb3J9YDtcblxuICAgIGlmIChpbWFnZVNvdXJjZUNhY2hlLmhhcyhjYWNoZUtleSkpIHtcbiAgICAgIHJldHVybiBpbWFnZVNvdXJjZUNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBpbWFnZVBhdGggPSBhd2FpdCBOYXRpdmVJY29uQVBJLmdldEltYWdlRm9yRm9udChcbiAgICAgICAgZm9udFJlZmVyZW5jZSxcbiAgICAgICAgZ2x5cGgsXG4gICAgICAgIHNpemUsXG4gICAgICAgIHByb2Nlc3NlZENvbG9yXG4gICAgICApO1xuICAgICAgY29uc3QgdmFsdWUgPSB7IHVyaTogaW1hZ2VQYXRoLCBzY2FsZTogUGl4ZWxSYXRpby5nZXQoKSB9O1xuICAgICAgaW1hZ2VTb3VyY2VDYWNoZS5zZXRWYWx1ZShjYWNoZUtleSwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbWFnZVNvdXJjZUNhY2hlLnNldEVycm9yKGNhY2hlS2V5LCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBsb2FkRm9udChmaWxlID0gZm9udEZpbGUpIHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICBlbnN1cmVOYXRpdmVNb2R1bGVBdmFpbGFibGUoKTtcbiAgICAgIGlmICghZmlsZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBsb2FkIGZvbnQsIGJlY2F1c2Ugbm8gZmlsZSB3YXMgc3BlY2lmaWVkLiAnKTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IE5hdGl2ZUljb25BUEkubG9hZEZvbnRXaXRoRmlsZU5hbWUoLi4uZmlsZS5zcGxpdCgnLicpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYXNJY29uKG5hbWUpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGdseXBoTWFwLCBuYW1lKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJhd0dseXBoTWFwKCkge1xuICAgIHJldHVybiBnbHlwaE1hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEZvbnRGYW1pbHkoKSB7XG4gICAgcmV0dXJuIGZvbnRSZWZlcmVuY2U7XG4gIH1cblxuICBJY29uLkJ1dHRvbiA9IGNyZWF0ZUljb25CdXR0b25Db21wb25lbnQoSWNvbik7XG4gIEljb24uZ2V0SW1hZ2VTb3VyY2UgPSBnZXRJbWFnZVNvdXJjZTtcbiAgSWNvbi5nZXRJbWFnZVNvdXJjZVN5bmMgPSBnZXRJbWFnZVNvdXJjZVN5bmM7XG4gIEljb24ubG9hZEZvbnQgPSBsb2FkRm9udDtcbiAgSWNvbi5oYXNJY29uID0gaGFzSWNvbjtcbiAgSWNvbi5nZXRSYXdHbHlwaE1hcCA9IGdldFJhd0dseXBoTWFwO1xuICBJY29uLmdldEZvbnRGYW1pbHkgPSBnZXRGb250RmFtaWx5O1xuXG4gIHJldHVybiBJY29uO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLDRCQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSyxzQkFBQSxHQUFBSCxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQU0sV0FBQSxHQUFBSixzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQU8s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