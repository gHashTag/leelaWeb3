6bc22ccea832f1048b17063867f5b53f
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
require("@testing-library/jest-native/extend-expect");
var Avatar_1 = require("./Avatar");
describe('Avatar Component', function () {
  it('matches the snapshot', function () {
    var tree = react_test_renderer_1.default.create((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
      plan: 5,
      size: "medium",
      avatar: "avatar-url",
      testID: "avatar-component"
    })).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "medium",
        avatar: "avatar-url",
        testID: "avatar-component"
      })),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('avatar-component')).toBeTruthy();
  });
  it('calls onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "medium",
        avatar: "avatar-url",
        onPress: onPressMock,
        testID: "avatar-component"
      })),
      getByTestId = _ref2.getByTestId;
    var avatarComponent = getByTestId('avatar-component');
    react_native_1.fireEvent.press(avatarComponent);
    expect(onPressMock).toHaveBeenCalled();
  });
  it('displays time icon when isAccept is false', function () {
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "medium",
        avatar: "avatar-url",
        isAccept: false,
        testID: "avatar-component"
      })),
      queryByTestId = _ref3.queryByTestId;
    expect(queryByTestId('avatar-title')).toBeNull();
    expect(queryByTestId('time-icon')).toBeTruthy();
  });
  it('displays text title when isAccept is true', function () {
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "medium",
        avatar: "avatar-url",
        isAccept: true,
        testID: "avatar-component"
      })),
      queryByTestId = _ref4.queryByTestId;
    expect(queryByTestId('avatar-title')).toBeTruthy();
    expect(queryByTestId('avatar-title')).toHaveTextContent('05');
  });
  it('displays time icon when isAccept is false', function () {
    var _ref5 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "medium",
        avatar: "avatar-url",
        isAccept: false,
        testID: "avatar-component"
      })),
      queryByTestId = _ref5.queryByTestId;
    expect(queryByTestId('avatar-title')).toBeNull();
    expect(queryByTestId('time-icon')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwicmVhY3RfdGVzdF9yZW5kZXJlcl8xIiwiQXZhdGFyXzEiLCJkZXNjcmliZSIsIml0IiwidHJlZSIsImRlZmF1bHQiLCJjcmVhdGUiLCJfanN4UnVudGltZSIsImpzeCIsIkF2YXRhciIsInBsYW4iLCJzaXplIiwiYXZhdGFyIiwidGVzdElEIiwidG9KU09OIiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwiX3JlZiIsInJlbmRlciIsImdldEJ5VGVzdElkIiwidG9CZVRydXRoeSIsIm9uUHJlc3NNb2NrIiwiamVzdCIsImZuIiwiX3JlZjIiLCJvblByZXNzIiwiYXZhdGFyQ29tcG9uZW50IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlZjMiLCJpc0FjY2VwdCIsInF1ZXJ5QnlUZXN0SWQiLCJ0b0JlTnVsbCIsIl9yZWY0IiwidG9IYXZlVGV4dENvbnRlbnQiLCJfcmVmNSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvQXZhdGFyL0F2YXRhci50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IGZpcmVFdmVudCwgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcidcblxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtbmF0aXZlL2V4dGVuZC1leHBlY3QnXG5pbXBvcnQgeyBBdmF0YXIgfSBmcm9tICcuL0F2YXRhcidcblxuZGVzY3JpYmUoJ0F2YXRhciBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGl0KCdtYXRjaGVzIHRoZSBzbmFwc2hvdCcsICgpID0+IHtcbiAgICBjb25zdCB0cmVlID0gcmVuZGVyZXJcbiAgICAgIC5jcmVhdGUoXG4gICAgICAgIDxBdmF0YXJcbiAgICAgICAgICBwbGFuPXs1fVxuICAgICAgICAgIHNpemU9XCJtZWRpdW1cIlxuICAgICAgICAgIGF2YXRhcj1cImF2YXRhci11cmxcIlxuICAgICAgICAgIHRlc3RJRD1cImF2YXRhci1jb21wb25lbnRcIlxuICAgICAgICAvPixcbiAgICAgIClcbiAgICAgIC50b0pTT04oKVxuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKVxuICB9KVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGRlZmF1bHQgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEF2YXRhclxuICAgICAgICBwbGFuPXs1fVxuICAgICAgICBzaXplPVwibWVkaXVtXCJcbiAgICAgICAgYXZhdGFyPVwiYXZhdGFyLXVybFwiXG4gICAgICAgIHRlc3RJRD1cImF2YXRhci1jb21wb25lbnRcIlxuICAgICAgLz4sXG4gICAgKVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnYXZhdGFyLWNvbXBvbmVudCcpKS50b0JlVHJ1dGh5KClcbiAgfSlcblxuICBpdCgnY2FsbHMgb25QcmVzcyBmdW5jdGlvbiB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKClcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8QXZhdGFyXG4gICAgICAgIHBsYW49ezV9XG4gICAgICAgIHNpemU9XCJtZWRpdW1cIlxuICAgICAgICBhdmF0YXI9XCJhdmF0YXItdXJsXCJcbiAgICAgICAgb25QcmVzcz17b25QcmVzc01vY2t9XG4gICAgICAgIHRlc3RJRD1cImF2YXRhci1jb21wb25lbnRcIlxuICAgICAgLz4sXG4gICAgKVxuICAgIGNvbnN0IGF2YXRhckNvbXBvbmVudCA9IGdldEJ5VGVzdElkKCdhdmF0YXItY29tcG9uZW50JylcbiAgICBmaXJlRXZlbnQucHJlc3MoYXZhdGFyQ29tcG9uZW50KVxuICAgIGV4cGVjdChvblByZXNzTW9jaykudG9IYXZlQmVlbkNhbGxlZCgpXG4gIH0pXG5cbiAgaXQoJ2Rpc3BsYXlzIHRpbWUgaWNvbiB3aGVuIGlzQWNjZXB0IGlzIGZhbHNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEF2YXRhclxuICAgICAgICBwbGFuPXs1fVxuICAgICAgICBzaXplPVwibWVkaXVtXCJcbiAgICAgICAgYXZhdGFyPVwiYXZhdGFyLXVybFwiXG4gICAgICAgIGlzQWNjZXB0PXtmYWxzZX1cbiAgICAgICAgdGVzdElEPVwiYXZhdGFyLWNvbXBvbmVudFwiXG4gICAgICAvPixcbiAgICApXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ2F2YXRhci10aXRsZScpKS50b0JlTnVsbCgpXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ3RpbWUtaWNvbicpKS50b0JlVHJ1dGh5KClcbiAgfSlcblxuICBpdCgnZGlzcGxheXMgdGV4dCB0aXRsZSB3aGVuIGlzQWNjZXB0IGlzIHRydWUnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8QXZhdGFyXG4gICAgICAgIHBsYW49ezV9XG4gICAgICAgIHNpemU9XCJtZWRpdW1cIlxuICAgICAgICBhdmF0YXI9XCJhdmF0YXItdXJsXCJcbiAgICAgICAgaXNBY2NlcHQ9e3RydWV9XG4gICAgICAgIHRlc3RJRD1cImF2YXRhci1jb21wb25lbnRcIlxuICAgICAgLz4sXG4gICAgKVxuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdhdmF0YXItdGl0bGUnKSkudG9CZVRydXRoeSgpXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ2F2YXRhci10aXRsZScpKS50b0hhdmVUZXh0Q29udGVudCgnMDUnKVxuICB9KVxuXG4gIGl0KCdkaXNwbGF5cyB0aW1lIGljb24gd2hlbiBpc0FjY2VwdCBpcyBmYWxzZScsICgpID0+IHtcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxBdmF0YXJcbiAgICAgICAgcGxhbj17NX1cbiAgICAgICAgc2l6ZT1cIm1lZGl1bVwiXG4gICAgICAgIGF2YXRhcj1cImF2YXRhci11cmxcIlxuICAgICAgICBpc0FjY2VwdD17ZmFsc2V9XG4gICAgICAgIHRlc3RJRD1cImF2YXRhci1jb21wb25lbnRcIlxuICAgICAgLz4sXG4gICAgKVxuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdhdmF0YXItdGl0bGUnKSkudG9CZU51bGwoKVxuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCd0aW1lLWljb24nKSkudG9CZVRydXRoeSgpXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxxQkFBQSxHQUFBSCxlQUFBLENBQUFDLE9BQUE7QUFFQUEsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUgsT0FBQTtBQUVBSSxRQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBSztFQUNoQ0MsRUFBRSxDQUFDLHNCQUFzQixFQUFFLFlBQUs7SUFDOUIsSUFBTUMsSUFBSSxHQUFHSixxQkFBQSxDQUFBSyxPQUFRLENBQ2xCQyxNQUFNLENBQ0wsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNQLFFBQUEsQ0FBQVEsTUFBTTtNQUNMQyxJQUFJLEVBQUUsQ0FBRTtNQUNSQyxJQUFJLEVBQUMsUUFBUTtNQUNiQyxNQUFNLEVBQUMsWUFBWTtNQUNuQkMsTUFBTSxFQUFDO0lBQWtCLEVBQ3pCLENBQ0gsQ0FDQUMsTUFBTSxFQUFFO0lBQ1hDLE1BQU0sQ0FBQ1gsSUFBSSxDQUFDLENBQUNZLGVBQWUsRUFBRTtFQUNoQyxDQUFDLENBQUM7RUFFRmIsRUFBRSxDQUFDLHNDQUFzQyxFQUFF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