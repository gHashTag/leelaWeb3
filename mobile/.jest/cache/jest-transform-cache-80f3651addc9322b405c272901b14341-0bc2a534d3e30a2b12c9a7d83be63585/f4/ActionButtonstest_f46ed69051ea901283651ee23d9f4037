0e3d82303e2477097162efe48d0c9e66
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var ActionButtons_1 = require("./ActionButtons");
var isLiked = false;
describe('ActionButtons Component', function () {
  it('renders admin menu button if isAdmin is true', function () {
    var handleAdminMenu = jest.fn();
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(ActionButtons_1.ActionButtons, {
        isAdmin: true,
        commCount: 5,
        likeCount: 10,
        handleAdminMenu: handleAdminMenu,
        handleComment: function handleComment() {},
        handleLike: function handleLike() {},
        handleShareLink: function handleShareLink() {},
        isLiked: isLiked
      })),
      getByTestId = _ref.getByTestId;
    var adminMenuButton = getByTestId('admin-menu-button');
    expect(adminMenuButton).toBeTruthy();
  });
  it('renders comment and like buttons', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(ActionButtons_1.ActionButtons, {
        isAdmin: false,
        commCount: 5,
        likeCount: 10,
        handleAdminMenu: function handleAdminMenu() {},
        handleComment: function handleComment() {},
        handleLike: function handleLike() {},
        isLiked: isLiked,
        handleShareLink: function handleShareLink() {}
      })),
      getByTestId = _ref2.getByTestId;
    var commentButton = getByTestId('comment-button');
    var heart = isLiked ? 'heart' : 'heart-outline';
    var likeButton = getByTestId(heart);
    expect(commentButton).toBeTruthy();
    expect(likeButton).toBeTruthy();
  });
  it('calls handleAdminMenu when admin menu button is pressed', function () {
    var handleAdminMenu = jest.fn();
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(ActionButtons_1.ActionButtons, {
        isAdmin: true,
        commCount: 5,
        likeCount: 10,
        handleAdminMenu: handleAdminMenu,
        handleComment: function handleComment() {},
        handleLike: function handleLike() {},
        handleShareLink: function handleShareLink() {},
        isLiked: isLiked
      })),
      getByTestId = _ref3.getByTestId;
    var adminMenuButton = getByTestId('admin-menu-button');
    react_native_1.fireEvent.press(adminMenuButton);
    expect(handleAdminMenu).toHaveBeenCalled();
  });
  it('calls handleComment when comment button is pressed', function () {
    var handleComment = jest.fn();
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(ActionButtons_1.ActionButtons, {
        isAdmin: false,
        commCount: 5,
        likeCount: 10,
        handleAdminMenu: function handleAdminMenu() {},
        handleComment: handleComment,
        handleLike: function handleLike() {},
        isLiked: isLiked,
        handleShareLink: function handleShareLink() {}
      })),
      getByTestId = _ref4.getByTestId;
    var commentButton = getByTestId('comment-button');
    react_native_1.fireEvent.press(commentButton);
    expect(handleComment).toHaveBeenCalled();
  });
  it('calls handleLike when like button is pressed', function () {
    var handleLike = jest.fn();
    var _ref5 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(ActionButtons_1.ActionButtons, {
        isAdmin: false,
        commCount: 5,
        likeCount: 10,
        handleAdminMenu: function handleAdminMenu() {},
        handleComment: function handleComment() {},
        handleLike: handleLike,
        isLiked: isLiked,
        handleShareLink: function handleShareLink() {}
      })),
      getByTestId = _ref5.getByTestId;
    var heart = isLiked ? 'heart' : 'heart-outline';
    var likeButton = getByTestId(heart);
    react_native_1.fireEvent.press(likeButton);
    expect(handleLike).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,