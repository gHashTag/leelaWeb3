{"version":3,"names":["react_1","__importDefault","require","react_native_1","__1","playerWithNumber","id","plan","avatar","playerWithStringAvatar","playerWithNumberAvatar","describe","test","_ref","render","_jsxRuntime","jsx","Gem","player","planNumber","queryByTestId","numberGem","console","log","expect","toBeTruthy","imageGem","toBeFalsy"],"sources":["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx"],"sourcesContent":["// src/components/Gem/Gem.test.tsx\nimport React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\nimport renderer from 'react-test-renderer'\n\nimport { Gem } from '../'\n\nconst playerWithNumber = {\n  id: 1,\n  plan: 68,\n  avatar: '',\n}\n\nconst playerWithStringAvatar = {\n  id: 2,\n  plan: 72,\n  avatar: 'https://example.com/avatar.jpg',\n}\n\nconst playerWithNumberAvatar = {\n  id: 3,\n  plan: 34,\n  avatar: 106,\n}\n\ndescribe('Gem Component', () => {\n  // test('Gem component snapshot', () => {\n  //   const component = renderer.create(\n  //     <Gem player={playerWithNumber} planNumber={68} onPress={() => {}} />,\n  //   )\n\n  //   const tree = component.toJSON()\n  //   expect(tree).toMatchSnapshot()\n  // })\n\n  // test('should have the correct testID prop', () => {\n  //   const { getByTestId } = render(<Gem planNumber={5} onPress={() => {}} />)\n  //   const gemNumber = getByTestId('gem-number')\n  //   expect(gemNumber).toBeDefined()\n  // })\n\n  // test('should call the onPress function when pressed', () => {\n  //   const onPressMock = jest.fn()\n  //   const { getByTestId } = render(<Gem planNumber={5} onPress={onPressMock} />)\n  //   const gemContainer = getByTestId('gem-container')\n  //   fireEvent.press(gemContainer)\n  //   expect(onPressMock).toHaveBeenCalled()\n  // })\n\n  test('should render number for player with plan number 68', () => {\n    const { queryByTestId } = render(\n      <Gem player={playerWithNumber} planNumber={69} />,\n    )\n\n    const numberGem = queryByTestId('gem-text')\n    console.log('numberGem', numberGem)\n    expect(numberGem).toBeTruthy()\n\n    const imageGem = queryByTestId('player-gem-image')\n    expect(imageGem).toBeFalsy()\n  })\n})\n"],"mappings":";;;;;;;;;;;;;AACA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AAGA,IAAAE,GAAA,GAAAF,OAAA;AAEA,IAAMG,gBAAgB,GAAG;EACvBC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE;CACT;AAED,IAAMC,sBAAsB,GAAG;EAC7BH,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE;CACT;AAED,IAAME,sBAAsB,GAAG;EAC7BJ,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE;CACT;AAEDG,QAAQ,CAAC,eAAe,EAAE,YAAK;EAwB7BC,IAAI,CAAC,qDAAqD,EAAE,YAAK;IAC/D,IAAAC,IAAA,GAA0B,IAAAV,cAAA,CAAAW,MAAM,EAC9B,IAAAC,WAAA,CAAAC,GAAA,EAACZ,GAAA,CAAAa,GAAG;QAACC,MAAM,EAAEb,gBAAiB;QAACc,UAAU,EAAE;MAAG,EAAG,CAClD;MAFOC,aAAa,GAAAP,IAAA,CAAbO,aAAa;IAIrB,IAAMC,SAAS,GAAGD,aAAa,CAAC,UAAU,CAAC;IAC3CE,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,SAAS,CAAC;IACnCG,MAAM,CAACH,SAAS,CAAC,CAACI,UAAU,EAAE;IAE9B,IAAMC,QAAQ,GAAGN,aAAa,CAAC,kBAAkB,CAAC;IAClDI,MAAM,CAACE,QAAQ,CAAC,CAACC,SAAS,EAAE;EAC9B,CAAC,CAAC;AACJ,CAAC,CAAC"}