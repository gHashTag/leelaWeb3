13e07d368f47e5c7af4326805c1625e0
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var images_1 = require("./images");
describe('Gem Component', function () {
  test('should render the correct image based on planNumber prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 3,
        onPress: function onPress() {}
      })),
      getByTestId = _ref.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(gemImage.props.source).toEqual(images_1.ICONS[2]);
  });
  test('should render the default image if player prop is missing', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 10,
        onPress: function onPress() {}
      })),
      getByTestId = _ref2.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(gemImage.props.source).toEqual(images_1.ICONS[0]);
  });
  test('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: onPressMock
      })),
      getByTestId = _ref3.getByTestId;
    var gemContainer = getByTestId('gem-container');
    react_native_1.fireEvent.press(gemContainer);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwiaW1hZ2VzXzEiLCJkZXNjcmliZSIsInRlc3QiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHZW0iLCJwbGFuTnVtYmVyIiwib25QcmVzcyIsImdldEJ5VGVzdElkIiwiZ2VtSW1hZ2UiLCJleHBlY3QiLCJwcm9wcyIsInNvdXJjZSIsInRvRXF1YWwiLCJJQ09OUyIsIl9yZWYyIiwib25QcmVzc01vY2siLCJqZXN0IiwiZm4iLCJfcmVmMyIsImdlbUNvbnRhaW5lciIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvR2VtL0dlbS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7R2VtfSBmcm9tICcuLi8nXG5pbXBvcnQge0lDT05TfSBmcm9tICcuL2ltYWdlcydcblxuZGVzY3JpYmUoJ0dlbSBDb21wb25lbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgaW1hZ2UgYmFzZWQgb24gcGxhbk51bWJlciBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEdlbSBwbGFuTnVtYmVyPXszfSBvblByZXNzPXsoKSA9PiB7fX0gLz4pXG4gICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRlc3RJZCgnZ2VtLWltYWdlJylcbiAgICBleHBlY3QoZ2VtSW1hZ2UucHJvcHMuc291cmNlKS50b0VxdWFsKElDT05TWzJdKSAvLyBDaGVjayB0aGUgY29ycmVjdCBpbWFnZSBiYXNlZCBvbiBwbGFuTnVtYmVyIHByb3BcbiAgfSlcblxuICB0ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBkZWZhdWx0IGltYWdlIGlmIHBsYXllciBwcm9wIGlzIG1pc3NpbmcnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8R2VtIHBsYW5OdW1iZXI9ezEwfSBvblByZXNzPXsoKSA9PiB7fX0gLz4pXG4gICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRlc3RJZCgnZ2VtLWltYWdlJylcbiAgICBleHBlY3QoZ2VtSW1hZ2UucHJvcHMuc291cmNlKS50b0VxdWFsKElDT05TWzBdKSAvLyBDaGVjayB0aGUgZGVmYXVsdCBpbWFnZSBpZiBwbGF5ZXIgcHJvcCBpcyBtaXNzaW5nXG4gIH0pXG5cbiAgdGVzdCgnc2hvdWxkIGNhbGwgdGhlIG9uUHJlc3MgZnVuY3Rpb24gd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uUHJlc3NNb2NrID0gamVzdC5mbigpXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8R2VtIHBsYW5OdW1iZXI9ezV9IG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPilcbiAgICBjb25zdCBnZW1Db250YWluZXIgPSBnZXRCeVRlc3RJZCgnZ2VtLWNvbnRhaW5lcicpXG4gICAgZmlyZUV2ZW50LnByZXNzKGdlbUNvbnRhaW5lcilcbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsR0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBRUFJLFFBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBSztFQUM3QkMsSUFBSSxDQUFDLDBEQUEwRCxFQUFFLFlBQUs7SUFDcEUsSUFBQUMsSUFBQSxHQUFzQixJQUFBTCxjQUFBLENBQUFNLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1AsR0FBQSxDQUFBUSxHQUFHO1FBQUNDLFVBQVUsRUFBRSxDQUFFO1FBQUNDLE9BQU8sRUFBRSxTQUFBQSxRQUFBLEVBQUssQ0FBRTtNQUFFLEVBQUcsQ0FBQztNQUFoRUMsV0FBVyxHQUFBUCxJQUFBLENBQVhPLFdBQVc7SUFDbEIsSUFBTUMsUUFBUSxHQUFHRCxXQUFXLENBQUMsV0FBVyxDQUFDO0lBQ3pDRSxNQUFNLENBQUNELFFBQVEsQ0FBQ0UsS0FBSyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDZixRQUFBLENBQUFnQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDO0VBRUZkLElBQUksQ0FBQywyREFBMkQsRUFBRSxZQUFLO0lBQ3JFLElBQUFlLEtBQUEsR0FBc0IsSUFBQW5CLGNBQUEsQ0FBQU0sTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUCxHQUFBLENBQUFRLEdBQUc7UUFBQ0MsVUFBVSxFQUFFLEVBQUc7UUFBQ0MsT0FBTyxFQUFFLFNBQUFBLFFBQUEsRUFBSyxDQUFFO01BQUUsRUFBRyxDQUFDO01BQWpFQyxXQUFXLEdBQUFPLEtBQUEsQ0FBWFAsV0FBVztJQUNsQixJQUFNQyxRQUFRLEdBQUdELFdBQVcsQ0FBQyxXQUFXLENBQUM7SUFDekNFLE1BQU0sQ0FBQ0QsUUFBUSxDQUFDRSxLQUFLLENBQUNDLE1BQU0sQ0FBQyxDQUFDQyxPQUFPLENBQUNmLFFBQUEsQ0FBQWdCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNqRCxDQUFDLENBQUM7RUFFRmQsSUFBSSxDQUFDLCtDQUErQyxFQUFFLFlBQUs7SUFDekQsSUFBTWdCLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDN0IsSUFBQUMsS0FBQSxHQUFzQixJQUFBdkIsY0FBQSxDQUFBTSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNQLEdBQUEsQ0FBQVEsR0FBRztRQUFDQyxVQUFVLEVBQUUsQ0FBRTtRQUFDQyxPQUFPLEVBQUVTO01BQVksRUFBRyxDQUFDO01BQW5FUixXQUFXLEdBQUFXLEtBQUEsQ0FBWFgsV0FBVztJQUNsQixJQUFNWSxZQUFZLEdBQUdaLFdBQVcsQ0FBQyxlQUFlLENBQUM7SUFDakRaLGNBQUEsQ0FBQXlCLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDRixZQUFZLENBQUM7SUFDN0JWLE1BQU0sQ0FBQ00sV0FBVyxDQUFDLENBQUNPLGdCQUFnQixFQUFFO0VBQ3hDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9