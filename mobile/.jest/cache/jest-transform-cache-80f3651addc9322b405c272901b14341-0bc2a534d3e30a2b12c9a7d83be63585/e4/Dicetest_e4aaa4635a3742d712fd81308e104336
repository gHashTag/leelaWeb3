4b3f6a2fbe524cae2365daba3cd87507
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockProps;
  beforeEach(function () {
    mockProps = {
      lastRoll: 1,
      disabled: false,
      rollDice: jest.fn()
    };
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the rollDice function on press when not disabled', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.rollDice).toHaveBeenCalledTimes(1);
  });
  it('does not call the rollDice function on press when disabled', function () {
    mockProps.disabled = true;
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref3.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.rollDice).not.toHaveBeenCalled();
  });
  it('updates dice image when rollDice function is called', function () {
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref4.getByTestId,
      rerender = _ref4.rerender;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    var newDiceRoll = 2;
    rerender((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps, {
      lastRoll: newDiceRoll
    })));
    var diceImage = getByTestId('dice-image');
    expect(diceImage.props.source).toEqual(require(`./assets/${newDiceRoll}.png`));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIl8xIiwiZGVzY3JpYmUiLCJtb2NrUHJvcHMiLCJiZWZvcmVFYWNoIiwibGFzdFJvbGwiLCJkaXNhYmxlZCIsInJvbGxEaWNlIiwiZm4iLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0IiwiX3JlZiIsInJlbmRlciIsImpzeCIsIkRpY2UiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiX3JlZjIiLCJhY3QiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInJ1bkFsbFRpbWVycyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZWYzIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZWY0IiwicmVyZW5kZXIiLCJuZXdEaWNlUm9sbCIsImRpY2VJbWFnZSIsInByb3BzIiwic291cmNlIiwidG9FcXVhbCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvRGljZS9EaWNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnQsIGFjdH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQge0RpY2UsIERpY2VQcm9wc30gZnJvbSAnLi8nXG5cbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbmltYXRlZC9OYXRpdmVBbmltYXRlZEhlbHBlcicpXG5qZXN0Lm1vY2soJy4vQW5pbWF0ZWQnLCAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCcuL0FuaW1hdGVkJyksXG4gICAgY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQ6IChjb21wb25lbnQ6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFxuICAgIH0sXG4gIH1cbn0pXG5cbmRlc2NyaWJlKCdEaWNlIENvbXBvbmVudCcsICgpID0+IHtcbiAgbGV0IG1vY2tQcm9wczogRGljZVByb3BzXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG1vY2tQcm9wcyA9IHtcbiAgICAgIGxhc3RSb2xsOiAxLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgcm9sbERpY2U6IGplc3QuZm4oKSxcbiAgICB9XG4gICAgamVzdC51c2VGYWtlVGltZXJzKClcbiAgfSlcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpXG4gIH0pXG5cbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggdGhlIHByb3ZpZGVkIHByb3BzJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gLz4pXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKS50b0JlRGVmaW5lZCgpXG4gIH0pXG5cbiAgaXQoJ2NhbGxzIHRoZSByb2xsRGljZSBmdW5jdGlvbiBvbiBwcmVzcyB3aGVuIG5vdCBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKClcbiAgICB9KVxuXG4gICAgZXhwZWN0KG1vY2tQcm9wcy5yb2xsRGljZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJvbGxEaWNlIGZ1bmN0aW9uIG9uIHByZXNzIHdoZW4gZGlzYWJsZWQnLCAoKSA9PiB7XG4gICAgbW9ja1Byb3BzLmRpc2FibGVkID0gdHJ1ZVxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gLz4pXG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKVxuICAgIH0pXG5cbiAgICBleHBlY3QobW9ja1Byb3BzLnJvbGxEaWNlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG4gIH0pXG5cbiAgaXQoJ3VwZGF0ZXMgZGljZSBpbWFnZSB3aGVuIHJvbGxEaWNlIGZ1bmN0aW9uIGlzIGNhbGxlZCcsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWQsIHJlcmVuZGVyfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpXG4gICAgfSlcblxuICAgIC8vIE1vY2sgYSBuZXcgZGljZSByb2xsIHZhbHVlXG4gICAgY29uc3QgbmV3RGljZVJvbGwgPSAyXG4gICAgcmVyZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gbGFzdFJvbGw9e25ld0RpY2VSb2xsfSAvPilcblxuICAgIGNvbnN0IGRpY2VJbWFnZSA9IGdldEJ5VGVzdElkKCdkaWNlLWltYWdlJykgLy8gQXNzdW1pbmcgeW91IGhhdmUgdGVzdElEIG9uIEFuaW1hdGVkLkltYWdlXG4gICAgZXhwZWN0KGRpY2VJbWFnZS5wcm9wcy5zb3VyY2UpLnRvRXF1YWwoXG4gICAgICByZXF1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