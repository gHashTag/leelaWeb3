58cb4a4fbfa3010fef29b665cdedf2b4
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NeomorphView = void 0;
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var native_1 = require("@react-navigation/native");
var cons_1 = require("../../cons");
var react_native_neomorph_shadows_1 = require("react-native-neomorph-shadows");
var react_native_size_matters_1 = require("react-native-size-matters");
var NeomorphView = function NeomorphView(_ref) {
  var children = _ref.children,
    viewStyle = _ref.viewStyle,
    shadowStyle = _ref.shadowStyle;
  var _ref2 = (0, native_1.useTheme)(),
    dark = _ref2.dark;
  var backgroundColor = dark ? cons_1.black : cons_1.lightGray;
  return (0, _jsxRuntime.jsx)(react_native_neomorph_shadows_1.Neomorph, {
    style: Object.assign({}, styles.container, shadowStyle || {}, viewStyle || {}, {
      backgroundColor: backgroundColor
    }),
    children: (0, _jsxRuntime.jsx)(react_native_1.View, {
      style: viewStyle,
      children: children
    })
  });
};
exports.NeomorphView = NeomorphView;
var styles = react_native_size_matters_1.ScaledSheet.create({
  container: {
    borderRadius: 20,
    shadowRadius: 5
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwibmF0aXZlXzEiLCJjb25zXzEiLCJyZWFjdF9uYXRpdmVfbmVvbW9ycGhfc2hhZG93c18xIiwicmVhY3RfbmF0aXZlX3NpemVfbWF0dGVyc18xIiwiTmVvbW9ycGhWaWV3IiwiX3JlZiIsImNoaWxkcmVuIiwidmlld1N0eWxlIiwic2hhZG93U3R5bGUiLCJfcmVmMiIsInVzZVRoZW1lIiwiZGFyayIsImJhY2tncm91bmRDb2xvciIsImJsYWNrIiwibGlnaHRHcmF5IiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJOZW9tb3JwaCIsInN0eWxlIiwiT2JqZWN0IiwiYXNzaWduIiwic3R5bGVzIiwiY29udGFpbmVyIiwiVmlldyIsImV4cG9ydHMiLCJTY2FsZWRTaGVldCIsImNyZWF0ZSIsImJvcmRlclJhZGl1cyIsInNoYWRvd1JhZGl1cyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvTmVvbW9ycGhWaWV3L05lb21vcnBoVmlldy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBWaWV3LCBWaWV3UHJvcHMsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSdcblxuaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnXG5pbXBvcnQgeyBibGFjaywgbGlnaHRHcmF5IH0gZnJvbSAnY29ucydcbmltcG9ydCB7IE5lb21vcnBoIH0gZnJvbSAncmVhY3QtbmF0aXZlLW5lb21vcnBoLXNoYWRvd3MnXG5pbXBvcnQgeyBTY2FsZWRTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1zaXplLW1hdHRlcnMnXG5cbnR5cGUgRmxleFN0eWxlUHJvcGVydGllcyA9XG4gIHwgJ2ZsZXgnXG4gIHwgJ2FsaWduU2VsZidcbiAgfCAnZmxleEdyb3cnXG4gIHwgJ2ZsZXhTaHJpbmsnXG4gIHwgJ2ZsZXhCYXNpcydcblxudHlwZSBWaWV3U3R5bGVXaXRob3V0RmxleCA9IFBpY2s8XG4gIFZpZXdTdHlsZSxcbiAgRXhjbHVkZTxrZXlvZiBWaWV3U3R5bGUsIEZsZXhTdHlsZVByb3BlcnRpZXM+XG4+XG5cbmludGVyZmFjZSBWaWV3U3R5bGVXaXRoU2hhZG93IGV4dGVuZHMgVmlld1N0eWxlV2l0aG91dEZsZXgge1xuICBzaGFkb3dPZmZzZXQ/OiB7XG4gICAgd2lkdGg6IG51bWJlclxuICAgIGhlaWdodDogbnVtYmVyXG4gIH1cbiAgc2hhZG93T3BhY2l0eT86IG51bWJlclxuICBzaGFkb3dDb2xvcj86IHN0cmluZ1xuICBzaGFkb3dSYWRpdXM/OiBudW1iZXJcbiAgYm9yZGVyUmFkaXVzPzogbnVtYmVyXG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZ1xuICB3aWR0aD86IG51bWJlclxuICBoZWlnaHQ/OiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIE5lb21vcnBoVmlld1Byb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxuICBzaGFkb3dTdHlsZT86IFZpZXdTdHlsZVdpdGhTaGFkb3dcbiAgdmlld1N0eWxlPzogVmlld1Byb3BzXG59XG5cbmNvbnN0IE5lb21vcnBoVmlldzogUmVhY3QuRkM8TmVvbW9ycGhWaWV3UHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIHZpZXdTdHlsZSxcbiAgc2hhZG93U3R5bGUsXG59KSA9PiB7XG4gIGNvbnN0IHsgZGFyayB9ID0gdXNlVGhlbWUoKVxuICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBkYXJrID8gYmxhY2sgOiBsaWdodEdyYXlcblxuICByZXR1cm4gKFxuICAgIDxOZW9tb3JwaFxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAuLi5zdHlsZXMuY29udGFpbmVyLFxuICAgICAgICAuLi4oc2hhZG93U3R5bGUgfHwge30pLFxuICAgICAgICAuLi4odmlld1N0eWxlIHx8IHt9KSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8VmlldyBzdHlsZT17dmlld1N0eWxlfT57Y2hpbGRyZW59PC9WaWV3PlxuICAgIDwvTmVvbW9ycGg+XG4gIClcbn1cblxuY29uc3Qgc3R5bGVzID0gU2NhbGVkU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgYm9yZGVyUmFkaXVzOiAyMCxcbiAgICBzaGFkb3dSYWRpdXM6IDUsXG4gIH0sXG59KVxuXG5leHBvcnQgeyBOZW9tb3JwaFZpZXcgfVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsUUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksK0JBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLDJCQUFBLEdBQUFMLE9BQUE7QUFrQ0EsSUFBTU0sWUFBWSxHQUFnQyxTQUE1Q0EsWUFBWUEsQ0FBQUMsSUFBQSxFQUliO0VBQUEsSUFISEMsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7SUFDUkMsU0FBUyxHQUFBRixJQUFBLENBQVRFLFNBQVM7SUFDVEMsV0FBVyxHQUFBSCxJQUFBLENBQVhHLFdBQVc7RUFFWCxJQUFBQyxLQUFBLEdBQWlCLElBQUFULFFBQUEsQ0FBQVUsUUFBUSxHQUFFO0lBQW5CQyxJQUFJLEdBQUFGLEtBQUEsQ0FBSkUsSUFBSTtFQUNaLElBQU1DLGVBQWUsR0FBR0QsSUFBSSxHQUFHVixNQUFBLENBQUFZLEtBQUssR0FBR1osTUFBQSxDQUFBYSxTQUFTO0VBRWhELE9BQ0UsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNkLCtCQUFBLENBQUFlLFFBQVE7SUFDUEMsS0FBSyxFQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FFQUMsTUFBTSxDQUFDQyxTQUFTLEVBQ2ZkLFdBQVcsSUFBSSxFQUFFLEVBQ2pCRCxTQUFTLElBQUksRUFBRTtNQUNuQkssZUFBZSxFQUFmQTtJQUFlLEVBQ2Y7SUFBQU4sUUFBQSxFQUVGLElBQUFTLFdBQUEsQ0FBQUMsR0FBQSxFQUFDakIsY0FBQSxDQUFBd0IsSUFBSTtNQUFDTCxLQUFLLEVBQUVYLFNBQVU7TUFBQUQsUUFBQSxFQUFFQTtJQUFRLENBQU87RUFDMUMsQ0FBVSxDQUFDO0FBRWYsQ0FBQztBQVNRa0IsT0FBQSxDQUFBcEIsWUFBQSxHQUFBQSxZQUFBO0FBUFQsSUFBTWlCLE1BQU0sR0FBR2xCLDJCQUFBLENBQUFzQixXQUFXLENBQUNDLE1BQU0sQ0FBQztFQUNoQ0osU0FBUyxFQUFFO0lBQ1RLLFlBQVksRUFBRSxFQUFFO0lBQ2hCQyxZQUFZLEVBQUU7O0NBRWpCLENBQUMifQ==