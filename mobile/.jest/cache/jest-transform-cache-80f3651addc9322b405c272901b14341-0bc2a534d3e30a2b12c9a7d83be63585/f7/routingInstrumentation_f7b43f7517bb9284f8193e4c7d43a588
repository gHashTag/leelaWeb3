33b38b0c385f6a8df5c5e8cd39385190
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoutingInstrumentation = exports.InternalRoutingInstrumentation = void 0;
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var RoutingInstrumentation = function () {
  function RoutingInstrumentation() {
    (0, _classCallCheck2.default)(this, RoutingInstrumentation);
    this.name = RoutingInstrumentation.instrumentationName;
  }
  (0, _createClass2.default)(RoutingInstrumentation, [{
    key: "registerRoutingInstrumentation",
    value: function registerRoutingInstrumentation(listener, beforeNavigate, onConfirmRoute) {
      this._tracingListener = listener;
      this._beforeNavigate = beforeNavigate;
      this._onConfirmRoute = onConfirmRoute;
    }
  }, {
    key: "onRouteWillChange",
    value: function onRouteWillChange(context) {
      var _a, _b;
      var transaction = (_a = this._tracingListener) === null || _a === void 0 ? void 0 : _a.call(this, context);
      if (transaction) {
        (_b = this._onConfirmRoute) === null || _b === void 0 ? void 0 : _b.call(this, context);
      }
      return transaction;
    }
  }]);
  return RoutingInstrumentation;
}();
exports.RoutingInstrumentation = RoutingInstrumentation;
RoutingInstrumentation.instrumentationName = 'base-routing-instrumentation';
var InternalRoutingInstrumentation = function (_RoutingInstrumentati) {
  (0, _inherits2.default)(InternalRoutingInstrumentation, _RoutingInstrumentati);
  var _super = _createSuper(InternalRoutingInstrumentation);
  function InternalRoutingInstrumentation() {
    (0, _classCallCheck2.default)(this, InternalRoutingInstrumentation);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(InternalRoutingInstrumentation, [{
    key: "onRouteWillChange",
    value: function onRouteWillChange(context) {
      var _a;
      return (_a = this._tracingListener) === null || _a === void 0 ? void 0 : _a.call(this, context);
    }
  }]);
  return InternalRoutingInstrumentation;
}(RoutingInstrumentation);
exports.InternalRoutingInstrumentation = InternalRoutingInstrumentation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb3V0aW5nSW5zdHJ1bWVudGF0aW9uIiwiX2NsYXNzQ2FsbENoZWNrMiIsImRlZmF1bHQiLCJuYW1lIiwiaW5zdHJ1bWVudGF0aW9uTmFtZSIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsInJlZ2lzdGVyUm91dGluZ0luc3RydW1lbnRhdGlvbiIsImxpc3RlbmVyIiwiYmVmb3JlTmF2aWdhdGUiLCJvbkNvbmZpcm1Sb3V0ZSIsIl90cmFjaW5nTGlzdGVuZXIiLCJfYmVmb3JlTmF2aWdhdGUiLCJfb25Db25maXJtUm91dGUiLCJvblJvdXRlV2lsbENoYW5nZSIsImNvbnRleHQiLCJ0cmFuc2FjdGlvbiIsIl9hIiwiY2FsbCIsIl9iIiwiZXhwb3J0cyIsIkludGVybmFsUm91dGluZ0luc3RydW1lbnRhdGlvbiIsIl9Sb3V0aW5nSW5zdHJ1bWVudGF0aSIsIl9pbmhlcml0czIiLCJfc3VwZXIiLCJfY3JlYXRlU3VwZXIiLCJhcHBseSIsImFyZ3VtZW50cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy90cmFjaW5nL3JvdXRpbmdJbnN0cnVtZW50YXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBUcmFuc2FjdGlvbiwgVHJhbnNhY3Rpb25Db250ZXh0IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5cbmltcG9ydCB0eXBlIHsgQmVmb3JlTmF2aWdhdGUgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgVHJhbnNhY3Rpb25DcmVhdG9yID0gKGNvbnRleHQ6IFRyYW5zYWN0aW9uQ29udGV4dCkgPT4gVHJhbnNhY3Rpb24gfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCB0eXBlIE9uQ29uZmlybVJvdXRlID0gKGNvbnRleHQ6IFRyYW5zYWN0aW9uQ29udGV4dCkgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBSb3V0aW5nSW5zdHJ1bWVudGF0aW9uSW5zdGFuY2Uge1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgcm91dGluZyBpbnN0cnVtZW50YXRpb25cbiAgICovXG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGxpc3RlbmVyIHRoYXQncyBjYWxsZWQgb24gZXZlcnkgcm91dGUgY2hhbmdlIHdpdGggYSBgVHJhbnNhY3Rpb25Db250ZXh0YC5cbiAgICpcbiAgICogRG8gbm90IG92ZXJ3cml0ZSB0aGlzIHVubGVzcyB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXG4gICAqXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBBIGBSb3V0ZUxpc3RlbmVyYFxuICAgKiBAcGFyYW0gYmVmb3JlTmF2aWdhdGUgQmVmb3JlTmF2aWdhdGVcbiAgICogQHBhcmFtIGluQ29uZmlybVJvdXRlIE9uQ29uZmlybVJvdXRlXG4gICAqL1xuICByZWdpc3RlclJvdXRpbmdJbnN0cnVtZW50YXRpb24oXG4gICAgbGlzdGVuZXI6IFRyYW5zYWN0aW9uQ3JlYXRvcixcbiAgICBiZWZvcmVOYXZpZ2F0ZTogQmVmb3JlTmF2aWdhdGUsXG4gICAgb25Db25maXJtUm91dGU6IE9uQ29uZmlybVJvdXRlLFxuICApOiB2b2lkO1xuICAvKipcbiAgICogVG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJvdXRlIGNoYW5nZXMsIEJFRk9SRSB0aGUgbmV3IHJvdXRlIG1vdW50cy5cbiAgICogSWYgdGhpcyBpcyBjYWxsZWQgYWZ0ZXIgYSByb3V0ZSBtb3VudHMgdGhlIGNoaWxkIHNwYW5zIHdpbGwgbm90IGJlIGNvcnJlY3RseSBhdHRhY2hlZC5cbiAgICpcbiAgICogQHBhcmFtIGNvbnRleHQgQSBgVHJhbnNhY3Rpb25Db250ZXh0YCB1c2VkIHRvIGluaXRpYWxpemUgdGhlIHRyYW5zYWN0aW9uLlxuICAgKi9cbiAgb25Sb3V0ZVdpbGxDaGFuZ2UoY29udGV4dDogVHJhbnNhY3Rpb25Db250ZXh0KTogVHJhbnNhY3Rpb24gfCB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQmFzZSBSb3V0aW5nIEluc3RydW1lbnRhdGlvbi4gQ2FuIGJlIHVzZWQgYnkgdXNlcnMgdG8gbWFudWFsbHkgaW5zdHJ1bWVudCBjdXN0b20gcm91dGVycy5cbiAqIFBhc3MgdGhpcyB0byB0aGUgdHJhY2luZyBpbnRlZ3JhdGlvbiwgYW5kIGNhbGwgYG9uUm91dGVXaWxsQ2hhbmdlYCBldmVyeSB0aW1lIGJlZm9yZSBhIHJvdXRlIGNoYW5nZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0aW5nSW5zdHJ1bWVudGF0aW9uIGltcGxlbWVudHMgUm91dGluZ0luc3RydW1lbnRhdGlvbkluc3RhbmNlIHtcbiAgcHVibGljIHN0YXRpYyBpbnN0cnVtZW50YXRpb25OYW1lOiBzdHJpbmcgPSAnYmFzZS1yb3V0aW5nLWluc3RydW1lbnRhdGlvbic7XG5cbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZyA9IFJvdXRpbmdJbnN0cnVtZW50YXRpb24uaW5zdHJ1bWVudGF0aW9uTmFtZTtcblxuICBwcm90ZWN0ZWQgX2dldEN1cnJlbnRIdWI/OiAoKSA9PiBIdWI7XG4gIHByb3RlY3RlZCBfYmVmb3JlTmF2aWdhdGU/OiBCZWZvcmVOYXZpZ2F0ZTtcbiAgcHJvdGVjdGVkIF9vbkNvbmZpcm1Sb3V0ZT86IE9uQ29uZmlybVJvdXRlO1xuICBwcm90ZWN0ZWQgX3RyYWNpbmdMaXN0ZW5lcj86IFRyYW5zYWN0aW9uQ3JlYXRvcjtcblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcHVibGljIHJlZ2lzdGVyUm91dGluZ0luc3RydW1lbnRhdGlvbihcbiAgICBsaXN0ZW5lcjogVHJhbnNhY3Rpb25DcmVhdG9yLFxuICAgIGJlZm9yZU5hdmlnYXRlOiBCZWZvcmVOYXZpZ2F0ZSxcbiAgICBvbkNvbmZpcm1Sb3V0ZTogT25Db25maXJtUm91dGUsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX3RyYWNpbmdMaXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIHRoaXMuX2JlZm9yZU5hdmlnYXRlID0gYmVmb3JlTmF2aWdhdGU7XG4gICAgdGhpcy5fb25Db25maXJtUm91dGUgPSBvbkNvbmZpcm1Sb3V0ZTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBwdWJsaWMgb25Sb3V0ZVdpbGxDaGFuZ2UoY29udGV4dDogVHJhbnNhY3Rpb25Db250ZXh0KTogVHJhbnNhY3Rpb24gfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5fdHJhY2luZ0xpc3RlbmVyPy4oY29udGV4dCk7XG5cbiAgICBpZiAodHJhbnNhY3Rpb24pIHtcbiAgICAgIHRoaXMuX29uQ29uZmlybVJvdXRlPy4oY29udGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICB9XG59XG5cbi8qKlxuICogSW50ZXJuYWwgYmFzZSByb3V0aW5nIGluc3RydW1lbnRhdGlvbiB3aGVyZSBgX29uQ29uZmlybVJvdXRlYCBpcyBub3QgY2FsbGVkIGluIG9uUm91dGVXaWxsQ2hhbmdlXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnRlcm5hbFJvdXRpbmdJbnN0cnVtZW50YXRpb24gZXh0ZW5kcyBSb3V0aW5nSW5zdHJ1bWVudGF0aW9uIHtcbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHB1YmxpYyBvblJvdXRlV2lsbENoYW5nZShjb250ZXh0OiBUcmFuc2FjdGlvbkNvbnRleHQpOiBUcmFuc2FjdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYWNpbmdMaXN0ZW5lcj8uKGNvbnRleHQpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQXlDYUEsc0JBQXNCO0VBQW5DLFNBQUFBLHVCQUFBO0lBQUEsSUFBQUMsZ0JBQUEsQ0FBQUMsT0FBQSxRQUFBRixzQkFBQTtJQUdrQixLQUFBRyxJQUFJLEdBQVdILHNCQUFzQixDQUFDSSxtQkFBbUI7RUE0QjNFO0VBQUMsSUFBQUMsYUFBQSxDQUFBSCxPQUFBLEVBQUFGLHNCQUFBO0lBQUFNLEdBQUE7SUFBQUMsS0FBQSxFQXBCUSxTQUFBQywrQkFDTEMsUUFBNEIsRUFDNUJDLGNBQThCLEVBQzlCQyxjQUE4QjtNQUU5QixJQUFJLENBQUNDLGdCQUFnQixHQUFHSCxRQUFRO01BQ2hDLElBQUksQ0FBQ0ksZUFBZSxHQUFHSCxjQUFjO01BQ3JDLElBQUksQ0FBQ0ksZUFBZSxHQUFHSCxjQUFjO0lBQ3ZDO0VBQUM7SUFBQUwsR0FBQTtJQUFBQyxLQUFBLEVBR00sU0FBQVEsa0JBQWtCQyxPQUEyQjs7TUFDbEQsSUFBTUMsV0FBVyxJQUFBQyxFQUFBLEdBQUcsSUFBSSxDQUFDTixnQkFBZ0IsY0FBQU0sRUFBQSx1QkFBQUEsRUFBQSxDQUFBQyxJQUFBLENBQXJCLElBQUksRUFBb0JILE9BQU8sQ0FBQztNQUVwRCxJQUFJQyxXQUFXLEVBQUU7UUFDZixDQUFBRyxFQUFBLE9BQUksQ0FBQ04sZUFBZSxjQUFBTSxFQUFBLHVCQUFBQSxFQUFBLENBQUFELElBQUEsQ0FBcEIsSUFBSSxFQUFtQkgsT0FBTzs7TUFHaEMsT0FBT0MsV0FBVztJQUNwQjtFQUFDO0VBQUEsT0FBQWpCLHNCQUFBO0FBQUE7QUFBQXFCLE9BQUEsQ0FBQXJCLHNCQUFBLEdBQUFBLHNCQUFBO0FBN0JhQSxzQkFBQSxDQUFBSSxtQkFBbUIsR0FBVyw4QkFBOEI7QUFBQyxJQW1DaEVrQiw4QkFBK0IsYUFBQUMscUJBQUE7RUFBQSxJQUFBQyxVQUFBLENBQUF0QixPQUFBLEVBQUFvQiw4QkFBQSxFQUFBQyxxQkFBQTtFQUFBLElBQUFFLE1BQUEsR0FBQUMsWUFBQSxDQUFBSiw4QkFBQTtFQUFBLFNBQUFBLCtCQUFBO0lBQUEsSUFBQXJCLGdCQUFBLENBQUFDLE9BQUEsUUFBQW9CLDhCQUFBO0lBQUEsT0FBQUcsTUFBQSxDQUFBRSxLQUFBLE9BQUFDLFNBQUE7RUFBQTtFQUFBLElBQUF2QixhQUFBLENBQUFILE9BQUEsRUFBQW9CLDhCQUFBO0lBQUFoQixHQUFBO0lBQUFDLEtBQUEsRUFFbkMsU0FBQVEsa0JBQWtCQyxPQUEyQjs7TUFDbEQsUUFBQUUsRUFBQSxHQUFPLElBQUksQ0FBQ04sZ0JBQWdCLGNBQUFNLEVBQUEsdUJBQUFBLEVBQUEsQ0FBQUMsSUFBQSxDQUFyQixJQUFJLEVBQW9CSCxPQUFPO0lBQ3hDO0VBQUM7RUFBQSxPQUFBTSw4QkFBQTtBQUFBLEVBSmlEdEIsc0JBQXNCO0FBQUFxQixPQUFBLENBQUFDLDhCQUFBLEdBQUFBLDhCQUFBIn0=