{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","useAnimatedProps","_slicedToArray2","_ReactFabricPublicInstanceUtils","_useRefEffect","_AnimatedEvent","_NativeAnimatedHelper","_AnimatedProps","_react","props","_useReducer","useReducer","count","_useReducer2","scheduleUpdate","onUpdateRef","useRef","node","useMemo","AnimatedProps","current","useAnimatedPropsLifecycle","refEffect","useCallback","instance","setNativeView","setNativeProps","isFabricInstance","__isNative","__getAnimatedValue","Error","target","getEventTarget","events","propName","propValue","AnimatedEvent","__attach","push","_ref","_ref2","__detach","callbackRef","useRefEffect","reduceAnimatedProps","assign","__getValue","collapsable","prevNodeRef","isUnmountingRef","useEffect","NativeAnimatedHelper","API","flushQueue","useLayoutEffect","prevNode","__restoreDefaultValues","getScrollableNode","_instance$getScrollRe","isFabricPublicInstance","getNativeScrollRef","getScrollResponder"],"sources":["useAnimatedProps.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport {isPublicInstance as isFabricPublicInstance} from '../Renderer/public/ReactFabricPublicInstanceUtils';\nimport useRefEffect from '../Utilities/useRefEffect';\nimport {AnimatedEvent} from './AnimatedEvent';\nimport NativeAnimatedHelper from './NativeAnimatedHelper';\nimport AnimatedProps from './nodes/AnimatedProps';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react';\n\ntype ReducedProps<TProps> = {\n  ...TProps,\n  collapsable: boolean,\n  ...\n};\ntype CallbackRef<T> = T => mixed;\n\nexport default function useAnimatedProps<TProps: {...}, TInstance>(\n  props: TProps,\n): [ReducedProps<TProps>, CallbackRef<TInstance | null>] {\n  const [, scheduleUpdate] = useReducer<number, void>(count => count + 1, 0);\n  const onUpdateRef = useRef<?() => void>(null);\n\n  // TODO: Only invalidate `node` if animated props or `style` change. In the\n  // previous implementation, we permitted `style` to override props with the\n  // same name property name as styles, so we can probably continue doing that.\n  // The ordering of other props *should* not matter.\n  const node = useMemo(\n    () => new AnimatedProps(props, () => onUpdateRef.current?.()),\n    [props],\n  );\n  useAnimatedPropsLifecycle(node);\n\n  // TODO: This \"effect\" does three things:\n  //\n  //   1) Call `setNativeView`.\n  //   2) Update `onUpdateRef`.\n  //   3) Update listeners for `AnimatedEvent` props.\n  //\n  // Ideally, each of these would be separate \"effects\" so that they are not\n  // unnecessarily re-run when irrelevant dependencies change. For example, we\n  // should be able to hoist all `AnimatedEvent` props and only do #3 if either\n  // the `AnimatedEvent` props change or `instance` changes.\n  //\n  // But there is no way to transparently compose three separate callback refs,\n  // so we just combine them all into one for now.\n  const refEffect = useCallback(\n    (instance: TInstance) => {\n      // NOTE: This may be called more often than necessary (e.g. when `props`\n      // changes), but `setNativeView` already optimizes for that.\n      node.setNativeView(instance);\n\n      // NOTE: This callback is only used by the JavaScript animation driver.\n      onUpdateRef.current = () => {\n        if (\n          process.env.NODE_ENV === 'test' ||\n          typeof instance !== 'object' ||\n          typeof instance?.setNativeProps !== 'function' ||\n          isFabricInstance(instance)\n        ) {\n          // Schedule an update for this component to update `reducedProps`,\n          // but do not compute it immediately. If a parent also updated, we\n          // need to merge those new props in before updating.\n          scheduleUpdate();\n        } else if (!node.__isNative) {\n          // $FlowIgnore[not-a-function] - Assume it's still a function.\n          // $FlowFixMe[incompatible-use]\n          instance.setNativeProps(node.__getAnimatedValue());\n        } else {\n          throw new Error(\n            'Attempting to run JS driven animation on animated node ' +\n              'that has been moved to \"native\" earlier by starting an ' +\n              'animation with `useNativeDriver: true`',\n          );\n        }\n      };\n\n      const target = getEventTarget(instance);\n      const events = [];\n\n      for (const propName in props) {\n        const propValue = props[propName];\n        if (propValue instanceof AnimatedEvent && propValue.__isNative) {\n          propValue.__attach(target, propName);\n          events.push([propName, propValue]);\n        }\n      }\n\n      return () => {\n        onUpdateRef.current = null;\n\n        for (const [propName, propValue] of events) {\n          propValue.__detach(target, propName);\n        }\n      };\n    },\n    [props, node],\n  );\n  const callbackRef = useRefEffect<TInstance>(refEffect);\n\n  return [reduceAnimatedProps<TProps>(node), callbackRef];\n}\n\nfunction reduceAnimatedProps<TProps>(\n  node: AnimatedProps,\n): ReducedProps<TProps> {\n  // Force `collapsable` to be false so that the native view is not flattened.\n  // Flattened views cannot be accurately referenced by the native driver.\n  return {\n    ...node.__getValue(),\n    collapsable: false,\n  };\n}\n\n/**\n * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`\n * and `__detach`. However, this is more complicated because `AnimatedProps`\n * uses reference counting to determine when to recursively detach its children\n * nodes. So in order to optimize this, we avoid detaching until the next attach\n * unless we are unmounting.\n */\nfunction useAnimatedPropsLifecycle(node: AnimatedProps): void {\n  const prevNodeRef = useRef<?AnimatedProps>(null);\n  const isUnmountingRef = useRef<boolean>(false);\n\n  useEffect(() => {\n    // It is ok for multiple components to call `flushQueue` because it noops\n    // if the queue is empty. When multiple animated components are mounted at\n    // the same time. Only first component flushes the queue and the others will noop.\n    NativeAnimatedHelper.API.flushQueue();\n  });\n\n  useLayoutEffect(() => {\n    isUnmountingRef.current = false;\n    return () => {\n      isUnmountingRef.current = true;\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    node.__attach();\n    if (prevNodeRef.current != null) {\n      const prevNode = prevNodeRef.current;\n      // TODO: Stop restoring default values (unless `reset` is called).\n      prevNode.__restoreDefaultValues();\n      prevNode.__detach();\n      prevNodeRef.current = null;\n    }\n    return () => {\n      if (isUnmountingRef.current) {\n        // NOTE: Do not restore default values on unmount, see D18197735.\n        node.__detach();\n      } else {\n        prevNodeRef.current = node;\n      }\n    };\n  }, [node]);\n}\n\nfunction getEventTarget<TInstance>(instance: TInstance): TInstance {\n  return typeof instance === 'object' &&\n    typeof instance?.getScrollableNode === 'function'\n    ? // $FlowFixMe[incompatible-use] - Legacy instance assumptions.\n      instance.getScrollableNode()\n    : instance;\n}\n\n// $FlowFixMe[unclear-type] - Legacy instance assumptions.\nfunction isFabricInstance(instance: any): boolean {\n  return (\n    isFabricPublicInstance(instance) ||\n    // Some components have a setNativeProps function but aren't a host component\n    // such as lists like FlatList and SectionList. These should also use\n    // forceUpdate in Fabric since setNativeProps doesn't exist on the underlying\n    // host component. This crazy hack is essentially special casing those lists and\n    // ScrollView itself to use forceUpdate in Fabric.\n    // If these components end up using forwardRef then these hacks can go away\n    // as instance would actually be the underlying host component and the above check\n    // would be sufficient.\n    isFabricPublicInstance(instance?.getNativeScrollRef?.()) ||\n    isFabricPublicInstance(\n      instance?.getScrollResponder?.()?.getNativeScrollRef?.(),\n    )\n  );\n}\n"],"mappings":"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"}