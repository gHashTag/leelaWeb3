827ac8e0b2673f3c484f9c5e2f863a16
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNativeScope = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _core = require("@sentry/core");
var _breadcrumb = require("./breadcrumb");
var _normalize = require("./utils/normalize");
var _wrapper = require("./wrapper");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ReactNativeScope = function (_Scope) {
  (0, _inherits2.default)(ReactNativeScope, _Scope);
  var _super = _createSuper(ReactNativeScope);
  function ReactNativeScope() {
    (0, _classCallCheck2.default)(this, ReactNativeScope);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(ReactNativeScope, [{
    key: "setUser",
    value: function setUser(user) {
      _wrapper.NATIVE.setUser(user);
      return (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeScope.prototype), "setUser", this).call(this, user);
    }
  }, {
    key: "setTag",
    value: function setTag(key, value) {
      _wrapper.NATIVE.setTag(key, value);
      return (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeScope.prototype), "setTag", this).call(this, key, value);
    }
  }, {
    key: "setTags",
    value: function setTags(tags) {
      Object.keys(tags).forEach(function (key) {
        _wrapper.NATIVE.setTag(key, tags[key]);
      });
      return (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeScope.prototype), "setTags", this).call(this, tags);
    }
  }, {
    key: "setExtras",
    value: function setExtras(extras) {
      Object.keys(extras).forEach(function (key) {
        _wrapper.NATIVE.setExtra(key, extras[key]);
      });
      return (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeScope.prototype), "setExtras", this).call(this, extras);
    }
  }, {
    key: "setExtra",
    value: function setExtra(key, extra) {
      _wrapper.NATIVE.setExtra(key, extra);
      return (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeScope.prototype), "setExtra", this).call(this, key, extra);
    }
  }, {
    key: "addBreadcrumb",
    value: function addBreadcrumb(breadcrumb, maxBreadcrumbs) {
      var mergedBreadcrumb = Object.assign(Object.assign({}, breadcrumb), {
        level: breadcrumb.level || _breadcrumb.DEFAULT_BREADCRUMB_LEVEL,
        data: breadcrumb.data ? (0, _normalize.convertToNormalizedObject)(breadcrumb.data) : undefined
      });
      (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeScope.prototype), "addBreadcrumb", this).call(this, mergedBreadcrumb, maxBreadcrumbs);
      var finalBreadcrumb = this._breadcrumbs[this._breadcrumbs.length - 1];
      _wrapper.NATIVE.addBreadcrumb(finalBreadcrumb);
      return this;
    }
  }, {
    key: "clearBreadcrumbs",
    value: function clearBreadcrumbs() {
      _wrapper.NATIVE.clearBreadcrumbs();
      return (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeScope.prototype), "clearBreadcrumbs", this).call(this);
    }
  }, {
    key: "setContext",
    value: function setContext(key, context) {
      _wrapper.NATIVE.setContext(key, context);
      return (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeScope.prototype), "setContext", this).call(this, key, context);
    }
  }, {
    key: "addAttachment",
    value: function addAttachment(attachment) {
      return (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeScope.prototype), "addAttachment", this).call(this, attachment);
    }
  }, {
    key: "clearAttachments",
    value: function clearAttachments() {
      return (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeScope.prototype), "clearAttachments", this).call(this);
    }
  }]);
  return ReactNativeScope;
}(_core.Scope);
exports.ReactNativeScope = ReactNativeScope;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,