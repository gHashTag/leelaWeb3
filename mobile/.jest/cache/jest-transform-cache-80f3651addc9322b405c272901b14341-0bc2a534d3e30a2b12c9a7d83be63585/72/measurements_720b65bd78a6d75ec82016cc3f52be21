cd7525595dc69235e7f74f9fb16ff870
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STALL_TOTAL_TIME = exports.STALL_LONGEST_TIME = exports.STALL_COUNT = exports.APP_START_WARM = exports.APP_START_COLD = void 0;
exports._addTracingExtensions = _addTracingExtensions;
var _core = require("@sentry/core");
var _tracing = require("./tracing");
var APP_START_WARM = 'app_start_warm';
exports.APP_START_WARM = APP_START_WARM;
var APP_START_COLD = 'app_start_cold';
exports.APP_START_COLD = APP_START_COLD;
var STALL_COUNT = 'stall_count';
exports.STALL_COUNT = STALL_COUNT;
var STALL_TOTAL_TIME = 'stall_total_time';
exports.STALL_TOTAL_TIME = STALL_TOTAL_TIME;
var STALL_LONGEST_TIME = 'stall_longest_time';
exports.STALL_LONGEST_TIME = STALL_LONGEST_TIME;
function _addTracingExtensions() {
  (0, _core.addTracingExtensions)();
  var carrier = (0, _core.getMainCarrier)();
  if (carrier.__SENTRY__) {
    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};
    if (carrier.__SENTRY__.extensions.startTransaction) {
      var originalStartTransaction = carrier.__SENTRY__.extensions.startTransaction;
      var _startTransaction = _patchStartTransaction(originalStartTransaction);
      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;
    }
  }
}
var _patchStartTransaction = function _patchStartTransaction(originalStartTransaction) {
  function _startTransaction(transactionContext, customSamplingContext) {
    if (!transactionContext.op) {
      transactionContext.op = _tracing.DEFAULT;
    }
    var transaction = originalStartTransaction.apply(this, [transactionContext, customSamplingContext]);
    var originalStartChild = transaction.startChild.bind(transaction);
    transaction.startChild = function (spanContext) {
      return originalStartChild(Object.assign(Object.assign({}, spanContext), {
        op: (spanContext === null || spanContext === void 0 ? void 0 : spanContext.op) || _tracing.DEFAULT
      }));
    };
    var reactNativeTracing = (0, _core.getCurrentHub)().getIntegration(_tracing.ReactNativeTracing);
    if (reactNativeTracing) {
      reactNativeTracing.onTransactionStart(transaction);
      var originalFinish = transaction.finish;
      transaction.finish = function (endTimestamp) {
        if (reactNativeTracing) {
          reactNativeTracing.onTransactionFinish(transaction);
        }
        return originalFinish.apply(transaction, [endTimestamp]);
      };
    }
    return transaction;
  }
  return _startTransaction;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJfdHJhY2luZyIsIkFQUF9TVEFSVF9XQVJNIiwiZXhwb3J0cyIsIkFQUF9TVEFSVF9DT0xEIiwiU1RBTExfQ09VTlQiLCJTVEFMTF9UT1RBTF9USU1FIiwiU1RBTExfTE9OR0VTVF9USU1FIiwiX2FkZFRyYWNpbmdFeHRlbnNpb25zIiwiYWRkVHJhY2luZ0V4dGVuc2lvbnMiLCJjYXJyaWVyIiwiZ2V0TWFpbkNhcnJpZXIiLCJfX1NFTlRSWV9fIiwiZXh0ZW5zaW9ucyIsInN0YXJ0VHJhbnNhY3Rpb24iLCJvcmlnaW5hbFN0YXJ0VHJhbnNhY3Rpb24iLCJfc3RhcnRUcmFuc2FjdGlvbiIsIl9wYXRjaFN0YXJ0VHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbkNvbnRleHQiLCJjdXN0b21TYW1wbGluZ0NvbnRleHQiLCJvcCIsIkRFRkFVTFQiLCJ0cmFuc2FjdGlvbiIsImFwcGx5Iiwib3JpZ2luYWxTdGFydENoaWxkIiwic3RhcnRDaGlsZCIsImJpbmQiLCJzcGFuQ29udGV4dCIsIk9iamVjdCIsImFzc2lnbiIsInJlYWN0TmF0aXZlVHJhY2luZyIsImdldEN1cnJlbnRIdWIiLCJnZXRJbnRlZ3JhdGlvbiIsIlJlYWN0TmF0aXZlVHJhY2luZyIsIm9uVHJhbnNhY3Rpb25TdGFydCIsIm9yaWdpbmFsRmluaXNoIiwiZmluaXNoIiwiZW5kVGltZXN0YW1wIiwib25UcmFuc2FjdGlvbkZpbmlzaCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9tZWFzdXJlbWVudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdWIsIFRyYW5zYWN0aW9uIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGFkZFRyYWNpbmdFeHRlbnNpb25zLCBnZXRDdXJyZW50SHViLCBnZXRNYWluQ2FycmllciB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgdHlwZSB7IEN1c3RvbVNhbXBsaW5nQ29udGV4dCwgU3BhbiwgU3BhbkNvbnRleHQsIFRyYW5zYWN0aW9uQ29udGV4dCB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuXG5pbXBvcnQgeyBERUZBVUxULCBSZWFjdE5hdGl2ZVRyYWNpbmcgfSBmcm9tICcuL3RyYWNpbmcnO1xuXG5leHBvcnQgY29uc3QgQVBQX1NUQVJUX1dBUk0gPSAnYXBwX3N0YXJ0X3dhcm0nO1xuZXhwb3J0IGNvbnN0IEFQUF9TVEFSVF9DT0xEID0gJ2FwcF9zdGFydF9jb2xkJztcblxuZXhwb3J0IGNvbnN0IFNUQUxMX0NPVU5UID0gJ3N0YWxsX2NvdW50JztcbmV4cG9ydCBjb25zdCBTVEFMTF9UT1RBTF9USU1FID0gJ3N0YWxsX3RvdGFsX3RpbWUnO1xuZXhwb3J0IGNvbnN0IFNUQUxMX0xPTkdFU1RfVElNRSA9ICdzdGFsbF9sb25nZXN0X3RpbWUnO1xuXG4vKipcbiAqIEFkZHMgUmVhY3QgTmF0aXZlJ3MgZXh0ZW5zaW9ucy4gTmVlZHMgdG8gYmUgY2FsbGVkIGJlZm9yZSBhbnkgdHJhbnNhY3Rpb25zIGFyZSBjcmVhdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gX2FkZFRyYWNpbmdFeHRlbnNpb25zKCk6IHZvaWQge1xuICBhZGRUcmFjaW5nRXh0ZW5zaW9ucygpO1xuICBjb25zdCBjYXJyaWVyID0gZ2V0TWFpbkNhcnJpZXIoKTtcbiAgaWYgKGNhcnJpZXIuX19TRU5UUllfXykge1xuICAgIGNhcnJpZXIuX19TRU5UUllfXy5leHRlbnNpb25zID0gY2Fycmllci5fX1NFTlRSWV9fLmV4dGVuc2lvbnMgfHwge307XG4gICAgaWYgKGNhcnJpZXIuX19TRU5UUllfXy5leHRlbnNpb25zLnN0YXJ0VHJhbnNhY3Rpb24pIHtcbiAgICAgIGNvbnN0IG9yaWdpbmFsU3RhcnRUcmFuc2FjdGlvbiA9IGNhcnJpZXIuX19TRU5UUllfXy5leHRlbnNpb25zLnN0YXJ0VHJhbnNhY3Rpb24gYXMgU3RhcnRUcmFuc2FjdGlvbkZ1bmN0aW9uO1xuXG4gICAgICAvKlxuICAgICAgICBPdmVyd3JpdGVzIHRoZSB0cmFuc2FjdGlvbiBzdGFydCBhbmQgZmluaXNoIHRvIHN0YXJ0IGFuZCBmaW5pc2ggc3RhbGwgdHJhY2tpbmcuXG4gICAgICAgIFByZWZlcmFibHkgaW5zdGVhZCBvZiBvdmVyd3JpdGluZyBhZGQgYSBjYWxsYmFjayBtZXRob2QgZm9yIHRoaXMgaW4gdGhlIFRyYW5zYWN0aW9uIGl0c2VsZi5cbiAgICAgICovXG4gICAgICBjb25zdCBfc3RhcnRUcmFuc2FjdGlvbiA9IF9wYXRjaFN0YXJ0VHJhbnNhY3Rpb24ob3JpZ2luYWxTdGFydFRyYW5zYWN0aW9uKTtcblxuICAgICAgY2Fycmllci5fX1NFTlRSWV9fLmV4dGVuc2lvbnMuc3RhcnRUcmFuc2FjdGlvbiA9IF9zdGFydFRyYW5zYWN0aW9uO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgdHlwZSBTdGFydFRyYW5zYWN0aW9uRnVuY3Rpb24gPSAoXG4gIHRoaXM6IEh1YixcbiAgdHJhbnNhY3Rpb25Db250ZXh0OiBUcmFuc2FjdGlvbkNvbnRleHQsXG4gIGN1c3RvbVNhbXBsaW5nQ29udGV4dD86IEN1c3RvbVNhbXBsaW5nQ29udGV4dCxcbikgPT4gVHJhbnNhY3Rpb247XG5cbi8qKlxuICogT3ZlcndyaXRlIHRoZSBzdGFydFRyYW5zYWN0aW9uIGV4dGVuc2lvbiBtZXRob2QgdG8gc3RhcnQgYW5kIGVuZCBzdGFsbCB0cmFja2luZy5cbiAqL1xuY29uc3QgX3BhdGNoU3RhcnRUcmFuc2FjdGlvbiA9IChvcmlnaW5hbFN0YXJ0VHJhbnNhY3Rpb246IFN0YXJ0VHJhbnNhY3Rpb25GdW5jdGlvbik6IFN0YXJ0VHJhbnNhY3Rpb25GdW5jdGlvbiA9PiB7XG4gIC8qKlxuICAgKiBNZXRob2QgdG8gb3ZlcndyaXRlIHdpdGhcbiAgICovXG4gIGZ1bmN0aW9uIF9zdGFydFRyYW5zYWN0aW9uKFxuICAgIHRoaXM6IEh1YixcbiAgICB0cmFuc2FjdGlvbkNvbnRleHQ6IFRyYW5zYWN0aW9uQ29udGV4dCxcbiAgICBjdXN0b21TYW1wbGluZ0NvbnRleHQ/OiBDdXN0b21TYW1wbGluZ0NvbnRleHQsXG4gICk6IFRyYW5zYWN0aW9uIHtcbiAgICAvLyBOYXRpdmUgU0RLcyByZXF1aXJlIG9wIHRvIGJlIHNldCAtIGZvciBKUyBSZWxheSBzZXRzIGBkZWZhdWx0YFxuICAgIGlmICghdHJhbnNhY3Rpb25Db250ZXh0Lm9wKSB7XG4gICAgICB0cmFuc2FjdGlvbkNvbnRleHQub3AgPSBERUZBVUxUO1xuICAgIH1cblxuICAgIGNvbnN0IHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiA9IG9yaWdpbmFsU3RhcnRUcmFuc2FjdGlvbi5hcHBseSh0aGlzLCBbdHJhbnNhY3Rpb25Db250ZXh0LCBjdXN0b21TYW1wbGluZ0NvbnRleHRdKTtcbiAgICBjb25zdCBvcmlnaW5hbFN0YXJ0Q2hpbGQ6IFRyYW5zYWN0aW9uWydzdGFydENoaWxkJ10gPSB0cmFuc2FjdGlvbi5zdGFydENoaWxkLmJpbmQodHJhbnNhY3Rpb24pO1xuICAgIHRyYW5zYWN0aW9uLnN0YXJ0Q2hpbGQgPSAoXG4gICAgICBzcGFuQ29udGV4dD86IFBpY2s8U3BhbkNvbnRleHQsIEV4Y2x1ZGU8a2V5b2YgU3BhbkNvbnRleHQsICdzYW1wbGVkJyB8ICd0cmFjZUlkJyB8ICdwYXJlbnRTcGFuSWQnPj4sXG4gICAgKTogU3BhbiA9PiB7XG4gICAgICByZXR1cm4gb3JpZ2luYWxTdGFydENoaWxkKHtcbiAgICAgICAgLi4uc3BhbkNvbnRleHQsXG4gICAgICAgIC8vIE5hdGl2ZSBTREtzIHJlcXVpcmUgb3AgdG8gYmUgc2V0XG4gICAgICAgIG9wOiBzcGFuQ29udGV4dD8ub3AgfHwgREVGQVVMVCxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCByZWFjdE5hdGl2ZVRyYWNpbmcgPSBnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oUmVhY3ROYXRpdmVUcmFjaW5nKTtcblxuICAgIGlmIChyZWFjdE5hdGl2ZVRyYWNpbmcpIHtcbiAgICAgIHJlYWN0TmF0aXZlVHJhY2luZy5vblRyYW5zYWN0aW9uU3RhcnQodHJhbnNhY3Rpb24pO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICBjb25zdCBvcmlnaW5hbEZpbmlzaCA9IHRyYW5zYWN0aW9uLmZpbmlzaDtcblxuICAgICAgdHJhbnNhY3Rpb24uZmluaXNoID0gKGVuZFRpbWVzdGFtcDogbnVtYmVyIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgIGlmIChyZWFjdE5hdGl2ZVRyYWNpbmcpIHtcbiAgICAgICAgICByZWFjdE5hdGl2ZVRyYWNpbmcub25UcmFuc2FjdGlvbkZpbmlzaCh0cmFuc2FjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3JpZ2luYWxGaW5pc2guYXBwbHkodHJhbnNhY3Rpb24sIFtlbmRUaW1lc3RhbXBdKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICB9XG5cbiAgcmV0dXJuIF9zdGFydFRyYW5zYWN0aW9uO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxJQUFBQSxLQUFBLEdBQUFDLE9BQUE7QUFHQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFFTyxJQUFNRSxjQUFjLEdBQUcsZ0JBQWdCO0FBQUNDLE9BQUEsQ0FBQUQsY0FBQSxHQUFBQSxjQUFBO0FBQ3hDLElBQU1FLGNBQWMsR0FBRyxnQkFBZ0I7QUFBQ0QsT0FBQSxDQUFBQyxjQUFBLEdBQUFBLGNBQUE7QUFFeEMsSUFBTUMsV0FBVyxHQUFHLGFBQWE7QUFBQ0YsT0FBQSxDQUFBRSxXQUFBLEdBQUFBLFdBQUE7QUFDbEMsSUFBTUMsZ0JBQWdCLEdBQUcsa0JBQWtCO0FBQUNILE9BQUEsQ0FBQUcsZ0JBQUEsR0FBQUEsZ0JBQUE7QUFDNUMsSUFBTUMsa0JBQWtCLEdBQUcsb0JBQW9CO0FBQUNKLE9BQUEsQ0FBQUksa0JBQUEsR0FBQUEsa0JBQUE7QUFLakQsU0FBVUMscUJBQXFCQSxDQUFBO0VBQ25DLElBQUFDLDBCQUFvQixHQUFFO0VBQ3RCLElBQU1DLE9BQU8sR0FBRyxJQUFBQyxvQkFBYyxHQUFFO0VBQ2hDLElBQUlELE9BQU8sQ0FBQ0UsVUFBVSxFQUFFO0lBQ3RCRixPQUFPLENBQUNFLFVBQVUsQ0FBQ0MsVUFBVSxHQUFHSCxPQUFPLENBQUNFLFVBQVUsQ0FBQ0MsVUFBVSxJQUFJLEVBQUU7SUFDbkUsSUFBSUgsT0FBTyxDQUFDRSxVQUFVLENBQUNDLFVBQVUsQ0FBQ0MsZ0JBQWdCLEVBQUU7TUFDbEQsSUFBTUMsd0JBQXdCLEdBQUdMLE9BQU8sQ0FBQ0UsVUFBVSxDQUFDQyxVQUFVLENBQUNDLGdCQUE0QztNQU0zRyxJQUFNRSxpQkFBaUIsR0FBR0Msc0JBQXNCLENBQUNGLHdCQUF3QixDQUFDO01BRTFFTCxPQUFPLENBQUNFLFVBQVUsQ0FBQ0MsVUFBVSxDQUFDQyxnQkFBZ0IsR0FBR0UsaUJBQWlCOzs7QUFHeEU7QUFXQSxJQUFNQyxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXNCQSxDQUFJRix3QkFBa0QsRUFBOEI7RUFJOUcsU0FBU0MsaUJBQWlCQSxDQUV4QkUsa0JBQXNDLEVBQ3RDQyxxQkFBNkM7SUFHN0MsSUFBSSxDQUFDRCxrQkFBa0IsQ0FBQ0UsRUFBRSxFQUFFO01BQzFCRixrQkFBa0IsQ0FBQ0UsRUFBRSxHQUFHQyxnQkFBTzs7SUFHakMsSUFBTUMsV0FBVyxHQUFnQlAsd0JBQXdCLENBQUNRLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQ0wsa0JBQWtCLEVBQUVDLHFCQUFxQixDQUFDLENBQUM7SUFDbEgsSUFBTUssa0JBQWtCLEdBQThCRixXQUFXLENBQUNHLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDSixXQUFXLENBQUM7SUFDOUZBLFdBQVcsQ0FBQ0csVUFBVSxHQUFHLFVBQ3ZCRSxXQUFtRyxFQUMzRjtNQUNSLE9BQU9ILGtCQUFrQixDQUFBSSxNQUFBLENBQUFDLE1BQUEsQ0FBQUQsTUFBQSxDQUFBQyxNQUFBLEtBQ3BCRixXQUFXO1FBRWRQLEVBQUUsRUFBRSxDQUFBTyxXQUFXLGFBQVhBLFdBQVcsdUJBQVhBLFdBQVcsQ0FBRVAsRUFBRSxLQUFJQztNQUFPLEdBQzlCO0lBQ0osQ0FBQztJQUVELElBQU1TLGtCQUFrQixHQUFHLElBQUFDLG1CQUFhLEdBQUUsQ0FBQ0MsY0FBYyxDQUFDQywyQkFBa0IsQ0FBQztJQUU3RSxJQUFJSCxrQkFBa0IsRUFBRTtNQUN0QkEsa0JBQWtCLENBQUNJLGtCQUFrQixDQUFDWixXQUFXLENBQUM7TUFHbEQsSUFBTWEsY0FBYyxHQUFHYixXQUFXLENBQUNjLE1BQU07TUFFekNkLFdBQVcsQ0FBQ2MsTUFBTSxHQUFHLFVBQUNDLFlBQWdDLEVBQUk7UUFDeEQsSUFBSVAsa0JBQWtCLEVBQUU7VUFDdEJBLGtCQUFrQixDQUFDUSxtQkFBbUIsQ0FBQ2hCLFdBQVcsQ0FBQzs7UUFHckQsT0FBT2EsY0FBYyxDQUFDWixLQUFLLENBQUNELFdBQVcsRUFBRSxDQUFDZSxZQUFZLENBQUMsQ0FBQztNQUMxRCxDQUFDOztJQUdILE9BQU9mLFdBQVc7RUFDcEI7RUFFQSxPQUFPTixpQkFBaUI7QUFDMUIsQ0FBQyJ9