{"version":3,"names":["react_1","__importStar","require","react_native_1","components_1","cons_1","react_native_size_matters_1","images_1","Gem_1","marginTop","H","W","GameBoard","_ref","_this","players","scheme","useColorScheme","imgObj","useMemo","_images_1$GameBoardIm","image","GameBoardImage","find","x","title","path","_react_native_1$Image","Image","resolveAssetSource","width","height","aspect","getPlayer","b","player","pl","plan","id","avatar","undefined","_jsxRuntime","jsx","NeomorphFlexView","viewStyle","styles","container","children","jsxs","View","style","imageContainer","curImageHeight","source","bgImage","resizeMode","gameBoardContainer","sub","rows","map","a","i","row","index","box","Gem","planNumber","exports","imageHeight","s","maxImageHeight","ms","imageTopMargin","Math","min","imageWidth","maxImageWidth","curImageWidth","ScaledSheet","create","alignItems","paddingHorizontal","paddingVertical","alignSelf","bottom","flexDirection","maxHeight","maxWidth","marginVertical","marginHorizontal","justifyContent","borderRadius","position","top","mvs"],"sources":["/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx"],"sourcesContent":["import React, { useMemo } from 'react'\n\nimport { Image, View, useColorScheme } from 'react-native'\n\nimport { NeomorphFlexView } from 'components'\nimport { H, W } from 'cons'\nimport { ScaledSheet, ms, mvs, s } from 'react-native-size-matters'\nimport { GameBoardProps } from 'types'\n\nimport { GameBoardImage } from './images'\n\nimport { Gem } from '../Gem/Gem'\n\nconst marginTop = H - W > 350 ? 20 : 0\n\nfunction GameBoard({ players }: GameBoardProps) {\n  const scheme = useColorScheme()\n\n  const imgObj = useMemo(() => {\n    const image = GameBoardImage.find((x) => {\n      return x.title === scheme\n    })?.path\n    if (image) {\n      const { width, height } = Image.resolveAssetSource(image)\n      const aspect = width / height\n      return { image, aspect }\n    } else {\n      return { image: '', aspect: 1 }\n    }\n  }, [scheme])\n\n  const getPlayer = (b: number) => {\n    const player = players.find((pl) => pl.plan === b)\n    return player\n      ? {\n          id: player.id,\n          plan: player.plan,\n          avatar: player.avatar,\n        }\n      : undefined\n  }\n\n  return (\n    // @ts-ignore\n    <NeomorphFlexView viewStyle={styles.container}>\n      <View\n        style={[\n          styles.imageContainer,\n          { width: curImageHeight * imgObj.aspect },\n        ]}\n      >\n        <Image\n          source={imgObj.image}\n          style={styles.bgImage}\n          resizeMode=\"cover\"\n        />\n        <View style={styles.gameBoardContainer}>\n          <View style={styles.sub}>\n            {rows.map((a, i) => (\n              <View style={styles.row} key={i}>\n                {a.map((b, index) => (\n                  <View key={index} style={styles.box}>\n                    <Gem player={getPlayer(b)} planNumber={b} />\n                  </View>\n                ))}\n              </View>\n            ))}\n          </View>\n        </View>\n      </View>\n    </NeomorphFlexView>\n  )\n}\n\nconst imageHeight = s(248) + s(32)\nconst maxImageHeight = ms(248, 0.5) + s(32)\nconst imageTopMargin = Math.min(ms(27, 0.5), s(27))\nconst curImageHeight = Math.min(maxImageHeight, imageHeight) + imageTopMargin\n\nconst imageWidth = s(279) + s(18)\nconst maxImageWidth = ms(279, 0.5) + s(18)\nconst curImageWidth = imageWidth >= maxImageWidth ? maxImageWidth : imageWidth\n\nconst rows = [\n  [72, 71, 70, 69, 68, 67, 66, 65, 64],\n  [55, 56, 57, 58, 59, 60, 61, 62, 63],\n  [54, 53, 52, 51, 50, 49, 48, 47, 46],\n  [37, 38, 39, 40, 41, 42, 43, 44, 45],\n  [36, 35, 34, 33, 32, 31, 30, 29, 28],\n  [19, 20, 21, 22, 23, 24, 25, 26, 27],\n  [18, 17, 16, 15, 14, 13, 12, 11, 10],\n  [1, 2, 3, 4, 5, 6, 7, 8, 9],\n]\n\nconst styles = ScaledSheet.create({\n  container: {\n    alignItems: 'center',\n    paddingHorizontal: s(20),\n    paddingVertical: s(6),\n    width: '90%',\n  },\n  sub: {\n    marginTop: imageTopMargin,\n  },\n  imageContainer: {\n    height: curImageHeight,\n    alignSelf: 'center',\n    alignItems: 'center',\n    bottom: 30,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  gameBoardContainer: {\n    width: curImageWidth,\n    height: curImageHeight,\n    marginTop,\n  },\n  box: {\n    width: s(31),\n    height: s(31),\n    maxHeight: ms(31, 0.5),\n    maxWidth: ms(31, 0.5),\n    marginVertical: s(2),\n    marginHorizontal: s(1),\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: s(31) / 2,\n  },\n  bgImage: {\n    width: '95%',\n    height: '100%',\n    position: 'absolute',\n    top: mvs(33, 1.6) - imageTopMargin,\n  },\n})\n\nexport { GameBoard }\n"],"mappings":"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"}