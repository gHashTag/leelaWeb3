e803236156731c15d3536819f2b13999
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var CommentBubbleRight_1 = require("./CommentBubbleRight");
describe('CommentBubbleRight Component', function () {
  var mockPost = {
    id: 123,
    createTime: 1628779200000,
    liked: ['user456'],
    comments: [],
    ownerId: 'user123',
    text: 'Test comment text',
    plan: 1,
    accept: true
  };
  var mockFullName = 'John Doe';
  var mockAvatar = 'avatar-url';
  var mockDate = '2023-08-12';
  var mockHandleProfile = jest.fn();
  var mockOnPress = jest.fn();
  it('renders correctly', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(CommentBubbleRight_1.CommentBubbleRight, {
        post: mockPost,
        fullName: mockFullName,
        avatar: mockAvatar,
        date: mockDate,
        handleProfile: mockHandleProfile,
        onPress: mockOnPress
      })),
      getByTestId = _ref.getByTestId,
      getByText = _ref.getByText;
    var commentBubbleContainer = getByTestId('comment-bubble-left-container');
    var commentText = getByText('Test comment text');
    var fullName = getByText('John Doe');
    var date = getByText('2023-08-12');
    expect(commentBubbleContainer).toBeTruthy();
    expect(commentText).toBeTruthy();
    expect(fullName).toBeTruthy();
    expect(date).toBeTruthy();
    react_native_1.fireEvent.press(commentBubbleContainer);
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiQ29tbWVudEJ1YmJsZVJpZ2h0XzEiLCJkZXNjcmliZSIsIm1vY2tQb3N0IiwiaWQiLCJjcmVhdGVUaW1lIiwibGlrZWQiLCJjb21tZW50cyIsIm93bmVySWQiLCJ0ZXh0IiwicGxhbiIsImFjY2VwdCIsIm1vY2tGdWxsTmFtZSIsIm1vY2tBdmF0YXIiLCJtb2NrRGF0ZSIsIm1vY2tIYW5kbGVQcm9maWxlIiwiamVzdCIsImZuIiwibW9ja09uUHJlc3MiLCJpdCIsIl9yZWYiLCJyZW5kZXIiLCJfanN4UnVudGltZSIsImpzeCIsIkNvbW1lbnRCdWJibGVSaWdodCIsInBvc3QiLCJmdWxsTmFtZSIsImF2YXRhciIsImRhdGUiLCJoYW5kbGVQcm9maWxlIiwib25QcmVzcyIsImdldEJ5VGVzdElkIiwiZ2V0QnlUZXh0IiwiY29tbWVudEJ1YmJsZUNvbnRhaW5lciIsImNvbW1lbnRUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9Db21tZW50QnViYmxlUmlnaHQvQ29tbWVudEJ1YmJsZVJpZ2h0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcblxuaW1wb3J0IHsgQ29tbWVudEJ1YmJsZVJpZ2h0IH0gZnJvbSAnLi9Db21tZW50QnViYmxlUmlnaHQnXG5cbmRlc2NyaWJlKCdDb21tZW50QnViYmxlUmlnaHQgQ29tcG9uZW50JywgKCkgPT4ge1xuICBjb25zdCBtb2NrUG9zdCA9IHtcbiAgICBpZDogMTIzLCAvLyBBZGQgaWQgcHJvcGVydHlcbiAgICBjcmVhdGVUaW1lOiAxNjI4Nzc5MjAwMDAwLFxuICAgIGxpa2VkOiBbJ3VzZXI0NTYnXSxcbiAgICBjb21tZW50czogW10sIC8vIEFkZCBjb21tZW50cyBwcm9wZXJ0eVxuICAgIG93bmVySWQ6ICd1c2VyMTIzJywgLy8gQWRkIG93bmVySWQgcHJvcGVydHlcbiAgICB0ZXh0OiAnVGVzdCBjb21tZW50IHRleHQnLFxuICAgIHBsYW46IDEsXG4gICAgYWNjZXB0OiB0cnVlLFxuICB9XG4gIGNvbnN0IG1vY2tGdWxsTmFtZSA9ICdKb2huIERvZSdcbiAgY29uc3QgbW9ja0F2YXRhciA9ICdhdmF0YXItdXJsJ1xuICBjb25zdCBtb2NrRGF0ZSA9ICcyMDIzLTA4LTEyJ1xuICBjb25zdCBtb2NrSGFuZGxlUHJvZmlsZSA9IGplc3QuZm4oKVxuICBjb25zdCBtb2NrT25QcmVzcyA9IGplc3QuZm4oKVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxDb21tZW50QnViYmxlUmlnaHRcbiAgICAgICAgcG9zdD17bW9ja1Bvc3R9XG4gICAgICAgIGZ1bGxOYW1lPXttb2NrRnVsbE5hbWV9XG4gICAgICAgIGF2YXRhcj17bW9ja0F2YXRhcn1cbiAgICAgICAgZGF0ZT17bW9ja0RhdGV9XG4gICAgICAgIGhhbmRsZVByb2ZpbGU9e21vY2tIYW5kbGVQcm9maWxlfVxuICAgICAgICBvblByZXNzPXttb2NrT25QcmVzc31cbiAgICAgIC8+LFxuICAgIClcblxuICAgIGNvbnN0IGNvbW1lbnRCdWJibGVDb250YWluZXIgPSBnZXRCeVRlc3RJZCgnY29tbWVudC1idWJibGUtbGVmdC1jb250YWluZXInKVxuICAgIGNvbnN0IGNvbW1lbnRUZXh0ID0gZ2V0QnlUZXh0KCdUZXN0IGNvbW1lbnQgdGV4dCcpXG4gICAgY29uc3QgZnVsbE5hbWUgPSBnZXRCeVRleHQoJ0pvaG4gRG9lJylcbiAgICBjb25zdCBkYXRlID0gZ2V0QnlUZXh0KCcyMDIzLTA4LTEyJylcblxuICAgIC8vIENoZWNrIGlmIHRoZSBjb21wb25lbnQgcmVuZGVyc1xuICAgIGV4cGVjdChjb21tZW50QnViYmxlQ29udGFpbmVyKS50b0JlVHJ1dGh5KClcblxuICAgIC8vIENoZWNrIGlmIHRoZSBwb3N0IHRleHQgcmVuZGVyc1xuICAgIGV4cGVjdChjb21tZW50VGV4dCkudG9CZVRydXRoeSgpXG5cbiAgICAvLyBDaGVjayBpZiB0aGUgZnVsbCBuYW1lIHJlbmRlcnNcbiAgICBleHBlY3QoZnVsbE5hbWUpLnRvQmVUcnV0aHkoKVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGRhdGUgcmVuZGVyc1xuICAgIGV4cGVjdChkYXRlKS50b0JlVHJ1dGh5KClcblxuICAgIC8vIFNpbXVsYXRlIHByZXNzIG9uIHRoZSBjb21wb25lbnRcbiAgICBmaXJlRXZlbnQucHJlc3MoY29tbWVudEJ1YmJsZUNvbnRhaW5lcilcblxuICAgIC8vIENoZWNrIGlmIHRoZSBvblByZXNzIGNhbGxiYWNrIHdhcyBjYWxsZWRcbiAgICBleHBlY3QobW9ja09uUHJlc3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsb0JBQUEsR0FBQUYsT0FBQTtBQUVBRyxRQUFRLENBQUMsOEJBQThCLEVBQUUsWUFBSztFQUM1QyxJQUFNQyxRQUFRLEdBQUc7SUFDZkMsRUFBRSxFQUFFLEdBQUc7SUFDUEMsVUFBVSxFQUFFLGFBQWE7SUFDekJDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUNsQkMsUUFBUSxFQUFFLEVBQUU7SUFDWkMsT0FBTyxFQUFFLFNBQVM7SUFDbEJDLElBQUksRUFBRSxtQkFBbUI7SUFDekJDLElBQUksRUFBRSxDQUFDO0lBQ1BDLE1BQU0sRUFBRTtHQUNUO0VBQ0QsSUFBTUMsWUFBWSxHQUFHLFVBQVU7RUFDL0IsSUFBTUMsVUFBVSxHQUFHLFlBQVk7RUFDL0IsSUFBTUMsUUFBUSxHQUFHLFlBQVk7RUFDN0IsSUFBTUMsaUJBQWlCLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0VBQ25DLElBQU1DLFdBQVcsR0FBR0YsSUFBSSxDQUFDQyxFQUFFLEVBQUU7RUFFN0JFLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxZQUFLO0lBQzNCLElBQUFDLElBQUEsR0FBbUMsSUFBQXBCLGNBQUEsQ0FBQXFCLE1BQU0sRUFDdkMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUN0QixvQkFBQSxDQUFBdUIsa0JBQWtCO1FBQ2pCQyxJQUFJLEVBQUV0QixRQUFTO1FBQ2Z1QixRQUFRLEVBQUVkLFlBQWE7UUFDdkJlLE1BQU0sRUFBRWQsVUFBVztRQUNuQmUsSUFBSSxFQUFFZCxRQUFTO1FBQ2ZlLGFBQWEsRUFBRWQsaUJBQWtCO1FBQ2pDZSxPQUFPLEVBQUVaO01BQVksRUFDckIsQ0FDSDtNQVRPYSxXQUFXLEdBQUFYLElBQUEsQ0FBWFcsV0FBVztNQUFFQyxTQUFTLEdBQUFaLElBQUEsQ0FBVFksU0FBUztJQVc5QixJQUFNQyxzQkFBc0IsR0FBR0YsV0FBVyxDQUFDLCtCQUErQixDQUFDO0lBQzNFLElBQU1HLFdBQVcsR0FBR0YsU0FBUyxDQUFDLG1CQUFtQixDQUFDO0lBQ2xELElBQU1OLFFBQVEsR0FBR00sU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUN0QyxJQUFNSixJQUFJLEdBQUdJLFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFHcENHLE1BQU0sQ0FBQ0Ysc0JBQXNCLENBQUMsQ0FBQ0csVUFBVSxFQUFFO0lBRzNDRCxNQUFNLENBQUNELFdBQVcsQ0FBQyxDQUFDRSxVQUFVLEVBQUU7SUFHaENELE1BQU0sQ0FBQ1QsUUFBUSxDQUFDLENBQUNVLFVBQVUsRUFBRTtJQUc3QkQsTUFBTSxDQUFDUCxJQUFJLENBQUMsQ0FBQ1EsVUFBVSxFQUFFO0lBR3pCcEMsY0FBQSxDQUFBcUMsU0FBUyxDQUFDQyxLQUFLLENBQUNMLHNCQUFzQixDQUFDO0lBR3ZDRSxNQUFNLENBQUNqQixXQUFXLENBQUMsQ0FBQ3FCLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUM5QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==