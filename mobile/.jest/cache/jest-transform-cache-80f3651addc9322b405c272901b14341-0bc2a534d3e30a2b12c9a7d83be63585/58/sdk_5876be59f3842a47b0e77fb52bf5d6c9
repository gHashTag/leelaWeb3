e68b4ecdab53462ea6206758a6c7dee0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.captureUserFeedback = captureUserFeedback;
exports.close = close;
exports.configureScope = configureScope;
exports.flush = flush;
exports.init = init;
exports.nativeCrash = nativeCrash;
exports.setDist = setDist;
exports.setRelease = setRelease;
exports.withScope = withScope;
exports.wrap = wrap;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _integrations = require("@sentry/integrations");
var _react = require("@sentry/react");
var _utils = require("@sentry/utils");
var React = _interopRequireWildcard(require("react"));
var _client = require("./client");
var _integrations2 = require("./integrations");
var _rewriteframes = require("./integrations/rewriteframes");
var _screenshot = require("./integrations/screenshot");
var _viewhierarchy = require("./integrations/viewhierarchy");
var _scope = require("./scope");
var _touchevents = require("./touchevents");
var _tracing = require("./tracing");
var _native = require("./transports/native");
var _TextEncoder = require("./transports/TextEncoder");
var _safe = require("./utils/safe");
var _wrapper = require("./wrapper");
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "/Users/playra/LeelaAiWeb3/node_modules/@sentry/react-native/dist/js/sdk.js";
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var IGNORED_DEFAULT_INTEGRATIONS = ['GlobalHandlers', 'TryCatch'];
var DEFAULT_OPTIONS = {
  enableNativeCrashHandling: true,
  enableNativeNagger: true,
  autoInitializeNativeSdk: true,
  enableAutoPerformanceTracing: true,
  enableWatchdogTerminationTracking: true,
  patchGlobalPromise: true,
  transportOptions: {
    textEncoder: (0, _TextEncoder.makeUtf8TextEncoder)()
  },
  sendClientReports: true,
  maxQueueSize: _native.DEFAULT_BUFFER_SIZE,
  attachStacktrace: true,
  enableCaptureFailedRequests: false
};
function init(passedOptions) {
  var _a, _b, _c, _d;
  var reactNativeHub = new _core.Hub(undefined, new _scope.ReactNativeScope());
  (0, _core.makeMain)(reactNativeHub);
  var maxQueueSize = (_c = (_a = passedOptions.maxQueueSize) !== null && _a !== void 0 ? _a : (_b = passedOptions.transportOptions) === null || _b === void 0 ? void 0 : _b.bufferSize) !== null && _c !== void 0 ? _c : DEFAULT_OPTIONS.maxQueueSize;
  var enableNative = passedOptions.enableNative === undefined || passedOptions.enableNative ? _wrapper.NATIVE.isNativeAvailable() : false;
  var options = Object.assign(Object.assign(Object.assign({}, DEFAULT_OPTIONS), passedOptions), {
    enableNative: enableNative,
    transport: passedOptions.transport || (0, _native.makeNativeTransportFactory)({
      enableNative: enableNative
    }) || _react.makeFetchTransport,
    transportOptions: Object.assign(Object.assign(Object.assign({}, DEFAULT_OPTIONS.transportOptions), (_d = passedOptions.transportOptions) !== null && _d !== void 0 ? _d : {}), {
      bufferSize: maxQueueSize
    }),
    maxQueueSize: maxQueueSize,
    integrations: [],
    stackParser: (0, _utils.stackParserFromStackParserOptions)(passedOptions.stackParser || _react.defaultStackParser),
    beforeBreadcrumb: (0, _safe.safeFactory)(passedOptions.beforeBreadcrumb, {
      loggerMessage: 'The beforeBreadcrumb threw an error'
    }),
    initialScope: (0, _safe.safeFactory)(passedOptions.initialScope, {
      loggerMessage: 'The initialScope threw an error'
    }),
    tracesSampler: (0, _safe.safeTracesSampler)(passedOptions.tracesSampler)
  });
  var defaultIntegrations = passedOptions.defaultIntegrations || [];
  if (passedOptions.defaultIntegrations === undefined) {
    defaultIntegrations.push(new _integrations2.ModulesLoader());
    defaultIntegrations.push(new _integrations2.ReactNativeErrorHandlers({
      patchGlobalPromise: options.patchGlobalPromise
    }));
    defaultIntegrations.push(new _integrations2.Release());
    defaultIntegrations.push.apply(defaultIntegrations, (0, _toConsumableArray2.default)(_react.defaultIntegrations.filter(function (i) {
      return !IGNORED_DEFAULT_INTEGRATIONS.includes(i.name);
    })));
    defaultIntegrations.push(new _integrations2.EventOrigin());
    defaultIntegrations.push(new _integrations2.SdkInfo());
    defaultIntegrations.push(new _integrations2.ReactNativeInfo());
    if (__DEV__) {
      defaultIntegrations.push(new _integrations2.DebugSymbolicator());
    }
    defaultIntegrations.push((0, _rewriteframes.createReactNativeRewriteFrames)());
    if (options.enableNative) {
      defaultIntegrations.push(new _integrations2.DeviceContext());
    }
    if ((0, _core.hasTracingEnabled)(options) && options.enableAutoPerformanceTracing) {
      defaultIntegrations.push(new _tracing.ReactNativeTracing());
    }
    if (options.attachScreenshot) {
      defaultIntegrations.push(new _screenshot.Screenshot());
    }
    if (options.attachViewHierarchy) {
      defaultIntegrations.push(new _viewhierarchy.ViewHierarchy());
    }
    if (options.enableCaptureFailedRequests) {
      defaultIntegrations.push(new _integrations.HttpClient());
    }
    if (options._experiments && typeof options._experiments.profilesSampleRate === 'number') {
      defaultIntegrations.push(new _integrations2.HermesProfiling());
    }
  }
  options.integrations = (0, _core.getIntegrationsToSetup)({
    integrations: (0, _safe.safeFactory)(passedOptions.integrations, {
      loggerMessage: 'The integrations threw an error'
    }),
    defaultIntegrations: defaultIntegrations
  });
  (0, _core.initAndBind)(_client.ReactNativeClient, options);
}
function wrap(RootComponent, options) {
  var _this = this;
  var _a, _b;
  var tracingIntegration = (0, _react.getCurrentHub)().getIntegration(_tracing.ReactNativeTracing);
  if (tracingIntegration) {
    tracingIntegration.useAppStartWithProfiler = true;
  }
  var profilerProps = Object.assign(Object.assign({}, (_a = options === null || options === void 0 ? void 0 : options.profilerProps) !== null && _a !== void 0 ? _a : {}), {
    name: (_b = RootComponent.displayName) !== null && _b !== void 0 ? _b : 'Root'
  });
  var RootApp = function RootApp(appProps) {
    var _a;
    return (0, _jsxRuntime.jsx)(_touchevents.TouchEventBoundary, Object.assign({}, (_a = options === null || options === void 0 ? void 0 : options.touchEventBoundaryProps) !== null && _a !== void 0 ? _a : {}, {
      children: (0, _jsxRuntime.jsx)(_tracing.ReactNativeProfiler, Object.assign({}, profilerProps, {
        children: (0, _jsxRuntime.jsx)(RootComponent, Object.assign({}, appProps))
      }))
    }));
  };
  return RootApp;
}
function setRelease(release) {
  (0, _core.setExtra)('__sentry_release', release);
}
function setDist(dist) {
  (0, _core.setExtra)('__sentry_dist', dist);
}
function nativeCrash() {
  var client = (0, _react.getCurrentHub)().getClient();
  if (client) {
    client.nativeCrash();
  }
}
function flush() {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
    try {
      var client = (0, _react.getCurrentHub)().getClient();
      if (client) {
        var result = yield client.flush();
        return result;
      }
    } catch (_) {}
    _utils.logger.error('Failed to flush the event queue.');
    return false;
  });
}
function close() {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
    try {
      var client = (0, _react.getCurrentHub)().getClient();
      if (client) {
        yield client.close();
      }
    } catch (e) {
      _utils.logger.error('Failed to close the SDK');
    }
  });
}
function captureUserFeedback(feedback) {
  var _a;
  (_a = (0, _react.getCurrentHub)().getClient()) === null || _a === void 0 ? void 0 : _a.captureUserFeedback(feedback);
}
function withScope(callback) {
  var safeCallback = function safeCallback(scope) {
    try {
      callback(scope);
    } catch (e) {
      _utils.logger.error('Error while running withScope callback', e);
    }
  };
  (0, _react.getCurrentHub)().withScope(safeCallback);
}
function configureScope(callback) {
  var safeCallback = function safeCallback(scope) {
    try {
      callback(scope);
    } catch (e) {
      _utils.logger.error('Error while running configureScope callback', e);
    }
  };
  (0, _react.getCurrentHub)().configureScope(safeCallback);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJfaW50ZWdyYXRpb25zIiwiX3JlYWN0IiwiX3V0aWxzIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9jbGllbnQiLCJfaW50ZWdyYXRpb25zMiIsIl9yZXdyaXRlZnJhbWVzIiwiX3NjcmVlbnNob3QiLCJfdmlld2hpZXJhcmNoeSIsIl9zY29wZSIsIl90b3VjaGV2ZW50cyIsIl90cmFjaW5nIiwiX25hdGl2ZSIsIl9UZXh0RW5jb2RlciIsIl9zYWZlIiwiX3dyYXBwZXIiLCJfanN4UnVudGltZSIsIl9qc3hGaWxlTmFtZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJJR05PUkVEX0RFRkFVTFRfSU5URUdSQVRJT05TIiwiREVGQVVMVF9PUFRJT05TIiwiZW5hYmxlTmF0aXZlQ3Jhc2hIYW5kbGluZyIsImVuYWJsZU5hdGl2ZU5hZ2dlciIsImF1dG9Jbml0aWFsaXplTmF0aXZlU2RrIiwiZW5hYmxlQXV0b1BlcmZvcm1hbmNlVHJhY2luZyIsImVuYWJsZVdhdGNoZG9nVGVybWluYXRpb25UcmFja2luZyIsInBhdGNoR2xvYmFsUHJvbWlzZSIsInRyYW5zcG9ydE9wdGlvbnMiLCJ0ZXh0RW5jb2RlciIsIm1ha2VVdGY4VGV4dEVuY29kZXIiLCJzZW5kQ2xpZW50UmVwb3J0cyIsIm1heFF1ZXVlU2l6ZSIsIkRFRkFVTFRfQlVGRkVSX1NJWkUiLCJhdHRhY2hTdGFja3RyYWNlIiwiZW5hYmxlQ2FwdHVyZUZhaWxlZFJlcXVlc3RzIiwiaW5pdCIsInBhc3NlZE9wdGlvbnMiLCJyZWFjdE5hdGl2ZUh1YiIsIkh1YiIsInVuZGVmaW5lZCIsIlJlYWN0TmF0aXZlU2NvcGUiLCJtYWtlTWFpbiIsIl9jIiwiX2EiLCJfYiIsImJ1ZmZlclNpemUiLCJlbmFibGVOYXRpdmUiLCJOQVRJVkUiLCJpc05hdGl2ZUF2YWlsYWJsZSIsIm9wdGlvbnMiLCJhc3NpZ24iLCJ0cmFuc3BvcnQiLCJtYWtlTmF0aXZlVHJhbnNwb3J0RmFjdG9yeSIsIm1ha2VGZXRjaFRyYW5zcG9ydCIsIl9kIiwiaW50ZWdyYXRpb25zIiwic3RhY2tQYXJzZXIiLCJzdGFja1BhcnNlckZyb21TdGFja1BhcnNlck9wdGlvbnMiLCJkZWZhdWx0U3RhY2tQYXJzZXIiLCJiZWZvcmVCcmVhZGNydW1iIiwic2FmZUZhY3RvcnkiLCJsb2dnZXJNZXNzYWdlIiwiaW5pdGlhbFNjb3BlIiwidHJhY2VzU2FtcGxlciIsInNhZmVUcmFjZXNTYW1wbGVyIiwiZGVmYXVsdEludGVncmF0aW9ucyIsInB1c2giLCJNb2R1bGVzTG9hZGVyIiwiUmVhY3ROYXRpdmVFcnJvckhhbmRsZXJzIiwiUmVsZWFzZSIsImFwcGx5IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsInJlYWN0RGVmYXVsdEludGVncmF0aW9ucyIsImZpbHRlciIsImkiLCJpbmNsdWRlcyIsIm5hbWUiLCJFdmVudE9yaWdpbiIsIlNka0luZm8iLCJSZWFjdE5hdGl2ZUluZm8iLCJfX0RFVl9fIiwiRGVidWdTeW1ib2xpY2F0b3IiLCJjcmVhdGVSZWFjdE5hdGl2ZVJld3JpdGVGcmFtZXMiLCJEZXZpY2VDb250ZXh0IiwiaGFzVHJhY2luZ0VuYWJsZWQiLCJSZWFjdE5hdGl2ZVRyYWNpbmciLCJhdHRhY2hTY3JlZW5zaG90IiwiU2NyZWVuc2hvdCIsImF0dGFjaFZpZXdIaWVyYXJjaHkiLCJWaWV3SGllcmFyY2h5IiwiSHR0cENsaWVudCIsIl9leHBlcmltZW50cyIsInByb2ZpbGVzU2FtcGxlUmF0ZSIsIkhlcm1lc1Byb2ZpbGluZyIsImdldEludGVncmF0aW9uc1RvU2V0dXAiLCJpbml0QW5kQmluZCIsIlJlYWN0TmF0aXZlQ2xpZW50Iiwid3JhcCIsIlJvb3RDb21wb25lbnQiLCJfdGhpcyIsInRyYWNpbmdJbnRlZ3JhdGlvbiIsImdldEN1cnJlbnRIdWIiLCJnZXRJbnRlZ3JhdGlvbiIsInVzZUFwcFN0YXJ0V2l0aFByb2ZpbGVyIiwicHJvZmlsZXJQcm9wcyIsImRpc3BsYXlOYW1lIiwiUm9vdEFwcCIsImFwcFByb3BzIiwianN4IiwiVG91Y2hFdmVudEJvdW5kYXJ5IiwidG91Y2hFdmVudEJvdW5kYXJ5UHJvcHMiLCJjaGlsZHJlbiIsIlJlYWN0TmF0aXZlUHJvZmlsZXIiLCJzZXRSZWxlYXNlIiwicmVsZWFzZSIsInNldEV4dHJhIiwic2V0RGlzdCIsImRpc3QiLCJuYXRpdmVDcmFzaCIsImNsaWVudCIsImdldENsaWVudCIsImZsdXNoIiwicmVzdWx0IiwiXyIsImxvZ2dlciIsImVycm9yIiwiY2xvc2UiLCJlIiwiY2FwdHVyZVVzZXJGZWVkYmFjayIsImZlZWRiYWNrIiwid2l0aFNjb3BlIiwiY2FsbGJhY2siLCJzYWZlQ2FsbGJhY2siLCJzY29wZSIsImNvbmZpZ3VyZVNjb3BlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2pzL3Nkay50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBTY29wZSB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBnZXRJbnRlZ3JhdGlvbnNUb1NldHVwLCBoYXNUcmFjaW5nRW5hYmxlZCwgSHViLCBpbml0QW5kQmluZCwgbWFrZU1haW4sIHNldEV4dHJhIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAc2VudHJ5L2ludGVncmF0aW9ucyc7XG5pbXBvcnQge1xuICBkZWZhdWx0SW50ZWdyYXRpb25zIGFzIHJlYWN0RGVmYXVsdEludGVncmF0aW9ucyxcbiAgZGVmYXVsdFN0YWNrUGFyc2VyLFxuICBnZXRDdXJyZW50SHViLFxuICBtYWtlRmV0Y2hUcmFuc3BvcnQsXG59IGZyb20gJ0BzZW50cnkvcmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBJbnRlZ3JhdGlvbiwgVXNlckZlZWRiYWNrIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBsb2dnZXIsIHN0YWNrUGFyc2VyRnJvbVN0YWNrUGFyc2VyT3B0aW9ucyB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBSZWFjdE5hdGl2ZUNsaWVudCB9IGZyb20gJy4vY2xpZW50JztcbmltcG9ydCB7XG4gIERlYnVnU3ltYm9saWNhdG9yLFxuICBEZXZpY2VDb250ZXh0LFxuICBFdmVudE9yaWdpbixcbiAgSGVybWVzUHJvZmlsaW5nLFxuICBNb2R1bGVzTG9hZGVyLFxuICBSZWFjdE5hdGl2ZUVycm9ySGFuZGxlcnMsXG4gIFJlYWN0TmF0aXZlSW5mbyxcbiAgUmVsZWFzZSxcbiAgU2RrSW5mbyxcbn0gZnJvbSAnLi9pbnRlZ3JhdGlvbnMnO1xuaW1wb3J0IHsgY3JlYXRlUmVhY3ROYXRpdmVSZXdyaXRlRnJhbWVzIH0gZnJvbSAnLi9pbnRlZ3JhdGlvbnMvcmV3cml0ZWZyYW1lcyc7XG5pbXBvcnQgeyBTY3JlZW5zaG90IH0gZnJvbSAnLi9pbnRlZ3JhdGlvbnMvc2NyZWVuc2hvdCc7XG5pbXBvcnQgeyBWaWV3SGllcmFyY2h5IH0gZnJvbSAnLi9pbnRlZ3JhdGlvbnMvdmlld2hpZXJhcmNoeSc7XG5pbXBvcnQgdHlwZSB7IFJlYWN0TmF0aXZlQ2xpZW50T3B0aW9ucywgUmVhY3ROYXRpdmVPcHRpb25zLCBSZWFjdE5hdGl2ZVdyYXBwZXJPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IFJlYWN0TmF0aXZlU2NvcGUgfSBmcm9tICcuL3Njb3BlJztcbmltcG9ydCB7IFRvdWNoRXZlbnRCb3VuZGFyeSB9IGZyb20gJy4vdG91Y2hldmVudHMnO1xuaW1wb3J0IHsgUmVhY3ROYXRpdmVQcm9maWxlciwgUmVhY3ROYXRpdmVUcmFjaW5nIH0gZnJvbSAnLi90cmFjaW5nJztcbmltcG9ydCB7IERFRkFVTFRfQlVGRkVSX1NJWkUsIG1ha2VOYXRpdmVUcmFuc3BvcnRGYWN0b3J5IH0gZnJvbSAnLi90cmFuc3BvcnRzL25hdGl2ZSc7XG5pbXBvcnQgeyBtYWtlVXRmOFRleHRFbmNvZGVyIH0gZnJvbSAnLi90cmFuc3BvcnRzL1RleHRFbmNvZGVyJztcbmltcG9ydCB7IHNhZmVGYWN0b3J5LCBzYWZlVHJhY2VzU2FtcGxlciB9IGZyb20gJy4vdXRpbHMvc2FmZSc7XG5pbXBvcnQgeyBOQVRJVkUgfSBmcm9tICcuL3dyYXBwZXInO1xuXG5jb25zdCBJR05PUkVEX0RFRkFVTFRfSU5URUdSQVRJT05TID0gW1xuICAnR2xvYmFsSGFuZGxlcnMnLCAvLyBXZSB3aWxsIHVzZSB0aGUgcmVhY3QtbmF0aXZlIGludGVybmFsIGhhbmRsZXJzXG4gICdUcnlDYXRjaCcsIC8vIFdlIGRvbid0IG5lZWQgdGhpc1xuXTtcbmNvbnN0IERFRkFVTFRfT1BUSU9OUzogUmVhY3ROYXRpdmVPcHRpb25zID0ge1xuICBlbmFibGVOYXRpdmVDcmFzaEhhbmRsaW5nOiB0cnVlLFxuICBlbmFibGVOYXRpdmVOYWdnZXI6IHRydWUsXG4gIGF1dG9Jbml0aWFsaXplTmF0aXZlU2RrOiB0cnVlLFxuICBlbmFibGVBdXRvUGVyZm9ybWFuY2VUcmFjaW5nOiB0cnVlLFxuICBlbmFibGVXYXRjaGRvZ1Rlcm1pbmF0aW9uVHJhY2tpbmc6IHRydWUsXG4gIHBhdGNoR2xvYmFsUHJvbWlzZTogdHJ1ZSxcbiAgdHJhbnNwb3J0T3B0aW9uczoge1xuICAgIHRleHRFbmNvZGVyOiBtYWtlVXRmOFRleHRFbmNvZGVyKCksXG4gIH0sXG4gIHNlbmRDbGllbnRSZXBvcnRzOiB0cnVlLFxuICBtYXhRdWV1ZVNpemU6IERFRkFVTFRfQlVGRkVSX1NJWkUsXG4gIGF0dGFjaFN0YWNrdHJhY2U6IHRydWUsXG4gIGVuYWJsZUNhcHR1cmVGYWlsZWRSZXF1ZXN0czogZmFsc2UsXG59O1xuXG4vKipcbiAqIEluaXRzIHRoZSBTREsgYW5kIHJldHVybnMgdGhlIGZpbmFsIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KHBhc3NlZE9wdGlvbnM6IFJlYWN0TmF0aXZlT3B0aW9ucyk6IHZvaWQge1xuICBjb25zdCByZWFjdE5hdGl2ZUh1YiA9IG5ldyBIdWIodW5kZWZpbmVkLCBuZXcgUmVhY3ROYXRpdmVTY29wZSgpKTtcbiAgbWFrZU1haW4ocmVhY3ROYXRpdmVIdWIpO1xuXG4gIGNvbnN0IG1heFF1ZXVlU2l6ZSA9IHBhc3NlZE9wdGlvbnMubWF4UXVldWVTaXplXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgPz8gcGFzc2VkT3B0aW9ucy50cmFuc3BvcnRPcHRpb25zPy5idWZmZXJTaXplXG4gICAgPz8gREVGQVVMVF9PUFRJT05TLm1heFF1ZXVlU2l6ZTtcblxuICBjb25zdCBlbmFibGVOYXRpdmUgPSBwYXNzZWRPcHRpb25zLmVuYWJsZU5hdGl2ZSA9PT0gdW5kZWZpbmVkIHx8IHBhc3NlZE9wdGlvbnMuZW5hYmxlTmF0aXZlXG4gICAgPyBOQVRJVkUuaXNOYXRpdmVBdmFpbGFibGUoKVxuICAgIDogZmFsc2U7XG4gIGNvbnN0IG9wdGlvbnM6IFJlYWN0TmF0aXZlQ2xpZW50T3B0aW9ucyA9IHtcbiAgICAuLi5ERUZBVUxUX09QVElPTlMsXG4gICAgLi4ucGFzc2VkT3B0aW9ucyxcbiAgICBlbmFibGVOYXRpdmUsXG4gICAgLy8gSWYgY3VzdG9tIHRyYW5zcG9ydCBmYWN0b3J5IGZhaWxzIHRoZSBTREsgd29uJ3QgaW5pdGlhbGl6ZVxuICAgIHRyYW5zcG9ydDogcGFzc2VkT3B0aW9ucy50cmFuc3BvcnRcbiAgICAgIHx8IG1ha2VOYXRpdmVUcmFuc3BvcnRGYWN0b3J5KHtcbiAgICAgICAgZW5hYmxlTmF0aXZlLFxuICAgICAgfSlcbiAgICAgIHx8IG1ha2VGZXRjaFRyYW5zcG9ydCxcbiAgICB0cmFuc3BvcnRPcHRpb25zOiB7XG4gICAgICAuLi5ERUZBVUxUX09QVElPTlMudHJhbnNwb3J0T3B0aW9ucyxcbiAgICAgIC4uLihwYXNzZWRPcHRpb25zLnRyYW5zcG9ydE9wdGlvbnMgPz8ge30pLFxuICAgICAgYnVmZmVyU2l6ZTogbWF4UXVldWVTaXplLFxuICAgIH0sXG4gICAgbWF4UXVldWVTaXplLFxuICAgIGludGVncmF0aW9uczogW10sXG4gICAgc3RhY2tQYXJzZXI6IHN0YWNrUGFyc2VyRnJvbVN0YWNrUGFyc2VyT3B0aW9ucyhwYXNzZWRPcHRpb25zLnN0YWNrUGFyc2VyIHx8IGRlZmF1bHRTdGFja1BhcnNlciksXG4gICAgYmVmb3JlQnJlYWRjcnVtYjogc2FmZUZhY3RvcnkocGFzc2VkT3B0aW9ucy5iZWZvcmVCcmVhZGNydW1iLCB7IGxvZ2dlck1lc3NhZ2U6ICdUaGUgYmVmb3JlQnJlYWRjcnVtYiB0aHJldyBhbiBlcnJvcicgfSksXG4gICAgaW5pdGlhbFNjb3BlOiBzYWZlRmFjdG9yeShwYXNzZWRPcHRpb25zLmluaXRpYWxTY29wZSwgeyBsb2dnZXJNZXNzYWdlOiAnVGhlIGluaXRpYWxTY29wZSB0aHJldyBhbiBlcnJvcicgfSksXG4gICAgdHJhY2VzU2FtcGxlcjogc2FmZVRyYWNlc1NhbXBsZXIocGFzc2VkT3B0aW9ucy50cmFjZXNTYW1wbGVyKSxcbiAgfTtcblxuICBjb25zdCBkZWZhdWx0SW50ZWdyYXRpb25zOiBJbnRlZ3JhdGlvbltdID0gcGFzc2VkT3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zIHx8IFtdO1xuICBpZiAocGFzc2VkT3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0SW50ZWdyYXRpb25zLnB1c2gobmV3IE1vZHVsZXNMb2FkZXIoKSk7XG4gICAgZGVmYXVsdEludGVncmF0aW9ucy5wdXNoKG5ldyBSZWFjdE5hdGl2ZUVycm9ySGFuZGxlcnMoe1xuICAgICAgcGF0Y2hHbG9iYWxQcm9taXNlOiBvcHRpb25zLnBhdGNoR2xvYmFsUHJvbWlzZSxcbiAgICB9KSk7XG4gICAgZGVmYXVsdEludGVncmF0aW9ucy5wdXNoKG5ldyBSZWxlYXNlKCkpO1xuICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnMucHVzaCguLi5bXG4gICAgICAuLi5yZWFjdERlZmF1bHRJbnRlZ3JhdGlvbnMuZmlsdGVyKFxuICAgICAgICAoaSkgPT4gIUlHTk9SRURfREVGQVVMVF9JTlRFR1JBVElPTlMuaW5jbHVkZXMoaS5uYW1lKVxuICAgICAgKSxcbiAgICBdKTtcblxuICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnMucHVzaChuZXcgRXZlbnRPcmlnaW4oKSk7XG4gICAgZGVmYXVsdEludGVncmF0aW9ucy5wdXNoKG5ldyBTZGtJbmZvKCkpO1xuICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnMucHVzaChuZXcgUmVhY3ROYXRpdmVJbmZvKCkpO1xuXG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnMucHVzaChuZXcgRGVidWdTeW1ib2xpY2F0b3IoKSk7XG4gICAgfVxuXG4gICAgZGVmYXVsdEludGVncmF0aW9ucy5wdXNoKGNyZWF0ZVJlYWN0TmF0aXZlUmV3cml0ZUZyYW1lcygpKTtcbiAgICBpZiAob3B0aW9ucy5lbmFibGVOYXRpdmUpIHtcbiAgICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnMucHVzaChuZXcgRGV2aWNlQ29udGV4dCgpKTtcbiAgICB9XG4gICAgaWYgKGhhc1RyYWNpbmdFbmFibGVkKG9wdGlvbnMpICYmIG9wdGlvbnMuZW5hYmxlQXV0b1BlcmZvcm1hbmNlVHJhY2luZykge1xuICAgICAgZGVmYXVsdEludGVncmF0aW9ucy5wdXNoKG5ldyBSZWFjdE5hdGl2ZVRyYWNpbmcoKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmF0dGFjaFNjcmVlbnNob3QpIHtcbiAgICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnMucHVzaChuZXcgU2NyZWVuc2hvdCgpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuYXR0YWNoVmlld0hpZXJhcmNoeSkge1xuICAgICAgZGVmYXVsdEludGVncmF0aW9ucy5wdXNoKG5ldyBWaWV3SGllcmFyY2h5KCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5lbmFibGVDYXB0dXJlRmFpbGVkUmVxdWVzdHMpIHtcbiAgICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnMucHVzaChuZXcgSHR0cENsaWVudCgpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuX2V4cGVyaW1lbnRzICYmIHR5cGVvZiBvcHRpb25zLl9leHBlcmltZW50cy5wcm9maWxlc1NhbXBsZVJhdGUgPT09ICdudW1iZXInKSB7XG4gICAgICBkZWZhdWx0SW50ZWdyYXRpb25zLnB1c2gobmV3IEhlcm1lc1Byb2ZpbGluZygpKTtcbiAgICB9XG4gIH1cblxuICBvcHRpb25zLmludGVncmF0aW9ucyA9IGdldEludGVncmF0aW9uc1RvU2V0dXAoe1xuICAgIGludGVncmF0aW9uczogc2FmZUZhY3RvcnkocGFzc2VkT3B0aW9ucy5pbnRlZ3JhdGlvbnMsIHsgbG9nZ2VyTWVzc2FnZTogJ1RoZSBpbnRlZ3JhdGlvbnMgdGhyZXcgYW4gZXJyb3InIH0pLFxuICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnMsXG4gIH0pO1xuICBpbml0QW5kQmluZChSZWFjdE5hdGl2ZUNsaWVudCwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogSW5pdHMgdGhlIFNlbnRyeSBSZWFjdCBOYXRpdmUgU0RLIHdpdGggYXV0b21hdGljIGluc3RydW1lbnRhdGlvbiBhbmQgd3JhcHBlZCBmZWF0dXJlcy5cbiAqL1xuLy8gRGVwcmVjYXRlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9jb21taXQvZjFiMjU1OTE4OTA5NzhhOTJjNjEwY2U1NzVlYTJiYTJiYmRlNmE4OVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG5leHBvcnQgZnVuY3Rpb24gd3JhcDxQIGV4dGVuZHMgSlNYLkludHJpbnNpY0F0dHJpYnV0ZXM+KFxuICBSb290Q29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPFA+LFxuICBvcHRpb25zPzogUmVhY3ROYXRpdmVXcmFwcGVyT3B0aW9uc1xuKTogUmVhY3QuQ29tcG9uZW50VHlwZTxQPiB7XG4gIGNvbnN0IHRyYWNpbmdJbnRlZ3JhdGlvbiA9IGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihSZWFjdE5hdGl2ZVRyYWNpbmcpO1xuICBpZiAodHJhY2luZ0ludGVncmF0aW9uKSB7XG4gICAgdHJhY2luZ0ludGVncmF0aW9uLnVzZUFwcFN0YXJ0V2l0aFByb2ZpbGVyID0gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHByb2ZpbGVyUHJvcHMgPSB7XG4gICAgLi4uKG9wdGlvbnM/LnByb2ZpbGVyUHJvcHMgPz8ge30pLFxuICAgIG5hbWU6IFJvb3RDb21wb25lbnQuZGlzcGxheU5hbWUgPz8gJ1Jvb3QnLFxuICB9O1xuXG4gIGNvbnN0IFJvb3RBcHA6IFJlYWN0LkZDPFA+ID0gKGFwcFByb3BzKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUb3VjaEV2ZW50Qm91bmRhcnkgey4uLihvcHRpb25zPy50b3VjaEV2ZW50Qm91bmRhcnlQcm9wcyA/PyB7fSl9PlxuICAgICAgICA8UmVhY3ROYXRpdmVQcm9maWxlciB7Li4ucHJvZmlsZXJQcm9wc30+XG4gICAgICAgICAgPFJvb3RDb21wb25lbnQgey4uLmFwcFByb3BzfSAvPlxuICAgICAgICA8L1JlYWN0TmF0aXZlUHJvZmlsZXI+XG4gICAgICA8L1RvdWNoRXZlbnRCb3VuZGFyeT5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBSb290QXBwO1xufVxuXG4vKipcbiAqIERlcHJlY2F0ZWQuIFNldHMgdGhlIHJlbGVhc2Ugb24gdGhlIGV2ZW50LlxuICogTk9URTogRG9lcyBub3Qgc2V0IHRoZSByZWxlYXNlIG9uIHNlc3Npb25zLlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFJlbGVhc2UocmVsZWFzZTogc3RyaW5nKTogdm9pZCB7XG4gIHNldEV4dHJhKCdfX3NlbnRyeV9yZWxlYXNlJywgcmVsZWFzZSk7XG59XG5cbi8qKlxuICogRGVwcmVjYXRlZC4gU2V0cyB0aGUgZGlzdCBvbiB0aGUgZXZlbnQuXG4gKiBOT1RFOiBEb2VzIG5vdCBzZXQgdGhlIGRpc3Qgb24gc2Vzc2lvbnMuXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RGlzdChkaXN0OiBzdHJpbmcpOiB2b2lkIHtcbiAgc2V0RXh0cmEoJ19fc2VudHJ5X2Rpc3QnLCBkaXN0KTtcbn1cblxuLyoqXG4gKiBJZiBuYXRpdmUgY2xpZW50IGlzIGF2YWlsYWJsZSBpdCB3aWxsIHRyaWdnZXIgYSBuYXRpdmUgY3Jhc2guXG4gKiBVc2UgdGhpcyBvbmx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbmF0aXZlQ3Jhc2goKTogdm9pZCB7XG4gIGNvbnN0IGNsaWVudCA9IGdldEN1cnJlbnRIdWIoKS5nZXRDbGllbnQ8UmVhY3ROYXRpdmVDbGllbnQ+KCk7XG4gIGlmIChjbGllbnQpIHtcbiAgICBjbGllbnQubmF0aXZlQ3Jhc2goKTtcbiAgfVxufVxuXG4vKipcbiAqIEZsdXNoZXMgYWxsIHBlbmRpbmcgZXZlbnRzIGluIHRoZSBxdWV1ZSB0byBkaXNrLlxuICogVXNlIHRoaXMgYmVmb3JlIGFwcGx5aW5nIGFueSByZWFsdGltZSB1cGRhdGVzIHN1Y2ggYXMgY29kZS1wdXNoIG9yIGV4cG8gdXBkYXRlcy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZsdXNoKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB0cnkge1xuICAgIGNvbnN0IGNsaWVudCA9IGdldEN1cnJlbnRIdWIoKS5nZXRDbGllbnQ8UmVhY3ROYXRpdmVDbGllbnQ+KCk7XG5cbiAgICBpZiAoY2xpZW50KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbGllbnQuZmx1c2goKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gIH0gY2F0Y2ggKF8pIHsgfVxuXG4gIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGZsdXNoIHRoZSBldmVudCBxdWV1ZS4nKTtcblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ2xvc2VzIHRoZSBTREssIHN0b3BzIHNlbmRpbmcgZXZlbnRzLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudDxSZWFjdE5hdGl2ZUNsaWVudD4oKTtcblxuICAgIGlmIChjbGllbnQpIHtcbiAgICAgIGF3YWl0IGNsaWVudC5jbG9zZSgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGNsb3NlIHRoZSBTREsnKTtcbiAgfVxufVxuXG4vKipcbiAqIENhcHR1cmVzIHVzZXIgZmVlZGJhY2sgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVVc2VyRmVlZGJhY2soZmVlZGJhY2s6IFVzZXJGZWVkYmFjayk6IHZvaWQge1xuICBnZXRDdXJyZW50SHViKCkuZ2V0Q2xpZW50PFJlYWN0TmF0aXZlQ2xpZW50PigpPy5jYXB0dXJlVXNlckZlZWRiYWNrKGZlZWRiYWNrKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNjb3BlIHdpdGggYW5kIGV4ZWN1dGVzIHRoZSBnaXZlbiBvcGVyYXRpb24gd2l0aGluLlxuICogVGhlIHNjb3BlIGlzIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBvbmNlIHRoZSBvcGVyYXRpb25cbiAqIGZpbmlzaGVzIG9yIHRocm93cy5cbiAqXG4gKiBUaGlzIGlzIGVzc2VudGlhbGx5IGEgY29udmVuaWVuY2UgZnVuY3Rpb24gZm9yOlxuICpcbiAqICAgICBwdXNoU2NvcGUoKTtcbiAqICAgICBjYWxsYmFjaygpO1xuICogICAgIHBvcFNjb3BlKCk7XG4gKlxuICogQHBhcmFtIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBlbmNsb3NlZCBpbnRvIHB1c2gvcG9wU2NvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU2NvcGUoY2FsbGJhY2s6IChzY29wZTogU2NvcGUpID0+IHZvaWQpOiBSZXR1cm5UeXBlPEh1Ylsnd2l0aFNjb3BlJ10+IHtcbiAgY29uc3Qgc2FmZUNhbGxiYWNrID0gKHNjb3BlOiBTY29wZSk6IHZvaWQgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjYWxsYmFjayhzY29wZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciB3aGlsZSBydW5uaW5nIHdpdGhTY29wZSBjYWxsYmFjaycsIGUpO1xuICAgIH1cbiAgfTtcbiAgZ2V0Q3VycmVudEh1YigpLndpdGhTY29wZShzYWZlQ2FsbGJhY2spO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIHRvIHNldCBjb250ZXh0IGluZm9ybWF0aW9uIG9udG8gdGhlIHNjb3BlLlxuICogQHBhcmFtIGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgU2NvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVTY29wZShjYWxsYmFjazogKHNjb3BlOiBTY29wZSkgPT4gdm9pZCk6IFJldHVyblR5cGU8SHViWydjb25maWd1cmVTY29wZSddPiB7XG4gIGNvbnN0IHNhZmVDYWxsYmFjayA9IChzY29wZTogU2NvcGUpOiB2b2lkID0+IHtcbiAgICB0cnkge1xuICAgICAgY2FsbGJhY2soc2NvcGUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRXJyb3Igd2hpbGUgcnVubmluZyBjb25maWd1cmVTY29wZSBjYWxsYmFjaycsIGUpO1xuICAgIH1cbiAgfTtcbiAgZ2V0Q3VycmVudEh1YigpLmNvbmZpZ3VyZVNjb3BlKHNhZmVDYWxsYmFjayk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFBQSxLQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFPQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxLQUFBLEdBQUFDLHVCQUFBLENBQUFMLE9BQUE7QUFFQSxJQUFBTSxPQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxjQUFBLEdBQUFQLE9BQUE7QUFXQSxJQUFBUSxjQUFBLEdBQUFSLE9BQUE7QUFDQSxJQUFBUyxXQUFBLEdBQUFULE9BQUE7QUFDQSxJQUFBVSxjQUFBLEdBQUFWLE9BQUE7QUFFQSxJQUFBVyxNQUFBLEdBQUFYLE9BQUE7QUFDQSxJQUFBWSxZQUFBLEdBQUFaLE9BQUE7QUFDQSxJQUFBYSxRQUFBLEdBQUFiLE9BQUE7QUFDQSxJQUFBYyxPQUFBLEdBQUFkLE9BQUE7QUFDQSxJQUFBZSxZQUFBLEdBQUFmLE9BQUE7QUFDQSxJQUFBZ0IsS0FBQSxHQUFBaEIsT0FBQTtBQUNBLElBQUFpQixRQUFBLEdBQUFqQixPQUFBO0FBQW1DLElBQUFrQixXQUFBLEdBQUFsQixPQUFBO0FBQUEsSUFBQW1CLFlBQUE7QUFBQSxTQUFBQyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQWhCLHdCQUFBb0IsR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFD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