f3dd254f1c9c6682847982e7d9925c64
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addProfilesToEnvelope = addProfilesToEnvelope;
exports.createProfilingEvent = createProfilingEvent;
exports.findProfiledTransactionsFromEnvelope = findProfiledTransactionsFromEnvelope;
exports.isValidProfile = isValidProfile;
var _utils = require("@sentry/utils");
var ACTIVE_THREAD_ID_STRING = '0';
function isValidProfile(profile) {
  if (profile.samples.length <= 1) {
    if (__DEV__) {
      _utils.logger.log('[Profiling] Discarding profile because it contains less than 2 samples');
    }
    return false;
  }
  if (!profile.profile_id) {
    return false;
  }
  return true;
}
function findProfiledTransactionsFromEnvelope(envelope) {
  var events = [];
  (0, _utils.forEachEnvelopeItem)(envelope, function (item, type) {
    if (type !== 'transaction') {
      return;
    }
    for (var j = 1; j < item.length; j++) {
      var event = item[j];
      if (event && event.contexts && event.contexts['profile'] && event.contexts['profile']['profile_id']) {
        events.push(item[j]);
      }
    }
  });
  return events;
}
function createProfilingEvent(profile, event) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
  if (!isValidProfile(profile)) {
    return null;
  }
  return createProfilePayload(profile, {
    release: event.release || '',
    environment: event.environment || '',
    event_id: event.event_id || '',
    transaction: event.transaction || '',
    start_timestamp: event.start_timestamp ? event.start_timestamp * 1000 : Date.now(),
    trace_id: (_c = (_b = (_a = event === null || event === void 0 ? void 0 : event.contexts) === null || _a === void 0 ? void 0 : _a.trace) === null || _b === void 0 ? void 0 : _b.trace_id) !== null && _c !== void 0 ? _c : '',
    profile_id: profile.profile_id,
    os_platform: ((_e = (_d = event.contexts) === null || _d === void 0 ? void 0 : _d.os) === null || _e === void 0 ? void 0 : _e.name) || '',
    os_version: ((_g = (_f = event.contexts) === null || _f === void 0 ? void 0 : _f.os) === null || _g === void 0 ? void 0 : _g.version) || '',
    os_build: ((_j = (_h = event.contexts) === null || _h === void 0 ? void 0 : _h.os) === null || _j === void 0 ? void 0 : _j.build) || '',
    device_locale: ((_l = (_k = event.contexts) === null || _k === void 0 ? void 0 : _k.device) === null || _l === void 0 ? void 0 : _l.locale) || '',
    device_model: ((_o = (_m = event.contexts) === null || _m === void 0 ? void 0 : _m.device) === null || _o === void 0 ? void 0 : _o.model) || '',
    device_manufacturer: ((_q = (_p = event.contexts) === null || _p === void 0 ? void 0 : _p.device) === null || _q === void 0 ? void 0 : _q.manufacturer) || '',
    device_architecture: ((_s = (_r = event.contexts) === null || _r === void 0 ? void 0 : _r.device) === null || _s === void 0 ? void 0 : _s.arch) || '',
    device_is_emulator: ((_u = (_t = event.contexts) === null || _t === void 0 ? void 0 : _t.device) === null || _u === void 0 ? void 0 : _u.simulator) || false
  });
}
function createProfilePayload(cpuProfile, _ref) {
  var release = _ref.release,
    environment = _ref.environment,
    event_id = _ref.event_id,
    transaction = _ref.transaction,
    start_timestamp = _ref.start_timestamp,
    trace_id = _ref.trace_id,
    profile_id = _ref.profile_id,
    os_platform = _ref.os_platform,
    os_version = _ref.os_version,
    os_build = _ref.os_build,
    device_locale = _ref.device_locale,
    device_model = _ref.device_model,
    device_manufacturer = _ref.device_manufacturer,
    device_architecture = _ref.device_architecture,
    device_is_emulator = _ref.device_is_emulator;
  if (trace_id && trace_id.length !== 32) {
    if (__DEV__) {
      _utils.logger.log(`[Profiling] Invalid traceId: ${trace_id} on profiled event`);
    }
  }
  var profile = {
    event_id: profile_id,
    timestamp: new Date(start_timestamp).toISOString(),
    platform: 'node',
    version: '1',
    release: release,
    environment: environment,
    runtime: {
      name: 'hermes',
      version: ''
    },
    os: {
      name: os_platform,
      version: os_version,
      build_number: os_build
    },
    device: {
      locale: device_locale,
      model: device_model,
      manufacturer: device_manufacturer,
      architecture: device_architecture,
      is_emulator: device_is_emulator
    },
    profile: cpuProfile,
    transaction: {
      name: transaction,
      id: event_id,
      trace_id: trace_id || '',
      active_thread_id: ACTIVE_THREAD_ID_STRING
    }
  };
  return profile;
}
function addProfilesToEnvelope(envelope, profiles) {
  if (!profiles.length) {
    return envelope;
  }
  for (var profile of profiles) {
    envelope[1].push([{
      type: 'profile'
    }, profile]);
  }
  return envelope;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,