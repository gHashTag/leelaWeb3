3b2b3b3cd1294a1046c3235d1561a27e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MAX_PROFILE_DURATION_MS = exports.HermesProfiling = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _utils = require("@sentry/utils");
var _environment = require("../utils/environment");
var _cache = require("./cache");
var _hermes = require("./hermes");
var _utils2 = require("./utils");
var MAX_PROFILE_DURATION_MS = 30 * 1e3;
exports.MAX_PROFILE_DURATION_MS = MAX_PROFILE_DURATION_MS;
var HermesProfiling = function () {
  function HermesProfiling() {
    var _this = this;
    (0, _classCallCheck2.default)(this, HermesProfiling);
    this.name = HermesProfiling.id;
    this._shouldStartProfiling = function (transaction) {
      if (!transaction.sampled) {
        _utils.logger.log('[Profiling] Transaction is not sampled, skipping profiling');
        return false;
      }
      var client = _this._getCurrentHub && _this._getCurrentHub().getClient();
      var options = client && client.getOptions();
      var profilesSampleRate = options && options._experiments && typeof options._experiments.profilesSampleRate === 'number' ? options._experiments.profilesSampleRate : undefined;
      if (profilesSampleRate === undefined) {
        _utils.logger.log('[Profiling] Profiling disabled, enable it by setting `profilesSampleRate` option to SDK init call.');
        return false;
      }
      if (Math.random() > profilesSampleRate) {
        _utils.logger.log('[Profiling] Skip profiling transaction due to sampling.');
        return false;
      }
      return true;
    };
    this._startNewProfile = function (transaction) {
      var profileStartTimestampNs = (0, _hermes.startProfiling)();
      if (!profileStartTimestampNs) {
        return;
      }
      _this._currentProfile = {
        profile_id: (0, _utils.uuid4)(),
        startTimestampNs: profileStartTimestampNs
      };
      transaction.setContext('profile', {
        profile_id: _this._currentProfile.profile_id
      });
      transaction.setMetadata({
        profile_id: _this._currentProfile.profile_id
      });
      _utils.logger.log('[Profiling] started profiling: ', _this._currentProfile.profile_id);
    };
    this._finishCurrentProfile = function () {
      _this._clearCurrentProfileTimeout();
      if (_this._currentProfile === undefined) {
        return;
      }
      var profile = (0, _hermes.stopProfiling)();
      if (!profile) {
        _utils.logger.warn('[Profiling] Stop failed. Cleaning up...');
        _this._currentProfile = undefined;
        return;
      }
      profile.profile_id = _this._currentProfile.profile_id;
      _cache.PROFILE_QUEUE.add(profile.profile_id, profile);
      _utils.logger.log('[Profiling] finished profiling: ', _this._currentProfile.profile_id);
      _this._currentProfile = undefined;
    };
    this._createProfileEventFor = function (profiledTransaction) {
      var _a, _b, _c;
      var profile_id = (_b = (_a = profiledTransaction === null || profiledTransaction === void 0 ? void 0 : profiledTransaction.contexts) === null || _a === void 0 ? void 0 : _a['profile']) === null || _b === void 0 ? void 0 : _b['profile_id'];
      if (typeof profile_id !== 'string') {
        _utils.logger.log('[Profiling] cannot find profile for a transaction without a profile context');
        return null;
      }
      if ((_c = profiledTransaction === null || profiledTransaction === void 0 ? void 0 : profiledTransaction.contexts) === null || _c === void 0 ? void 0 : _c['.profile']) {
        delete profiledTransaction.contexts.profile;
      }
      var cpuProfile = _cache.PROFILE_QUEUE.get(profile_id);
      _cache.PROFILE_QUEUE.delete(profile_id);
      if (!cpuProfile) {
        _utils.logger.log(`[Profiling] cannot find profile ${profile_id} for transaction ${profiledTransaction.event_id}`);
        return null;
      }
      var profile = (0, _utils2.createProfilingEvent)(cpuProfile, profiledTransaction);
      _utils.logger.log(`[Profiling] Created profile ${profile_id} for transaction ${profiledTransaction.event_id}`);
      return profile;
    };
    this._clearCurrentProfileTimeout = function () {
      _this._currentProfileTimeout !== undefined && clearTimeout(_this._currentProfileTimeout);
      _this._currentProfileTimeout = undefined;
    };
  }
  (0, _createClass2.default)(HermesProfiling, [{
    key: "setupOnce",
    value: function setupOnce(_, getCurrentHub) {
      var _this2 = this;
      if (!(0, _environment.isHermesEnabled)()) {
        _utils.logger.log('[Profiling] Hermes is not enabled, not adding profiling integration.');
        return;
      }
      this._getCurrentHub = getCurrentHub;
      var client = getCurrentHub().getClient();
      if (!client || typeof client.on !== 'function') {
        return;
      }
      client.on('startTransaction', function (transaction) {
        _this2._finishCurrentProfile();
        var shouldStartProfiling = _this2._shouldStartProfiling(transaction);
        if (!shouldStartProfiling) {
          return;
        }
        _this2._currentProfileTimeout = setTimeout(_this2._finishCurrentProfile, MAX_PROFILE_DURATION_MS);
        _this2._startNewProfile(transaction);
      });
      client.on('finishTransaction', function () {
        _this2._finishCurrentProfile();
      });
      client.on('beforeEnvelope', function (envelope) {
        if (!_cache.PROFILE_QUEUE.size()) {
          return;
        }
        var profiledTransactions = (0, _utils2.findProfiledTransactionsFromEnvelope)(envelope);
        if (!profiledTransactions.length) {
          _utils.logger.log('[Profiling] no profiled transactions found in envelope');
          return;
        }
        var profilesToAddToEnvelope = [];
        for (var profiledTransaction of profiledTransactions) {
          var profile = _this2._createProfileEventFor(profiledTransaction);
          if (profile) {
            profilesToAddToEnvelope.push(profile);
          }
        }
        (0, _utils2.addProfilesToEnvelope)(envelope, profilesToAddToEnvelope);
      });
    }
  }]);
  return HermesProfiling;
}();
exports.HermesProfiling = HermesProfiling;
HermesProfiling.id = 'HermesProfiling';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,