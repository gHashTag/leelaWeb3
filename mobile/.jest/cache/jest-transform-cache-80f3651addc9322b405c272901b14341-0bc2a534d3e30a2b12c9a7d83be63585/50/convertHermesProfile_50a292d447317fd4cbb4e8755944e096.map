{"version":3,"names":["_utils","require","_reactNative","_rewriteframes","_hermes","_integration","MS_TO_NS","MAX_PROFILE_DURATION_NS","MAX_PROFILE_DURATION_MS","ANONYMOUS_FUNCTION_NAME","UNKNOWN_STACK_ID","JS_THREAD_NAME","JS_THREAD_PRIORITY","DEFAULT_BUNDLE_NAME","Platform","OS","ANDROID_DEFAULT_BUNDLE_NAME","IOS_DEFAULT_BUNDLE_NAME","undefined","convertToSentryProfile","hermesProfile","samples","length","logger","warn","_mapSamples","mapSamples","hermesStacks","jsThreads","_mapFrames","mapFrames","stackFrames","frames","hermesStackFrameIdToSentryFrameIdMap","_mapStacks","mapStacks","stacks","hermesStackToSentryStackMap","sample","sentryStackId","get","stack_id","error","thread_metadata","jsThreadId","name","priority","hermesSamples","maxElapsedSinceStartNs","arguments","Set","start","Number","ts","hermesSample","add","tid","sf","elapsed_since_start_ns","push","thread_id","toFixed","hermesStackFrames","Map","key","Object","prototype","hasOwnProperty","call","set","hermesFrame","functionName","parseHermesStackFrameFunctionName","function","file","category","lineno","line","colno","column","hermesStackFunctionFrameId","stackId","stack","currentHermesFrameId","sentryFrameId","parent"],"sources":["../../../src/js/profiling/convertHermesProfile.ts"],"sourcesContent":["import type { FrameId, StackId, ThreadCpuFrame, ThreadCpuSample, ThreadCpuStack, ThreadId } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport { Platform } from 'react-native';\n\nimport { ANDROID_DEFAULT_BUNDLE_NAME, IOS_DEFAULT_BUNDLE_NAME } from '../integrations/rewriteframes';\nimport type * as Hermes from './hermes';\nimport { parseHermesStackFrameFunctionName } from './hermes';\nimport { MAX_PROFILE_DURATION_MS } from './integration';\nimport type { RawThreadCpuProfile } from './types';\n\nconst MS_TO_NS = 1e6;\nconst MAX_PROFILE_DURATION_NS = MAX_PROFILE_DURATION_MS * MS_TO_NS;\nconst ANONYMOUS_FUNCTION_NAME = 'anonymous';\nconst UNKNOWN_STACK_ID = -1;\nconst JS_THREAD_NAME = 'JavaScriptThread';\nconst JS_THREAD_PRIORITY = 1;\nconst DEFAULT_BUNDLE_NAME =\n  Platform.OS === 'android' ? ANDROID_DEFAULT_BUNDLE_NAME : Platform.OS === 'ios' ? IOS_DEFAULT_BUNDLE_NAME : undefined;\n\n/**\n * Converts a Hermes profile to a Sentry profile.\n *\n * Maps Hermes samples to Sentry samples.\n * Maps Hermes stack frames to Sentry frames.\n * Hermes stack frame is an object representing a function call in the stack\n * with a link to its parent stack frame. Root of the represented stack tree\n * is main function call in Hermes that is [root] stack frame.\n *\n * @returns Sentry profile or null if no samples are found.\n */\nexport function convertToSentryProfile(hermesProfile: Hermes.Profile): RawThreadCpuProfile | null {\n  if (hermesProfile.samples.length === 0) {\n    logger.warn('[Profiling] No samples found in profile.');\n    return null;\n  }\n\n  const { samples, hermesStacks, jsThreads } = mapSamples(hermesProfile.samples);\n\n  const { frames, hermesStackFrameIdToSentryFrameIdMap } = mapFrames(hermesProfile.stackFrames);\n\n  const { stacks, hermesStackToSentryStackMap } = mapStacks(\n    hermesStacks,\n    hermesProfile.stackFrames,\n    hermesStackFrameIdToSentryFrameIdMap,\n  );\n\n  for (const sample of samples) {\n    const sentryStackId = hermesStackToSentryStackMap.get(sample.stack_id);\n    if (sentryStackId === undefined) {\n      logger.error(`[Profiling] Hermes Stack ID ${sample.stack_id} not found when mapping to Sentry Stack ID.`);\n      sample.stack_id = UNKNOWN_STACK_ID;\n    } else {\n      sample.stack_id = sentryStackId;\n    }\n  }\n\n  const thread_metadata: Record<ThreadId, { name?: string; priority?: number }> = {};\n  for (const jsThreadId of jsThreads) {\n    thread_metadata[jsThreadId] = {\n      name: JS_THREAD_NAME,\n      priority: JS_THREAD_PRIORITY,\n    };\n  }\n\n  return {\n    samples,\n    frames,\n    stacks,\n    thread_metadata,\n  };\n}\n\n/**\n * Maps Hermes samples to Sentry samples.\n * Calculates the elapsed time since the first sample based on the absolute timestamps of the Hermes samples.\n * Hermes stack frame IDs represent the last (leaf, furthest from the main func) frame of the call stack.\n * @returns the mapped Sentry samples, the set of Hermes stack frame IDs, and the set of JS thread IDs\n */\nexport function mapSamples(\n  hermesSamples: Hermes.Sample[],\n  maxElapsedSinceStartNs: number = MAX_PROFILE_DURATION_NS,\n): {\n  samples: ThreadCpuSample[];\n  hermesStacks: Set<Hermes.StackFrameId>;\n  jsThreads: Set<ThreadId>;\n} {\n  const jsThreads = new Set<ThreadId>();\n  const hermesStacks = new Set<Hermes.StackFrameId>();\n\n  const start = Number(hermesSamples[0].ts);\n  const samples: ThreadCpuSample[] = [];\n  for (const hermesSample of hermesSamples) {\n    jsThreads.add(hermesSample.tid);\n    hermesStacks.add(hermesSample.sf);\n\n    const elapsed_since_start_ns = (Number(hermesSample.ts) - start) * 1e3;\n    if (elapsed_since_start_ns >= maxElapsedSinceStartNs) {\n      logger.warn(\n        `[Profiling] Sample has elapsed time since start ${elapsed_since_start_ns}ns ` +\n          `greater than the max elapsed time ${maxElapsedSinceStartNs}ns.`,\n      );\n      break;\n    }\n\n    samples.push({\n      stack_id: hermesSample.sf,\n      thread_id: hermesSample.tid,\n      elapsed_since_start_ns: elapsed_since_start_ns.toFixed(0),\n    });\n  }\n\n  return {\n    samples,\n    hermesStacks,\n    jsThreads,\n  };\n}\n\n/**\n * Maps Hermes StackFrames tree represented as an JS object to a Sentry frames array.\n * Converts line and columns strings to numbers.\n * @returns the mapped Sentry frames\n */\nfunction mapFrames(hermesStackFrames: Record<Hermes.StackFrameId, Hermes.StackFrame>): {\n  frames: ThreadCpuFrame[];\n  hermesStackFrameIdToSentryFrameIdMap: Map<Hermes.StackFrameId, FrameId>;\n} {\n  const frames: ThreadCpuFrame[] = [];\n  const hermesStackFrameIdToSentryFrameIdMap = new Map<Hermes.StackFrameId, FrameId>();\n  for (const key in hermesStackFrames) {\n    // asc order based on the key is not guaranteed\n    if (!Object.prototype.hasOwnProperty.call(hermesStackFrames, key)) {\n      continue;\n    }\n    hermesStackFrameIdToSentryFrameIdMap.set(Number(key), frames.length);\n    const hermesFrame = hermesStackFrames[key];\n\n    const functionName = parseHermesStackFrameFunctionName(hermesFrame.name);\n    frames.push({\n      function: functionName || ANONYMOUS_FUNCTION_NAME,\n      file: hermesFrame.category == 'JavaScript' ? DEFAULT_BUNDLE_NAME : undefined,\n      lineno: hermesFrame.line !== undefined ? Number(hermesFrame.line) : undefined,\n      colno: hermesFrame.column !== undefined ? Number(hermesFrame.column) : undefined,\n    });\n  }\n\n  return {\n    frames,\n    hermesStackFrameIdToSentryFrameIdMap,\n  };\n}\n\n/**\n * Maps Hermes stack frame IDs to Sentry stack arrays.\n * Hermes stack frame IDs represent the last (leaf, furthest from the main func) frame of the call stack.\n * @returns the mapped Sentry stacks and a map from Hermes stack IDs to Sentry stack IDs (indices in the stacks array)\n */\nfunction mapStacks(\n  hermesStacks: Set<Hermes.StackFrameId>,\n  hermesStackFrames: Record<Hermes.StackFrameId, Hermes.StackFrame>,\n  hermesStackFrameIdToSentryFrameIdMap: Map<Hermes.StackFrameId, FrameId>,\n): {\n  stacks: ThreadCpuStack[];\n  hermesStackToSentryStackMap: Map<Hermes.StackFrameId, StackId>;\n} {\n  const hermesStackToSentryStackMap = new Map<Hermes.StackFrameId, StackId>();\n  const stacks: ThreadCpuStack[] = [];\n  for (const hermesStackFunctionFrameId of hermesStacks) {\n    const stackId = stacks.length;\n    hermesStackToSentryStackMap.set(hermesStackFunctionFrameId, stackId);\n    const stack: ThreadCpuStack = [];\n    let currentHermesFrameId: Hermes.StackFrameId | undefined = hermesStackFunctionFrameId;\n    while (currentHermesFrameId !== undefined) {\n      const sentryFrameId = hermesStackFrameIdToSentryFrameIdMap.get(currentHermesFrameId);\n      sentryFrameId !== undefined && stack.push(sentryFrameId);\n      currentHermesFrameId = hermesStackFrames[currentHermesFrameId] && hermesStackFrames[currentHermesFrameId].parent;\n    }\n    stacks.push(stack);\n  }\n\n  return {\n    stacks,\n    hermesStackToSentryStackMap,\n  };\n}\n"],"mappings":"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"}