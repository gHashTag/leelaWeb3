319a968633d35df760d28981b26576bb
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NeomorphFlexView = void 0;
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var native_1 = require("@react-navigation/native");
var cons_1 = require("../../cons");
var react_native_neomorph_shadows_1 = require("react-native-neomorph-shadows");
var react_native_size_matters_1 = require("react-native-size-matters");
var NeomorphFlexView = function NeomorphFlexView(_ref) {
  var children = _ref.children,
    viewStyle = _ref.viewStyle,
    shadowStyle = _ref.shadowStyle,
    _ref$borderRadius = _ref.borderRadius,
    borderRadius = _ref$borderRadius === void 0 ? 40 : _ref$borderRadius;
  var _ref2 = (0, native_1.useTheme)(),
    dark = _ref2.dark;
  var backgroundColor = dark ? cons_1.black : cons_1.lightGray;
  return (0, _jsxRuntime.jsx)(react_native_neomorph_shadows_1.NeomorphFlex, {
    inner: true,
    style: Object.assign({}, styles.container, shadowStyle, viewStyle, {
      backgroundColor: backgroundColor,
      borderRadius: borderRadius
    }),
    children: (0, _jsxRuntime.jsx)(react_native_1.View, {
      style: Object.assign({}, viewStyle, {
        borderRadius: borderRadius
      }),
      children: children
    })
  });
};
exports.NeomorphFlexView = NeomorphFlexView;
var styles = react_native_size_matters_1.ScaledSheet.create({
  container: {
    shadowRadius: 5,
    marginHorizontal: 40
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwibmF0aXZlXzEiLCJjb25zXzEiLCJyZWFjdF9uYXRpdmVfbmVvbW9ycGhfc2hhZG93c18xIiwicmVhY3RfbmF0aXZlX3NpemVfbWF0dGVyc18xIiwiTmVvbW9ycGhGbGV4VmlldyIsIl9yZWYiLCJjaGlsZHJlbiIsInZpZXdTdHlsZSIsInNoYWRvd1N0eWxlIiwiX3JlZiRib3JkZXJSYWRpdXMiLCJib3JkZXJSYWRpdXMiLCJfcmVmMiIsInVzZVRoZW1lIiwiZGFyayIsImJhY2tncm91bmRDb2xvciIsImJsYWNrIiwibGlnaHRHcmF5IiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJOZW9tb3JwaEZsZXgiLCJpbm5lciIsInN0eWxlIiwiT2JqZWN0IiwiYXNzaWduIiwic3R5bGVzIiwiY29udGFpbmVyIiwiVmlldyIsImV4cG9ydHMiLCJTY2FsZWRTaGVldCIsImNyZWF0ZSIsInNoYWRvd1JhZGl1cyIsIm1hcmdpbkhvcml6b250YWwiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL05lb21vcnBoRmxleFZpZXcvTmVvbW9ycGhGbGV4Vmlldy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBWaWV3LCBWaWV3U3R5bGUgfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmltcG9ydCB7IHVzZVRoZW1lIH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJ1xuaW1wb3J0IHsgYmxhY2ssIGxpZ2h0R3JheSB9IGZyb20gJ2NvbnMnXG5pbXBvcnQgeyBOZW9tb3JwaEZsZXggfSBmcm9tICdyZWFjdC1uYXRpdmUtbmVvbW9ycGgtc2hhZG93cydcbmltcG9ydCB7IFNjYWxlZFNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlLXNpemUtbWF0dGVycydcblxudHlwZSBGbGV4U3R5bGVQcm9wZXJ0aWVzID1cbiAgfCAnZmxleCdcbiAgfCAnYWxpZ25TZWxmJ1xuICB8ICdmbGV4R3JvdydcbiAgfCAnZmxleFNocmluaydcbiAgfCAnZmxleEJhc2lzJ1xuXG50eXBlIFZpZXdTdHlsZVdpdGhvdXRGbGV4ID0gUGljazxcbiAgVmlld1N0eWxlLFxuICBFeGNsdWRlPGtleW9mIFZpZXdTdHlsZSwgRmxleFN0eWxlUHJvcGVydGllcz5cbj5cblxuaW50ZXJmYWNlIFZpZXdTdHlsZVdpdGhTaGFkb3cgZXh0ZW5kcyBWaWV3U3R5bGVXaXRob3V0RmxleCB7XG4gIHNoYWRvd09mZnNldD86IHtcbiAgICB3aWR0aDogbnVtYmVyXG4gICAgaGVpZ2h0OiBudW1iZXJcbiAgfVxuICBzaGFkb3dPcGFjaXR5PzogbnVtYmVyXG4gIHNoYWRvd0NvbG9yPzogc3RyaW5nXG4gIHNoYWRvd1JhZGl1cz86IG51bWJlclxuICBib3JkZXJSYWRpdXM/OiBudW1iZXJcbiAgYmFja2dyb3VuZENvbG9yPzogc3RyaW5nXG4gIHdpZHRoPzogbnVtYmVyXG4gIGhlaWdodD86IG51bWJlclxufVxuXG5pbnRlcmZhY2UgTmVvbW9ycGhGbGV4Vmlld1Byb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxuICBzaGFkb3dTdHlsZT86IFZpZXdTdHlsZVdpdGhTaGFkb3dcbiAgdmlld1N0eWxlPzogVmlld1N0eWxlV2l0aFNoYWRvd1xuICBib3JkZXJSYWRpdXM/OiBudW1iZXJcbn1cblxuY29uc3QgTmVvbW9ycGhGbGV4VmlldzogUmVhY3QuRkM8TmVvbW9ycGhGbGV4Vmlld1Byb3BzPiA9ICh7XG4gIGNoaWxkcmVuLFxuICB2aWV3U3R5bGUsXG4gIHNoYWRvd1N0eWxlLFxuICBib3JkZXJSYWRpdXMgPSA0MCxcbn0pID0+IHtcbiAgY29uc3QgeyBkYXJrIH0gPSB1c2VUaGVtZSgpXG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGRhcmsgPyBibGFjayA6IGxpZ2h0R3JheVxuICByZXR1cm4gKFxuICAgIDxOZW9tb3JwaEZsZXhcbiAgICAgIGlubmVyXG4gICAgICBzdHlsZT17e1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIC4uLnN0eWxlcy5jb250YWluZXIsXG4gICAgICAgIC4uLnNoYWRvd1N0eWxlLFxuICAgICAgICAuLi52aWV3U3R5bGUsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgYm9yZGVyUmFkaXVzLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8VmlldyBzdHlsZT17eyAuLi52aWV3U3R5bGUsIGJvcmRlclJhZGl1cyB9fT57Y2hpbGRyZW59PC9WaWV3PlxuICAgIDwvTmVvbW9ycGhGbGV4PlxuICApXG59XG5cbmNvbnN0IHN0eWxlcyA9IFNjYWxlZFNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIHNoYWRvd1JhZGl1czogNSxcbiAgICBtYXJnaW5Ib3Jpem9udGFsOiA0MCxcbiAgfSxcbn0pXG5cbmV4cG9ydCB7IE5lb21vcnBoRmxleFZpZXcgfVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsUUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksK0JBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLDJCQUFBLEdBQUFMLE9BQUE7QUFtQ0EsSUFBTU0sZ0JBQWdCLEdBQW9DLFNBQXBEQSxnQkFBZ0JBLENBQUFDLElBQUEsRUFLakI7RUFBQSxJQUpIQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtJQUNSQyxTQUFTLEdBQUFGLElBQUEsQ0FBVEUsU0FBUztJQUNUQyxXQUFXLEdBQUFILElBQUEsQ0FBWEcsV0FBVztJQUFBQyxpQkFBQSxHQUFBSixJQUFBLENBQ1hLLFlBQVk7SUFBWkEsWUFBWSxHQUFBRCxpQkFBQSxjQUFHLEVBQUUsR0FBQUEsaUJBQUE7RUFFakIsSUFBQUUsS0FBQSxHQUFpQixJQUFBWCxRQUFBLENBQUFZLFFBQVEsR0FBRTtJQUFuQkMsSUFBSSxHQUFBRixLQUFBLENBQUpFLElBQUk7RUFDWixJQUFNQyxlQUFlLEdBQUdELElBQUksR0FBR1osTUFBQSxDQUFBYyxLQUFLLEdBQUdkLE1BQUEsQ0FBQWUsU0FBUztFQUNoRCxPQUNFLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDaEIsK0JBQUEsQ0FBQWlCLFlBQVk7SUFDWEMsS0FBSztJQUNMQyxLQUFLLEVBQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUVBQyxNQUFNLENBQUNDLFNBQVMsRUFDaEJqQixXQUFXLEVBQ1hELFNBQVM7TUFDWk8sZUFBZSxFQUFmQSxlQUFlO01BQ2ZKLFlBQVksRUFBWkE7SUFBWSxFQUNaO0lBQUFKLFFBQUEsRUFFRixJQUFBVyxXQUFBLENBQUFDLEdBQUEsRUFBQ25CLGNBQUEsQ0FBQTJCLElBQUk7TUFBQ0wsS0FBSyxFQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FBT2hCLFNBQVM7UUFBRUcsWUFBWSxFQUFaQTtNQUFZLEVBQUc7TUFBQUosUUFBQSxFQUFFQTtJQUFRLENBQU87RUFDL0QsQ0FBYyxDQUFDO0FBRW5CLENBQUM7QUFTUXFCLE9BQUEsQ0FBQXZCLGdCQUFBLEdBQUFBLGdCQUFBO0FBUFQsSUFBTW9CLE1BQU0sR0FBR3JCLDJCQUFBLENBQUF5QixXQUFXLENBQUNDLE1BQU0sQ0FBQztFQUNoQ0osU0FBUyxFQUFFO0lBQ1RLLFlBQVksRUFBRSxDQUFDO0lBQ2ZDLGdCQUFnQixFQUFFOztDQUVyQixDQUFDIn0=