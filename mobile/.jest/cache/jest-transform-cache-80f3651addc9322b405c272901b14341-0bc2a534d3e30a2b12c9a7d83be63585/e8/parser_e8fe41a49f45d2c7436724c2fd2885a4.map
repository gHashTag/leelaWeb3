{"version":3,"names":["_tokensToAST","_interopRequireDefault","require","_stringToTokens","_cleanupTokens","_groupTextTokens","_omitListItemParagraph","parser","source","renderer","markdownIt","Array","isArray","tokens","stringToTokens","cleanupTokens","groupTextTokens","omitListItemParagraph","astTree","tokensToAST"],"sources":["parser.js"],"sourcesContent":["import tokensToAST from './util/tokensToAST';\nimport {stringToTokens} from './util/stringToTokens';\nimport {cleanupTokens} from './util/cleanupTokens';\nimport groupTextTokens from './util/groupTextTokens';\nimport omitListItemParagraph from './util/omitListItemParagraph';\n\n/**\n *\n * @param {string} source\n * @param {function} [renderer]\n * @param {AstRenderer} [markdownIt]\n * @return {View}\n */\nexport default function parser(source, renderer, markdownIt) {\n  if (Array.isArray(source)) {\n    return renderer(source);\n  }\n\n  let tokens = stringToTokens(source, markdownIt);\n  tokens = cleanupTokens(tokens);\n  tokens = groupTextTokens(tokens);\n  tokens = omitListItemParagraph(tokens);\n\n  const astTree = tokensToAST(tokens);\n\n  return renderer(astTree);\n}\n"],"mappings":";;;;;AAAA,IAAAA,YAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,eAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAF,OAAA;AACA,IAAAG,gBAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,sBAAA,GAAAL,sBAAA,CAAAC,OAAA;AASe,SAASK,MAAMA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EAC3D,IAAIC,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,EAAE;IACzB,OAAOC,QAAQ,CAACD,MAAM,CAAC;EACzB;EAEA,IAAIK,MAAM,GAAG,IAAAC,8BAAc,EAACN,MAAM,EAAEE,UAAU,CAAC;EAC/CG,MAAM,GAAG,IAAAE,4BAAa,EAACF,MAAM,CAAC;EAC9BA,MAAM,GAAG,IAAAG,wBAAe,EAACH,MAAM,CAAC;EAChCA,MAAM,GAAG,IAAAI,8BAAqB,EAACJ,MAAM,CAAC;EAEtC,IAAMK,OAAO,GAAG,IAAAC,oBAAW,EAACN,MAAM,CAAC;EAEnC,OAAOJ,QAAQ,CAACS,OAAO,CAAC;AAC1B"}