aa9aeae52369ca45a3742708c944818e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var react_native_2 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
describe('GameBoard Component', function () {
  test('should render correct player avatars', (0, _asyncToGenerator2.default)(function* () {
    var _ref2 = (0, react_native_2.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
        players: players
      })),
      queryByTestId = _ref2.queryByTestId;
    yield (0, react_native_2.waitFor)(function () {
      players.forEach(function (player) {
        var playerGemImage = queryByTestId(`gem-${player.id}`);
        expect(playerGemImage).toBeTruthy();
        if (typeof player.avatar === 'string') {
          var _playerGemImage$findB, _playerGemImage$findB2, _playerGemImage$findB3;
          expect(playerGemImage == null ? void 0 : (_playerGemImage$findB = playerGemImage.findByType(react_native_1.Image)) == null ? void 0 : (_playerGemImage$findB2 = _playerGemImage$findB.props) == null ? void 0 : (_playerGemImage$findB3 = _playerGemImage$findB2.source) == null ? void 0 : _playerGemImage$findB3.uri).toEqual(player.avatar);
        }
      });
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwicmVhY3RfbmF0aXZlXzIiLCJfXzEiLCJwbGF5ZXJzIiwiaWQiLCJwbGFuIiwiYXZhdGFyIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZGVmYXVsdCIsIl9yZWYyIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHYW1lQm9hcmQiLCJxdWVyeUJ5VGVzdElkIiwid2FpdEZvciIsImZvckVhY2giLCJwbGF5ZXIiLCJwbGF5ZXJHZW1JbWFnZSIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcGxheWVyR2VtSW1hZ2UkZmluZEIiLCJfcGxheWVyR2VtSW1hZ2UkZmluZEIyIiwiX3BsYXllckdlbUltYWdlJGZpbmRCMyIsImZpbmRCeVR5cGUiLCJJbWFnZSIsInByb3BzIiwic291cmNlIiwidXJpIiwidG9FcXVhbCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvR2FtZUJvYXJkL0dhbWVCb2FyZC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IEltYWdlIH0gZnJvbSAncmVhY3QtbmF0aXZlJ1xuXG5pbXBvcnQgeyByZW5kZXIsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJ3R5cGVzJ1xuXG5pbXBvcnQgeyBHYW1lQm9hcmQgfSBmcm9tICcuLi8nXG5cbmNvbnN0IHBsYXllcnM6IFBsYXllcltdID0gW1xuICB7XG4gICAgaWQ6IDIsXG4gICAgcGxhbjogNzIsXG4gICAgYXZhdGFyOiAxMDYsXG4gIH0sXG4gIHtcbiAgICBpZDogNCxcbiAgICBwbGFuOiAzNCxcbiAgICBhdmF0YXI6XG4gICAgICAnaHR0cHM6Ly9iYWZrcmVpZnRybWZtaW1sdm8yNnhheGZ2dDJ5cG5qamFhdnE1bWdua2psanM2bWN6ZmVraWk0Y210cS5pcGZzLm5mdHN0b3JhZ2UubGluay8nLFxuICB9LFxuXVxuXG5kZXNjcmliZSgnR2FtZUJvYXJkIENvbXBvbmVudCcsICgpID0+IHtcbiAgdGVzdCgnc2hvdWxkIHJlbmRlciBjb3JyZWN0IHBsYXllciBhdmF0YXJzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIHBsYXllcnMuZm9yRWFjaCgocGxheWVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHBsYXllckdlbUltYWdlID0gcXVlcnlCeVRlc3RJZChgZ2VtLSR7cGxheWVyLmlkfWApXG4gICAgICAgIGV4cGVjdChwbGF5ZXJHZW1JbWFnZSkudG9CZVRydXRoeSgpXG5cbiAgICAgICAgaWYgKHR5cGVvZiBwbGF5ZXIuYXZhdGFyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGV4cGVjdChwbGF5ZXJHZW1JbWFnZT8uZmluZEJ5VHlwZShJbWFnZSk/LnByb3BzPy5zb3VyY2U/LnVyaSkudG9FcXVhbChcbiAgICAgICAgICAgIHBsYXllci5hdmF0YXIsXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG4gIC8vIHRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4gIC8vICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG4gIC8vICAgY29uc3QgZ2VtQ29tcG9uZW50cyA9IGdldEFsbEJ5VGVzdElkKCdnZW0tY29udGFpbmVyJylcbiAgLy8gICBjb25zdCBwbGF5ZXJHZW1JbWFnZXMgPSBnZXRBbGxCeVRlc3RJZCgncGxheWVyLWdlbS1pbWFnZScpXG4gIC8vICAgZXhwZWN0KHBsYXllckdlbUltYWdlcy5sZW5ndGgpLnRvRXF1YWwoMikgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwIDIg0LjQs9GA0L7QutCwXG4gIC8vICAgZXhwZWN0KGdlbUNvbXBvbmVudHMubGVuZ3RoKS50b0VxdWFsKDcyKSAvLyDQn9GA0L7QstC10YDQutCwINC90LAg0L7QsdGJ0LXQtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQutC+0LzQv9C+0L3QtdC90YLQvtCyIEdlbVxuICAvLyB9KVxuXG4gIC8vIHRlc3QoJ3Nob3VsZCByZW5kZXIgcGxheWVyIGF2YXRhcnMnLCAoKSA9PiB7XG4gIC8vICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG5cbiAgLy8gICBwbGF5ZXJzLmZvckVhY2goKHBsYXllcikgPT4ge1xuICAvLyAgICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRlc3RJZChgZ2VtLSR7cGxheWVyLmlkfWApXG4gIC8vICAgICBleHBlY3QoZ2VtSW1hZ2UpLnRvQmVUcnV0aHkoKVxuICAvLyAgIH0pXG4gIC8vIH0pXG5cbiAgLy8gdGVzdCgnc2hvdWxkIHJlbmRlciB0aGUgY29ycmVjdCBudW1iZXIgb2YgR2VtIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIHBsYXllcnMgcHJvcCcsICgpID0+IHtcbiAgLy8gICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPilcblxuICAvLyAgIGNvbnN0IGdlbUNvbXBvbmVudHMgPSBnZXRBbGxCeVRlc3RJZCgvXmdlbS1cXGQrJC8pXG4gIC8vICAgZXhwZWN0KGdlbUNvbXBvbmVudHMubGVuZ3RoKS50b0VxdWFsKDcyKSAvLyDQntCx0YnQtdC1INC60L7Qu9C40YfQtdGB0YLQstC+IEdlbSDQutC+0LzQv9C+0L3QtdC90YLQvtCyINCx0LXQtyDQv9GD0YHRgtGL0YUg0Y/Rh9C10LXQulxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxjQUFBLEdBQUFGLE9BQUE7QUFHQSxJQUFBRyxHQUFBLEdBQUFILE9BQUE7QUFFQSxJQUFNSSxPQUFPLEdBQWEsQ0FDeEI7RUFDRUMsRUFBRSxFQUFFLENBQUM7RUFDTEMsSUFBSSxFQUFFLEVBQUU7RUFDUkMsTUFBTSxFQUFFO0NBQ1QsRUFDRDtFQUNFRixFQUFFLEVBQUUsQ0FBQztFQUNMQyxJQUFJLEVBQUUsRUFBRTtFQUNSQyxNQUFNLEVBQ0o7Q0FDSCxDQUNGO0FBRURDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxZQUFLO0VBQ25DQyxJQUFJLENBQUMsc0NBQXNDLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFXO0lBQ3RELElBQUFDLEtBQUEsR0FBMEIsSUFBQVYsY0FBQSxDQUFBVyxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNaLEdBQUEsQ0FBQWEsU0FBUztRQUFDWixPQUFPLEVBQUVBO01BQVEsRUFBRyxDQUFDO01BQXpEYSxhQUFhLEdBQUFMLEtBQUEsQ0FBYkssYUFBYTtJQUVyQixNQUFNLElBQUFmLGNBQUEsQ0FBQWdCLE9BQU8sRUFBQyxZQUFLO01BQ2pCZCxPQUFPLENBQUNlLE9BQU8sQ0FBQyxVQUFDQyxNQUFNLEVBQUk7UUFDekIsSUFBTUMsY0FBYyxHQUFHSixhQUFhLENBQUMsT0FBT0csTUFBTSxDQUFDZixFQUFFLEVBQUUsQ0FBQztRQUN4RGlCLE1BQU0sQ0FBQ0QsY0FBYyxDQUFDLENBQUNFLFVBQVUsRUFBRTtRQUVuQyxJQUFJLE9BQU9ILE1BQU0sQ0FBQ2IsTUFBTSxLQUFLLFFBQVEsRUFBRTtVQUFBLElBQUFpQixxQkFBQSxFQUFBQyxzQkFBQSxFQUFBQyxzQkFBQTtVQUNyQ0osTUFBTSxDQUFDRCxjQUFjLHFCQUFBRyxxQkFBQSxHQUFkSCxjQUFjLENBQUVNLFVBQVUsQ0FBQzFCLGNBQUEsQ0FBQTJCLEtBQUssQ0FBQyxzQkFBQUgsc0JBQUEsR0FBakNELHFCQUFBLENBQW1DSyxLQUFLLHNCQUFBSCxzQkFBQSxHQUF4Q0Qsc0JBQUEsQ0FBMENLLE1BQU0scUJBQWhESixzQkFBQSxDQUFrREssR0FBRyxDQUFDLENBQUNDLE9BQU8sQ0FDbkVaLE1BQU0sQ0FBQ2IsTUFBTSxDQUNkOztNQUVMLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBQztBQXVCSixDQUFDLENBQUMifQ==