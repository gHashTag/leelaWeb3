1b42089af531ef234d9315106690c679
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return mockAsyncStorage;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_hooks_1 = require("@testing-library/react-hooks");
var i18next_1 = __importDefault(require("i18next"));
var mock_async_storage_1 = __importDefault(require("mock-async-storage"));
var images_1 = require("./images");
var useLeelaGame_1 = require("./useLeelaGame");
var mockAsyncStorage = new mock_async_storage_1.default();
describe('useLeelaGame', function () {
  beforeEach(function () {
    mockAsyncStorage.clear();
  });
  it('should initialize state correctly', (0, _asyncToGenerator2.default)(function* () {
    var initialState = {
      currentPlayer: {
        id: 1,
        plan: 68,
        previousPlan: 68,
        isStart: false,
        isFinished: false,
        consecutiveSixes: 0,
        message: i18next_1.default.t('sixToBegin'),
        positionBeforeThreeSixes: 0,
        avatar: images_1.GEM_ICONS[1]
      },
      lastRoll: 1,
      rollHistory: [],
      planHistory: [68]
    };
    mockAsyncStorage.setItem('leelaGameState', JSON.stringify(initialState));
    mockAsyncStorage.getItem = jest.fn().mockResolvedValue(JSON.stringify(initialState));
    var _ref2 = (0, react_hooks_1.renderHook)(function () {
        return (0, useLeelaGame_1.useLeelaGame)();
      }),
      result = _ref2.result,
      waitForNextUpdate = _ref2.waitForNextUpdate;
    (0, react_hooks_1.act)(function () {
      result.current.rollDice();
    });
    yield waitForNextUpdate();
    expect(result.current.currentPlayer).toMatchObject(initialState.currentPlayer);
    expect(result.current.rollHistory).toEqual(initialState.rollHistory);
    expect(result.current.planHistory).toEqual(initialState.planHistory);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJtb2NrQXN5bmNTdG9yYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVxdWlyZSIsImplc3QiLCJyZWFjdF9ob29rc18xIiwiaTE4bmV4dF8xIiwiX19pbXBvcnREZWZhdWx0IiwibW9ja19hc3luY19zdG9yYWdlXzEiLCJpbWFnZXNfMSIsInVzZUxlZWxhR2FtZV8xIiwiZGVmYXVsdCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyIiwiaXQiLCJpbml0aWFsU3RhdGUiLCJjdXJyZW50UGxheWVyIiwiaWQiLCJwbGFuIiwicHJldmlvdXNQbGFuIiwiaXNTdGFydCIsImlzRmluaXNoZWQiLCJjb25zZWN1dGl2ZVNpeGVzIiwibWVzc2FnZSIsInQiLCJwb3NpdGlvbkJlZm9yZVRocmVlU2l4ZXMiLCJhdmF0YXIiLCJHRU1fSUNPTlMiLCJsYXN0Um9sbCIsInJvbGxIaXN0b3J5IiwicGxhbkhpc3RvcnkiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldEl0ZW0iLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiX3JlZjIiLCJyZW5kZXJIb29rIiwidXNlTGVlbGFHYW1lIiwicmVzdWx0Iiwid2FpdEZvck5leHRVcGRhdGUiLCJhY3QiLCJjdXJyZW50Iiwicm9sbERpY2UiLCJleHBlY3QiLCJ0b01hdGNoT2JqZWN0IiwidG9FcXVhbCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2hvb2tzL3VzZUxlZWxhR2FtZS91c2VMZWVsYUdhbWUudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1ob29rcydcbmltcG9ydCBpMThuZXh0IGZyb20gJ2kxOG5leHQnXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgTW9ja0FzeW5jU3RvcmFnZSBmcm9tICdtb2NrLWFzeW5jLXN0b3JhZ2UnXG5cbmltcG9ydCB7IEdFTV9JQ09OUyB9IGZyb20gJy4vaW1hZ2VzJ1xuaW1wb3J0IHsgdXNlTGVlbGFHYW1lIH0gZnJvbSAnLi91c2VMZWVsYUdhbWUnXG5cbmNvbnN0IG1vY2tBc3luY1N0b3JhZ2UgPSBuZXcgTW9ja0FzeW5jU3RvcmFnZSgpXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gbW9ja0FzeW5jU3RvcmFnZSlcblxuZGVzY3JpYmUoJ3VzZUxlZWxhR2FtZScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja0FzeW5jU3RvcmFnZS5jbGVhcigpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHN0YXRlIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgICBjdXJyZW50UGxheWVyOiB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBwbGFuOiA2OCxcbiAgICAgICAgcHJldmlvdXNQbGFuOiA2OCxcbiAgICAgICAgaXNTdGFydDogZmFsc2UsXG4gICAgICAgIGlzRmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICBjb25zZWN1dGl2ZVNpeGVzOiAwLFxuICAgICAgICBtZXNzYWdlOiBpMThuZXh0LnQoJ3NpeFRvQmVnaW4nKSxcbiAgICAgICAgcG9zaXRpb25CZWZvcmVUaHJlZVNpeGVzOiAwLFxuICAgICAgICBhdmF0YXI6IEdFTV9JQ09OU1sxXSxcbiAgICAgIH0sXG4gICAgICBsYXN0Um9sbDogMSxcbiAgICAgIHJvbGxIaXN0b3J5OiBbXSxcbiAgICAgIHBsYW5IaXN0b3J5OiBbNjhdLFxuICAgIH1cblxuICAgIC8vIE1vY2sgQXN5bmNTdG9yYWdlLmdldEl0ZW1cbiAgICBtb2NrQXN5bmNTdG9yYWdlLnNldEl0ZW0oJ2xlZWxhR2FtZVN0YXRlJywgSlNPTi5zdHJpbmdpZnkoaW5pdGlhbFN0YXRlKSlcbiAgICBtb2NrQXN5bmNTdG9yYWdlLmdldEl0ZW0gPSBqZXN0XG4gICAgICAuZm4oKVxuICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlKEpTT04uc3RyaW5naWZ5KGluaXRpYWxTdGF0ZSkpXG5cbiAgICBjb25zdCB7IHJlc3VsdCwgd2FpdEZvck5leHRVcGRhdGUgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGVlbGFHYW1lKCkpXG5cbiAgICAvLyBDYWxsIHRoZSBmdW5jdGlvbiB0aGF0IHRyaWdnZXJzIHN0YXRlIGNoYW5nZVxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5yb2xsRGljZSgpXG4gICAgfSlcblxuICAgIC8vIFdhaXQgZm9yIHRoZSBuZXh0IHVwZGF0ZVxuICAgIGF3YWl0IHdhaXRGb3JOZXh0VXBkYXRlKClcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50UGxheWVyKS50b01hdGNoT2JqZWN0KFxuICAgICAgaW5pdGlhbFN0YXRlLmN1cnJlbnRQbGF5ZXIsXG4gICAgKVxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5yb2xsSGlzdG9yeSkudG9FcXVhbChpbml0aWFsU3RhdGUucm9sbEhpc3RvcnkpXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnBsYW5IaXN0b3J5KS50b0VxdWFsKGluaXRpYWxTdGF0ZS5wbGFuSGlzdG9yeSlcbiAgfSlcblxuICAvLyBUZXN0IG90aGVyIHNjZW5hcmlvcyBzaW1pbGFybHlcbn0pXG4iXSwibWFwcGluZ3MiOiI7O0FBU0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTUMsZ0JBQWdCO0FBQUEsRUFBQztBQUFBLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQUosWUFBQTtFQUFBLElBQUFNLFFBQUEsR0FBQUYsT0FBQTtJQUFBRyxJQUFBLEdBQUFELFFBQUEsQ0FB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