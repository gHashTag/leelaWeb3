9e26ea4b3a3e9410a1d8e6ad79a4e544
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createIconButtonComponent;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _objectUtils = require("./object-utils");
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "/Users/playra/LeelaAiWeb3/node_modules/react-native-vector-icons/lib/icon-button.js";
var _excluded = ["style", "iconStyle", "children"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    padding: 8
  },
  touchable: {
    overflow: 'hidden'
  },
  icon: {
    marginRight: 10
  },
  text: {
    fontWeight: '600',
    backgroundColor: 'transparent'
  }
});
var IOS7_BLUE = '#007AFF';
var TEXT_PROP_NAMES = ['ellipsizeMode', 'numberOfLines', 'textBreakStrategy', 'selectable', 'suppressHighlighting', 'allowFontScaling', 'adjustsFontSizeToFit', 'minimumFontScale'];
var TOUCHABLE_PROP_NAMES = ['accessible', 'accessibilityLabel', 'accessibilityHint', 'accessibilityComponentType', 'accessibilityRole', 'accessibilityStates', 'accessibilityTraits', 'onFocus', 'onBlur', 'disabled', 'onPress', 'onPressIn', 'onPressOut', 'onLayout', 'onLongPress', 'nativeID', 'testID', 'delayPressIn', 'delayPressOut', 'delayLongPress', 'activeOpacity', 'underlayColor', 'selectionColor', 'onShowUnderlay', 'onHideUnderlay', 'hasTVPreferredFocus', 'tvParallaxProperties'];
function createIconButtonComponent(Icon) {
  var _class;
  return _class = function (_PureComponent) {
    (0, _inherits2.default)(IconButton, _PureComponent);
    var _super = _createSuper(IconButton);
    function IconButton() {
      (0, _classCallCheck2.default)(this, IconButton);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(IconButton, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          style = _this$props.style,
          iconStyle = _this$props.iconStyle,
          children = _this$props.children,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var iconProps = (0, _objectUtils.pick)(restProps, TEXT_PROP_NAMES, 'style', 'name', 'size', 'color');
        var touchableProps = (0, _objectUtils.pick)(restProps, TOUCHABLE_PROP_NAMES);
        var props = (0, _objectUtils.omit)(restProps, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
        iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;
        var colorStyle = (0, _objectUtils.pick)(this.props, 'color');
        var blockStyle = (0, _objectUtils.pick)(this.props, 'backgroundColor', 'borderRadius');
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableHighlight, Object.assign({
          style: [styles.touchable, blockStyle]
        }, touchableProps, {
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, Object.assign({
            style: [styles.container, blockStyle, style]
          }, props, {
            children: [(0, _jsxRuntime.jsx)(Icon, Object.assign({}, iconProps)), typeof children === 'string' ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.text, colorStyle],
              selectable: false,
              children: children
            }) : children]
          }))
        }));
      }
    }]);
    return IconButton;
  }(_react.PureComponent), _class.propTypes = {
    backgroundColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    borderRadius: _propTypes.default.number,
    color: _propTypes.default.any,
    size: _propTypes.default.number,
    iconStyle: _propTypes.default.any,
    style: _propTypes.default.any,
    children: _propTypes.default.node
  }, _class.defaultProps = {
    backgroundColor: IOS7_BLUE,
    borderRadius: 5,
    color: 'white',
    size: 20
  }, _class;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdE5hdGl2ZSIsIl9vYmplY3RVdGlscyIsIl9qc3hSdW50aW1lIiwiX2pzeEZpbGVOYW1lIiwiX2V4Y2x1ZGVkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YyIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwidmFsdWVPZiIsImUiLCJzdHlsZXMiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiY29udGFpbmVyIiwiZmxleERpcmVjdGlvbiIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsInBhZGRpbmciLCJ0b3VjaGFibGUiLCJvdmVyZmxvdyIsImljb24iLCJtYXJnaW5SaWdodCIsInRleHQiLCJmb250V2VpZ2h0IiwiYmFja2dyb3VuZENvbG9yIiwiSU9TN19CTFVFIiwiVEVYVF9QUk9QX05BTUVTIiwiVE9VQ0hBQkxFX1BST1BfTkFNRVMiLCJjcmVhdGVJY29uQnV0dG9uQ29tcG9uZW50IiwiSWNvbiIsIl9jbGFzcyIsIl9QdXJlQ29tcG9uZW50IiwiX2luaGVyaXRzMiIsIkljb25CdXR0b24iLCJfc3VwZXIiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsInZhbHVlIiwicmVuZGVyIiwiX3RoaXMkcHJvcHMiLCJwcm9wcyIsInN0eWxlIiwiaWNvblN0eWxlIiwiY2hpbGRyZW4iLCJyZXN0UHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiaWNvblByb3BzIiwicGljayIsInRvdWNoYWJsZVByb3BzIiwib21pdCIsImtleXMiLCJjb2xvclN0eWxlIiwiYmxvY2tTdHlsZSIsImpzeCIsIlRvdWNoYWJsZUhpZ2hsaWdodCIsImFzc2lnbiIsImpzeHMiLCJWaWV3IiwiVGV4dCIsInNlbGVjdGFibGUiLCJQdXJlQ29tcG9uZW50IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwib25lT2ZUeXBlIiwic3RyaW5nIiwibnVtYmVyIiwiYm9yZGVyUmFkaXVzIiwiY29sb3IiLCJhbnkiLCJzaXplIiwibm9kZSIsImRlZmF1bHRQcm9wcyJdLCJzb3VyY2VzIjpbImljb24tYnV0dG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIFRleHQsIFRvdWNoYWJsZUhpZ2hsaWdodCwgVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBwaWNrLCBvbWl0IH0gZnJvbSAnLi9vYmplY3QtdXRpbHMnO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgcGFkZGluZzogOCxcbiAgfSxcbiAgdG91Y2hhYmxlOiB7XG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB9LFxuICBpY29uOiB7XG4gICAgbWFyZ2luUmlnaHQ6IDEwLFxuICB9LFxuICB0ZXh0OiB7XG4gICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICB9LFxufSk7XG5cbmNvbnN0IElPUzdfQkxVRSA9ICcjMDA3QUZGJztcblxuY29uc3QgVEVYVF9QUk9QX05BTUVTID0gW1xuICAnZWxsaXBzaXplTW9kZScsXG4gICdudW1iZXJPZkxpbmVzJyxcbiAgJ3RleHRCcmVha1N0cmF0ZWd5JyxcbiAgJ3NlbGVjdGFibGUnLFxuICAnc3VwcHJlc3NIaWdobGlnaHRpbmcnLFxuICAnYWxsb3dGb250U2NhbGluZycsXG4gICdhZGp1c3RzRm9udFNpemVUb0ZpdCcsXG4gICdtaW5pbXVtRm9udFNjYWxlJyxcbl07XG5cbmNvbnN0IFRPVUNIQUJMRV9QUk9QX05BTUVTID0gW1xuICAnYWNjZXNzaWJsZScsXG4gICdhY2Nlc3NpYmlsaXR5TGFiZWwnLFxuICAnYWNjZXNzaWJpbGl0eUhpbnQnLFxuICAnYWNjZXNzaWJpbGl0eUNvbXBvbmVudFR5cGUnLFxuICAnYWNjZXNzaWJpbGl0eVJvbGUnLFxuICAnYWNjZXNzaWJpbGl0eVN0YXRlcycsXG4gICdhY2Nlc3NpYmlsaXR5VHJhaXRzJyxcbiAgJ29uRm9jdXMnLFxuICAnb25CbHVyJyxcbiAgJ2Rpc2FibGVkJyxcbiAgJ29uUHJlc3MnLFxuICAnb25QcmVzc0luJyxcbiAgJ29uUHJlc3NPdXQnLFxuICAnb25MYXlvdXQnLFxuICAnb25Mb25nUHJlc3MnLFxuICAnbmF0aXZlSUQnLFxuICAndGVzdElEJyxcbiAgJ2RlbGF5UHJlc3NJbicsXG4gICdkZWxheVByZXNzT3V0JyxcbiAgJ2RlbGF5TG9uZ1ByZXNzJyxcbiAgJ2FjdGl2ZU9wYWNpdHknLFxuICAndW5kZXJsYXlDb2xvcicsXG4gICdzZWxlY3Rpb25Db2xvcicsXG4gICdvblNob3dVbmRlcmxheScsXG4gICdvbkhpZGVVbmRlcmxheScsXG4gICdoYXNUVlByZWZlcnJlZEZvY3VzJyxcbiAgJ3R2UGFyYWxsYXhQcm9wZXJ0aWVzJyxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUljb25CdXR0b25Db21wb25lbnQoSWNvbikge1xuICByZXR1cm4gY2xhc3MgSWNvbkJ1dHRvbiBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgXSksXG4gICAgICBib3JkZXJSYWRpdXM6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICBjb2xvcjogUHJvcFR5cGVzLmFueSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9mb3JiaWQtcHJvcC10eXBlc1xuICAgICAgc2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgIGljb25TdHlsZTogUHJvcFR5cGVzLmFueSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9mb3JiaWQtcHJvcC10eXBlc1xuICAgICAgc3R5bGU6IFByb3BUeXBlcy5hbnksIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QvZm9yYmlkLXByb3AtdHlwZXNcbiAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICB9O1xuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogSU9TN19CTFVFLFxuICAgICAgYm9yZGVyUmFkaXVzOiA1LFxuICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICBzaXplOiAyMCxcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3QgeyBzdHlsZSwgaWNvblN0eWxlLCBjaGlsZHJlbiwgLi4ucmVzdFByb3BzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICBjb25zdCBpY29uUHJvcHMgPSBwaWNrKFxuICAgICAgICByZXN0UHJvcHMsXG4gICAgICAgIFRFWFRfUFJPUF9OQU1FUyxcbiAgICAgICAgJ3N0eWxlJyxcbiAgICAgICAgJ25hbWUnLFxuICAgICAgICAnc2l6ZScsXG4gICAgICAgICdjb2xvcidcbiAgICAgICk7XG4gICAgICBjb25zdCB0b3VjaGFibGVQcm9wcyA9IHBpY2socmVzdFByb3BzLCBUT1VDSEFCTEVfUFJPUF9OQU1FUyk7XG4gICAgICBjb25zdCBwcm9wcyA9IG9taXQoXG4gICAgICAgIHJlc3RQcm9wcyxcbiAgICAgICAgT2JqZWN0LmtleXMoaWNvblByb3BzKSxcbiAgICAgICAgT2JqZWN0LmtleXModG91Y2hhYmxlUHJvcHMpLFxuICAgICAgICAnaWNvblN0eWxlJyxcbiAgICAgICAgJ2JvcmRlclJhZGl1cycsXG4gICAgICAgICdiYWNrZ3JvdW5kQ29sb3InXG4gICAgICApO1xuICAgICAgaWNvblByb3BzLnN0eWxlID0gaWNvblN0eWxlID8gW3N0eWxlcy5pY29uLCBpY29uU3R5bGVdIDogc3R5bGVzLmljb247XG5cbiAgICAgIGNvbnN0IGNvbG9yU3R5bGUgPSBwaWNrKHRoaXMucHJvcHMsICdjb2xvcicpO1xuICAgICAgY29uc3QgYmxvY2tTdHlsZSA9IHBpY2sodGhpcy5wcm9wcywgJ2JhY2tncm91bmRDb2xvcicsICdib3JkZXJSYWRpdXMnKTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFRvdWNoYWJsZUhpZ2hsaWdodFxuICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLnRvdWNoYWJsZSwgYmxvY2tTdHlsZV19XG4gICAgICAgICAgey4uLnRvdWNoYWJsZVByb3BzfVxuICAgICAgICA+XG4gICAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMuY29udGFpbmVyLCBibG9ja1N0eWxlLCBzdHlsZV19IHsuLi5wcm9wc30+XG4gICAgICAgICAgICA8SWNvbiB7Li4uaWNvblByb3BzfSAvPlxuICAgICAgICAgICAge3R5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycgPyAoXG4gICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLnRleHQsIGNvbG9yU3R5bGVdfSBzZWxlY3RhYmxlPXtmYWxzZX0+XG4gICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICBjaGlsZHJlblxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgIDwvVG91Y2hhYmxlSGlnaGxpZ2h0PlxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksWUFBQSxHQUFBSixPQUFBO0FBQTRDLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUFBLElBQUFNLFlBQUE7QUFBQSxJQUFBQyxTQUFBO0FBQUEsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFWLHdCQUFBYyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdB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