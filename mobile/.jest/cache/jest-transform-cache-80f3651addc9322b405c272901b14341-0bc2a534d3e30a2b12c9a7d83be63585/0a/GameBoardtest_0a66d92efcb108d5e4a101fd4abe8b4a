8369c748c13edccf97d4ee0c450c359b
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
describe('GameBoard Component', function () {
  test('should render the correct number of Gem components based on the players prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
        players: players
      })),
      getAllByTestId = _ref.getAllByTestId;
    var gemComponents = getAllByTestId('gem-container');
    var playerGemImages = getAllByTestId('player-gem-image');
    expect(playerGemImages.length).toEqual(2);
    expect(gemComponents.length).toEqual(72);
  });
  test('should render plan numbers for empty spaces', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
        players: players
      })),
      getByText = _ref2.getByText;
    var emptyPlanNumbers = [68, 69, 70, 71, 72];
    emptyPlanNumbers.forEach(function (planNumber) {
      var gemImage = getByText(planNumber.toString());
      expect(gemImage).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsImRlc2NyaWJlIiwidGVzdCIsIl9yZWYiLCJyZW5kZXIiLCJfanN4UnVudGltZSIsImpzeCIsIkdhbWVCb2FyZCIsImdldEFsbEJ5VGVzdElkIiwiZ2VtQ29tcG9uZW50cyIsInBsYXllckdlbUltYWdlcyIsImV4cGVjdCIsImxlbmd0aCIsInRvRXF1YWwiLCJfcmVmMiIsImdldEJ5VGV4dCIsImVtcHR5UGxhbk51bWJlcnMiLCJmb3JFYWNoIiwicGxhbk51bWJlciIsImdlbUltYWdlIiwidG9TdHJpbmciLCJ0b0JlVHJ1dGh5Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9HYW1lQm9hcmQvR2FtZUJvYXJkLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICd0eXBlcydcblxuaW1wb3J0IHsgR2FtZUJvYXJkIH0gZnJvbSAnLi4vJ1xuXG5jb25zdCBwbGF5ZXJzOiBQbGF5ZXJbXSA9IFtcbiAge1xuICAgIGlkOiAyLFxuICAgIHBsYW46IDcyLFxuICAgIGF2YXRhcjogMTA2LFxuICB9LFxuICB7XG4gICAgaWQ6IDQsXG4gICAgcGxhbjogMzQsXG4gICAgYXZhdGFyOlxuICAgICAgJ2h0dHBzOi8vYmFma3JlaWZ0cm1mbWltbHZvMjZ4YXhmdnQyeXBuamphYXZxNW1nbmtqbGpzNm1jemZla2lpNGNtdHEuaXBmcy5uZnRzdG9yYWdlLmxpbmsvJyxcbiAgfSxcbl1cblxuZGVzY3JpYmUoJ0dhbWVCb2FyZCBDb21wb25lbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG4gICAgY29uc3QgZ2VtQ29tcG9uZW50cyA9IGdldEFsbEJ5VGVzdElkKCdnZW0tY29udGFpbmVyJylcbiAgICBjb25zdCBwbGF5ZXJHZW1JbWFnZXMgPSBnZXRBbGxCeVRlc3RJZCgncGxheWVyLWdlbS1pbWFnZScpXG4gICAgZXhwZWN0KHBsYXllckdlbUltYWdlcy5sZW5ndGgpLnRvRXF1YWwoMikgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwIDIg0LjQs9GA0L7QutCwXG4gICAgZXhwZWN0KGdlbUNvbXBvbmVudHMubGVuZ3RoKS50b0VxdWFsKDcyKSAvLyDQn9GA0L7QstC10YDQutCwINC90LAg0L7QsdGJ0LXQtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQutC+0LzQv9C+0L3QtdC90YLQvtCyIEdlbVxuICB9KVxuXG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgcGxhbiBudW1iZXJzIGZvciBlbXB0eSBzcGFjZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuICAgIGNvbnN0IGVtcHR5UGxhbk51bWJlcnMgPSBbNjgsIDY5LCA3MCwgNzEsIDcyXVxuICAgIGVtcHR5UGxhbk51bWJlcnMuZm9yRWFjaCgocGxhbk51bWJlcikgPT4ge1xuICAgICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRleHQocGxhbk51bWJlci50b1N0cmluZygpKVxuICAgICAgZXhwZWN0KGdlbUltYWdlKS50b0JlVHJ1dGh5KClcbiAgICB9KVxuICB9KVxufSlcblxuLy8gdGVzdCgnc2hvdWxkIHJlbmRlciBwbGF5ZXIgYXZhdGFycycsICgpID0+IHtcbi8vICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG5cbi8vICAgcGxheWVycy5mb3JFYWNoKChwbGF5ZXIpID0+IHtcbi8vICAgICBjb25zdCBnZW1JbWFnZSA9IGdldEJ5VGVzdElkKGBnZW0tJHtwbGF5ZXIuaWR9YClcbi8vICAgICBleHBlY3QoZ2VtSW1hZ2UpLnRvQmVUcnV0aHkoKVxuLy8gICB9KVxuLy8gfSlcblxuLy8gdGVzdCgnc2hvdWxkIHJlbmRlciB0aGUgY29ycmVjdCBudW1iZXIgb2YgR2VtIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIHBsYXllcnMgcHJvcCcsICgpID0+IHtcbi8vICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG5cbi8vICAgY29uc3QgZ2VtQ29tcG9uZW50cyA9IGdldEFsbEJ5VGVzdElkKC9eZ2VtLVxcZCskLylcbi8vICAgZXhwZWN0KGdlbUNvbXBvbmVudHMubGVuZ3RoKS50b0VxdWFsKDcyKSAvLyDQntCx0YnQtdC1INC60L7Qu9C40YfQtdGB0YLQstC+IEdlbSDQutC+0LzQv9C+0L3QtdC90YLQvtCyINCx0LXQtyDQv9GD0YHRgtGL0YUg0Y/Rh9C10LXQulxuLy8gfSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBR0EsSUFBQUUsR0FBQSxHQUFBRixPQUFBO0FBRUEsSUFBTUcsT0FBTyxHQUFhLENBQ3hCO0VBQ0VDLEVBQUUsRUFBRSxDQUFDO0VBQ0xDLElBQUksRUFBRSxFQUFFO0VBQ1JDLE1BQU0sRUFBRTtDQUNULEVBQ0Q7RUFDRUYsRUFBRSxFQUFFLENBQUM7RUFDTEMsSUFBSSxFQUFFLEVBQUU7RUFDUkMsTUFBTSxFQUNKO0NBQ0gsQ0FDRjtBQUVEQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsWUFBSztFQUNuQ0MsSUFBSSxDQUFDLDhFQUE4RSxFQUFFLFlBQUs7SUFDeEYsSUFBQUMsSUFBQSxHQUEyQixJQUFBUixjQUFBLENBQUFTLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1YsR0FBQSxDQUFBVyxTQUFTO1FBQUNWLE9BQU8sRUFBRUE7TUFBUSxFQUFHLENBQUM7TUFBMURXLGNBQWMsR0FBQUwsSUFBQSxDQUFkSyxjQUFjO0lBQ3RCLElBQU1DLGFBQWEsR0FBR0QsY0FBYyxDQUFDLGVBQWUsQ0FBQztJQUNyRCxJQUFNRSxlQUFlLEdBQUdGLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQztJQUMxREcsTUFBTSxDQUFDRCxlQUFlLENBQUNFLE1BQU0sQ0FBQyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3pDRixNQUFNLENBQUNGLGFBQWEsQ0FBQ0csTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxFQUFFLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0VBRUZYLElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxZQUFLO0lBQ3ZELElBQUFZLEtBQUEsR0FBc0IsSUFBQW5CLGNBQUEsQ0FBQVMsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVixHQUFBLENBQUFXLFNBQVM7UUFBQ1YsT0FBTyxFQUFFQTtNQUFRLEVBQUcsQ0FBQztNQUFyRGtCLFNBQVMsR0FBQUQsS0FBQSxDQUFUQyxTQUFTO0lBQ2pCLElBQU1DLGdCQUFnQixHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUM3Q0EsZ0JBQWdCLENBQUNDLE9BQU8sQ0FBQyxVQUFDQyxVQUFVLEVBQUk7TUFDdEMsSUFBTUMsUUFBUSxHQUFHSixTQUFTLENBQUNHLFVBQVUsQ0FBQ0UsUUFBUSxFQUFFLENBQUM7TUFDakRULE1BQU0sQ0FBQ1EsUUFBUSxDQUFDLENBQUNFLFVBQVUsRUFBRTtJQUMvQixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==