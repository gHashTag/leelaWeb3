{"version":3,"names":["mergeOutcomes","map","Map","process","outcome","key","reason","category","existing","get","quantity","set","_len","arguments","length","merge","Array","_key","forEach","outcomes","_toConsumableArray2","default","values"],"sources":["../../../src/js/utils/outcome.ts"],"sourcesContent":["import type { Outcome } from '@sentry/types';\n\n/**\n * Merges buffer with new outcomes.\n */\nexport function mergeOutcomes(...merge: Outcome[][]): Outcome[] {\n  const map = new Map<string, Outcome>();\n\n  const process = (outcome: Outcome): void => {\n    const key = `${outcome.reason}:${outcome.category}`;\n    const existing = map.get(key);\n    if (existing) {\n      existing.quantity += outcome.quantity;\n    } else {\n      map.set(key, outcome);\n    }\n  };\n\n  merge.forEach(outcomes => outcomes.forEach(process));\n\n  return [...map.values()];\n}\n"],"mappings":";;;;;;AAKM,SAAUA,aAAaA,CAAA,EAAsB;EACjD,IAAMC,GAAG,GAAG,IAAIC,GAAG,EAAmB;EAEtC,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAIC,OAAgB,EAAU;IACzC,IAAMC,GAAG,GAAG,GAAGD,OAAO,CAACE,MAAM,IAAIF,OAAO,CAACG,QAAQ,EAAE;IACnD,IAAMC,QAAQ,GAAGP,GAAG,CAACQ,GAAG,CAACJ,GAAG,CAAC;IAC7B,IAAIG,QAAQ,EAAE;MACZA,QAAQ,CAACE,QAAQ,IAAIN,OAAO,CAACM,QAAQ;KACtC,MAAM;MACLT,GAAG,CAACU,GAAG,CAACN,GAAG,EAAED,OAAO,CAAC;;EAEzB,CAAC;EAAC,SAAAQ,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAX6BC,KAAkB,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAlBF,KAAkB,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EAajDF,KAAK,CAACG,OAAO,CAAC,UAAAC,QAAQ;IAAA,OAAIA,QAAQ,CAACD,OAAO,CAACf,OAAO,CAAC;EAAA,EAAC;EAEpD,WAAAiB,mBAAA,CAAAC,OAAA,EAAWpB,GAAG,CAACqB,MAAM,EAAE;AACzB"}