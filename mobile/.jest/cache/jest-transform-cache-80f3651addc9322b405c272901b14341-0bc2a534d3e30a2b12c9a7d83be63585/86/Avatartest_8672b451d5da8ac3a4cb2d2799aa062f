67bed0ff553b12db40d4dd7a45f4f432
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
require("@testing-library/jest-native/extend-expect");
var Avatar_1 = require("./Avatar");
var react_native_size_matters_1 = require("react-native-size-matters");
describe('Avatar Component', function () {
  it('matches the snapshot', function () {
    var tree = react_test_renderer_1.default.create((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
      plan: 5,
      size: "medium",
      avatar: "avatar-url",
      testID: "avatar-component"
    })).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "medium",
        avatar: "avatar-url",
        testID: "avatar-component"
      })),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('avatar-component')).toBeTruthy();
  });
  it('calls onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "medium",
        avatar: "avatar-url",
        onPress: onPressMock,
        testID: "avatar-component"
      })),
      getByTestId = _ref2.getByTestId;
    var avatarComponent = getByTestId('avatar-component');
    react_native_1.fireEvent.press(avatarComponent);
    expect(onPressMock).toHaveBeenCalled();
  });
  it('displays time icon when isAccept is false', function () {
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "medium",
        avatar: "avatar-url",
        isAccept: false,
        testID: "avatar-component"
      })),
      queryByTestId = _ref3.queryByTestId;
    expect(queryByTestId('avatar-title')).toBeNull();
    expect(queryByTestId('time-icon')).toBeTruthy();
  });
  it('displays text title when isAccept is true', function () {
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "medium",
        avatar: "avatar-url",
        isAccept: true,
        testID: "avatar-component"
      })),
      queryByTestId = _ref4.queryByTestId;
    expect(queryByTestId('avatar-title')).toBeTruthy();
    expect(queryByTestId('avatar-title')).toHaveTextContent('05');
  });
  it('applies correct size styles based on the size prop', function () {
    var _ref5 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "xLarge",
        avatar: "avatar-url",
        testID: "avatar-component"
      })),
      getByTestId = _ref5.getByTestId;
    var avatarComponent = getByTestId('avatar-component');
    var xLarge = {
      marginLeft: 1,
      width: (0, react_native_size_matters_1.ms)(130),
      height: (0, react_native_size_matters_1.ms)(130)
    };
    expect(avatarComponent).toHaveStyle(xLarge);
  });
  it('applies additional style using aditionalStyle prop', function () {
    var additionalStyle = {
      borderWidth: 2,
      borderColor: 'red'
    };
    var _ref6 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Avatar_1.Avatar, {
        plan: 5,
        size: "medium",
        avatar: "avatar-url",
        aditionalStyle: additionalStyle,
        testID: "avatar-component"
      })),
      getByTestId = _ref6.getByTestId;
    var avatarComponent = getByTestId('avatar-component');
    expect(avatarComponent).toHaveStyle(additionalStyle);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,