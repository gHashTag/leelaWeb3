61e17c3e8e338223b844de95515b93eb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNativeErrorHandlers = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _tslib = require("tslib");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var _worldwide = require("../utils/worldwide");
var ReactNativeErrorHandlers = function () {
  function ReactNativeErrorHandlers(options) {
    (0, _classCallCheck2.default)(this, ReactNativeErrorHandlers);
    this.name = ReactNativeErrorHandlers.id;
    this._options = Object.assign({
      onerror: true,
      onunhandledrejection: true,
      patchGlobalPromise: true
    }, options);
  }
  (0, _createClass2.default)(ReactNativeErrorHandlers, [{
    key: "setupOnce",
    value: function setupOnce() {
      this._handleUnhandledRejections();
      this._handleOnError();
    }
  }, {
    key: "_handleUnhandledRejections",
    value: function _handleUnhandledRejections() {
      if (this._options.onunhandledrejection) {
        if (this._options.patchGlobalPromise) {
          this._polyfillPromise();
        }
        this._attachUnhandledRejectionHandler();
        this._checkPromiseAndWarn();
      }
    }
  }, {
    key: "_polyfillPromise",
    value: function _polyfillPromise() {
      var _require = require('react-native/Libraries/Utilities/PolyfillFunctions'),
        polyfillGlobal = _require.polyfillGlobal;
      var Promise = this._getPromisePolyfill();
      require('promise/setimmediate/done');
      require('promise/setimmediate/finally');
      polyfillGlobal('Promise', function () {
        return Promise;
      });
    }
  }, {
    key: "_getPromisePolyfill",
    value: function _getPromisePolyfill() {
      return require('promise/setimmediate/es6-extensions');
    }
  }, {
    key: "_attachUnhandledRejectionHandler",
    value: function _attachUnhandledRejectionHandler() {
      var tracking = require('promise/setimmediate/rejection-tracking');
      var promiseRejectionTrackingOptions = {
        onUnhandled: function onUnhandled(id) {
          var rejection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          console.warn(`Possible Unhandled Promise Rejection (id: ${id}):\n${rejection}`);
        },
        onHandled: function onHandled(id) {
          console.warn(`Promise Rejection Handled (id: ${id})\n` + 'This means you can ignore any previous messages of the form ' + `"Possible Unhandled Promise Rejection (id: ${id}):"`);
        }
      };
      tracking.enable({
        allRejections: true,
        onUnhandled: function onUnhandled(id, error) {
          if (__DEV__) {
            promiseRejectionTrackingOptions.onUnhandled(id, error);
          }
          (0, _core.getCurrentHub)().captureException(error, {
            data: {
              id: id
            },
            originalException: error
          });
        },
        onHandled: function onHandled(id) {
          promiseRejectionTrackingOptions.onHandled(id);
        }
      });
    }
  }, {
    key: "_checkPromiseAndWarn",
    value: function _checkPromiseAndWarn() {
      try {
        var ReactNativePromise = require('react-native/Libraries/Promise');
        var PromisePackagePromise = require('promise/setimmediate/es6-extensions');
        var UsedPromisePolyfill = this._getPromisePolyfill();
        if (ReactNativePromise !== PromisePackagePromise) {
          _utils.logger.warn('You appear to have multiple versions of the "promise" package installed. ' + 'This may cause unexpected behavior like undefined `Promise.allSettled`. ' + 'Please install the `promise` package manually using the exact version as the React Native package. ' + 'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.');
        }
        if (UsedPromisePolyfill !== _worldwide.RN_GLOBAL_OBJ.Promise) {
          _utils.logger.warn('Unhandled promise rejections will not be caught by Sentry. ' + 'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.');
        } else {
          _utils.logger.log('Unhandled promise rejections will be caught by Sentry.');
        }
      } catch (e) {
        _utils.logger.warn('Unhandled promise rejections will not be caught by Sentry. ' + 'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.');
      }
    }
  }, {
    key: "_handleOnError",
    value: function _handleOnError() {
      var _this = this;
      if (this._options.onerror) {
        var handlingFatal = false;
        var errorUtils = _worldwide.RN_GLOBAL_OBJ.ErrorUtils;
        if (!errorUtils) {
          _utils.logger.warn('ErrorUtils not found. Can be caused by different environment for example react-native-web.');
          return;
        }
        var defaultHandler = errorUtils.getGlobalHandler && errorUtils.getGlobalHandler();
        errorUtils.setGlobalHandler(function (error, isFatal) {
          return (0, _tslib.__awaiter)(_this, void 0, void 0, function* () {
            var shouldHandleFatal = isFatal && !__DEV__;
            if (shouldHandleFatal) {
              if (handlingFatal) {
                _utils.logger.log('Encountered multiple fatals in a row. The latest:', error);
                return;
              }
              handlingFatal = true;
            }
            var currentHub = (0, _core.getCurrentHub)();
            var client = currentHub.getClient();
            var scope = currentHub.getScope();
            if (!client) {
              _utils.logger.error('Sentry client is missing, the error event might be lost.', error);
              defaultHandler(error, isFatal);
              return;
            }
            var options = client.getOptions();
            var hint = {
              originalException: error,
              attachments: scope === null || scope === void 0 ? void 0 : scope.getAttachments()
            };
            var event = yield client.eventFromException(error, hint);
            if (isFatal) {
              event.level = 'fatal';
              (0, _utils.addExceptionMechanism)(event, {
                handled: false,
                type: 'onerror'
              });
            }
            currentHub.captureEvent(event, hint);
            if (!__DEV__) {
              void client.flush(options.shutdownTimeout || 2000).then(function () {
                defaultHandler(error, isFatal);
              });
            } else {
              defaultHandler(error, isFatal);
            }
          });
        });
      }
    }
  }]);
  return ReactNativeErrorHandlers;
}();
exports.ReactNativeErrorHandlers = ReactNativeErrorHandlers;
ReactNativeErrorHandlers.id = 'ReactNativeErrorHandlers';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,