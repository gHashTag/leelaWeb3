3693d269e068e87f12a6832e608a5c28
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var CommentBubbleRight_1 = require("./CommentBubbleRight");
describe('CommentBubbleRight Component', function () {
  var mockPost = {
    id: 123,
    createTime: 1628779200000,
    liked: ['user456'],
    comments: [],
    ownerId: 'user123',
    text: 'Test comment text',
    plan: 1,
    accept: true
  };
  var mockFullName = 'John Doe';
  var mockAvatar = 'avatar-url';
  var mockDate = '2023-08-12';
  var mockHandleProfile = jest.fn();
  var mockOnPress = jest.fn();
  it('renders correctly', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(CommentBubbleRight_1.CommentBubbleRight, {
        post: mockPost,
        fullName: mockFullName,
        avatar: mockAvatar,
        date: mockDate,
        handleProfile: mockHandleProfile,
        onPress: mockOnPress
      })),
      getByTestId = _ref.getByTestId,
      getByText = _ref.getByText;
    var commentBubbleContainer = getByTestId('comment-bubble-right-container');
    var commentText = getByText('Test comment text');
    var fullName = getByText('John Doe');
    var date = getByText('2023-08-12');
    expect(commentBubbleContainer).toBeTruthy();
    expect(commentText).toBeTruthy();
    expect(fullName).toBeTruthy();
    expect(date).toBeTruthy();
    react_native_1.fireEvent.press(commentBubbleContainer);
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiQ29tbWVudEJ1YmJsZVJpZ2h0XzEiLCJkZXNjcmliZSIsIm1vY2tQb3N0IiwiaWQiLCJjcmVhdGVUaW1lIiwibGlrZWQiLCJjb21tZW50cyIsIm93bmVySWQiLCJ0ZXh0IiwicGxhbiIsImFjY2VwdCIsIm1vY2tGdWxsTmFtZSIsIm1vY2tBdmF0YXIiLCJtb2NrRGF0ZSIsIm1vY2tIYW5kbGVQcm9maWxlIiwiamVzdCIsImZuIiwibW9ja09uUHJlc3MiLCJpdCIsIl9yZWYiLCJyZW5kZXIiLCJfanN4UnVudGltZSIsImpzeCIsIkNvbW1lbnRCdWJibGVSaWdodCIsInBvc3QiLCJmdWxsTmFtZSIsImF2YXRhciIsImRhdGUiLCJoYW5kbGVQcm9maWxlIiwib25QcmVzcyIsImdldEJ5VGVzdElkIiwiZ2V0QnlUZXh0IiwiY29tbWVudEJ1YmJsZUNvbnRhaW5lciIsImNvbW1lbnRUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9Db21tZW50QnViYmxlUmlnaHQvQ29tbWVudEJ1YmJsZVJpZ2h0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcblxuaW1wb3J0IHsgQ29tbWVudEJ1YmJsZVJpZ2h0IH0gZnJvbSAnLi9Db21tZW50QnViYmxlUmlnaHQnXG5cbmRlc2NyaWJlKCdDb21tZW50QnViYmxlUmlnaHQgQ29tcG9uZW50JywgKCkgPT4ge1xuICBjb25zdCBtb2NrUG9zdCA9IHtcbiAgICBpZDogMTIzLCAvLyBBZGQgaWQgcHJvcGVydHlcbiAgICBjcmVhdGVUaW1lOiAxNjI4Nzc5MjAwMDAwLFxuICAgIGxpa2VkOiBbJ3VzZXI0NTYnXSxcbiAgICBjb21tZW50czogW10sIC8vIEFkZCBjb21tZW50cyBwcm9wZXJ0eVxuICAgIG93bmVySWQ6ICd1c2VyMTIzJywgLy8gQWRkIG93bmVySWQgcHJvcGVydHlcbiAgICB0ZXh0OiAnVGVzdCBjb21tZW50IHRleHQnLFxuICAgIHBsYW46IDEsXG4gICAgYWNjZXB0OiB0cnVlLFxuICB9XG4gIGNvbnN0IG1vY2tGdWxsTmFtZSA9ICdKb2huIERvZSdcbiAgY29uc3QgbW9ja0F2YXRhciA9ICdhdmF0YXItdXJsJ1xuICBjb25zdCBtb2NrRGF0ZSA9ICcyMDIzLTA4LTEyJ1xuICBjb25zdCBtb2NrSGFuZGxlUHJvZmlsZSA9IGplc3QuZm4oKVxuICBjb25zdCBtb2NrT25QcmVzcyA9IGplc3QuZm4oKVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxDb21tZW50QnViYmxlUmlnaHRcbiAgICAgICAgcG9zdD17bW9ja1Bvc3R9XG4gICAgICAgIGZ1bGxOYW1lPXttb2NrRnVsbE5hbWV9XG4gICAgICAgIGF2YXRhcj17bW9ja0F2YXRhcn1cbiAgICAgICAgZGF0ZT17bW9ja0RhdGV9XG4gICAgICAgIGhhbmRsZVByb2ZpbGU9e21vY2tIYW5kbGVQcm9maWxlfVxuICAgICAgICBvblByZXNzPXttb2NrT25QcmVzc31cbiAgICAgIC8+LFxuICAgIClcblxuICAgIGNvbnN0IGNvbW1lbnRCdWJibGVDb250YWluZXIgPSBnZXRCeVRlc3RJZCgnY29tbWVudC1idWJibGUtcmlnaHQtY29udGFpbmVyJylcbiAgICBjb25zdCBjb21tZW50VGV4dCA9IGdldEJ5VGV4dCgnVGVzdCBjb21tZW50IHRleHQnKVxuICAgIGNvbnN0IGZ1bGxOYW1lID0gZ2V0QnlUZXh0KCdKb2huIERvZScpXG4gICAgY29uc3QgZGF0ZSA9IGdldEJ5VGV4dCgnMjAyMy0wOC0xMicpXG5cbiAgICAvLyBDaGVjayBpZiB0aGUgY29tcG9uZW50IHJlbmRlcnNcbiAgICBleHBlY3QoY29tbWVudEJ1YmJsZUNvbnRhaW5lcikudG9CZVRydXRoeSgpXG5cbiAgICAvLyBDaGVjayBpZiB0aGUgcG9zdCB0ZXh0IHJlbmRlcnNcbiAgICBleHBlY3QoY29tbWVudFRleHQpLnRvQmVUcnV0aHkoKVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGZ1bGwgbmFtZSByZW5kZXJzXG4gICAgZXhwZWN0KGZ1bGxOYW1lKS50b0JlVHJ1dGh5KClcblxuICAgIC8vIENoZWNrIGlmIHRoZSBkYXRlIHJlbmRlcnNcbiAgICBleHBlY3QoZGF0ZSkudG9CZVRydXRoeSgpXG5cbiAgICAvLyBTaW11bGF0ZSBwcmVzcyBvbiB0aGUgY29tcG9uZW50XG4gICAgZmlyZUV2ZW50LnByZXNzKGNvbW1lbnRCdWJibGVDb250YWluZXIpXG5cbiAgICAvLyBDaGVjayBpZiB0aGUgb25QcmVzcyBjYWxsYmFjayB3YXMgY2FsbGVkXG4gICAgZXhwZWN0KG1vY2tPblByZXNzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLG9CQUFBLEdBQUFGLE9BQUE7QUFFQUcsUUFBUSxDQUFDLDhCQUE4QixFQUFFLFlBQUs7RUFDNUMsSUFBTUMsUUFBUSxHQUFHO0lBQ2ZDLEVBQUUsRUFBRSxHQUFHO0lBQ1BDLFVBQVUsRUFBRSxhQUFhO0lBQ3pCQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUM7SUFDbEJDLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLE9BQU8sRUFBRSxTQUFTO0lBQ2xCQyxJQUFJLEVBQUUsbUJBQW1CO0lBQ3pCQyxJQUFJLEVBQUUsQ0FBQztJQUNQQyxNQUFNLEVBQUU7R0FDVDtFQUNELElBQU1DLFlBQVksR0FBRyxVQUFVO0VBQy9CLElBQU1DLFVBQVUsR0FBRyxZQUFZO0VBQy9CLElBQU1DLFFBQVEsR0FBRyxZQUFZO0VBQzdCLElBQU1DLGlCQUFpQixHQUFHQyxJQUFJLENBQUNDLEVBQUUsRUFBRTtFQUNuQyxJQUFNQyxXQUFXLEdBQUdGLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0VBRTdCRSxFQUFFLENBQUMsbUJBQW1CLEVBQUUsWUFBSztJQUMzQixJQUFBQyxJQUFBLEdBQW1DLElBQUFwQixjQUFBLENBQUFxQixNQUFNLEVBQ3ZDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDdEIsb0JBQUEsQ0FBQXVCLGtCQUFrQjtRQUNqQkMsSUFBSSxFQUFFdEIsUUFBUztRQUNmdUIsUUFBUSxFQUFFZCxZQUFhO1FBQ3ZCZSxNQUFNLEVBQUVkLFVBQVc7UUFDbkJlLElBQUksRUFBRWQsUUFBUztRQUNmZSxhQUFhLEVBQUVkLGlCQUFrQjtRQUNqQ2UsT0FBTyxFQUFFWjtNQUFZLEVBQ3JCLENBQ0g7TUFUT2EsV0FBVyxHQUFBWCxJQUFBLENBQVhXLFdBQVc7TUFBRUMsU0FBUyxHQUFBWixJQUFBLENBQVRZLFNBQVM7SUFXOUIsSUFBTUMsc0JBQXNCLEdBQUdGLFdBQVcsQ0FBQyxnQ0FBZ0MsQ0FBQztJQUM1RSxJQUFNRyxXQUFXLEdBQUdGLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztJQUNsRCxJQUFNTixRQUFRLEdBQUdNLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDdEMsSUFBTUosSUFBSSxHQUFHSSxTQUFTLENBQUMsWUFBWSxDQUFDO0lBR3BDRyxNQUFNLENBQUNGLHNCQUFzQixDQUFDLENBQUNHLFVBQVUsRUFBRTtJQUczQ0QsTUFBTSxDQUFDRCxXQUFXLENBQUMsQ0FBQ0UsVUFBVSxFQUFFO0lBR2hDRCxNQUFNLENBQUNULFFBQVEsQ0FBQyxDQUFDVSxVQUFVLEVBQUU7SUFHN0JELE1BQU0sQ0FBQ1AsSUFBSSxDQUFDLENBQUNRLFVBQVUsRUFBRTtJQUd6QnBDLGNBQUEsQ0FBQXFDLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDTCxzQkFBc0IsQ0FBQztJQUd2Q0UsTUFBTSxDQUFDakIsV0FBVyxDQUFDLENBQUNxQixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=