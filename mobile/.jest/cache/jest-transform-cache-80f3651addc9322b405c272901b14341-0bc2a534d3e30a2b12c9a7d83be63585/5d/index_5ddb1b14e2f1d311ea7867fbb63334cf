358c07bee81b22b1d1364f5db6157b85
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx";
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dice = void 0;
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var react_native_size_matters_1 = require("react-native-size-matters");
var getImage = function getImage(number) {
  switch (number) {
    case 1:
      return require('./assets/1.png');
    case 2:
      return require('./assets/2.png');
    case 3:
      return require('./assets/3.png');
    case 4:
      return require('./assets/4.png');
    case 5:
      return require('./assets/5.png');
    case 6:
      return require('./assets/6.png');
  }
};
var Dice = function Dice(_ref) {
  var count = _ref.count,
    players = _ref.players,
    disabled = _ref.disabled,
    canGo = _ref.canGo,
    isReported = _ref.isReported,
    updateStep = _ref.updateStep,
    random = _ref.random;
  var _ref2 = (0, react_1.useState)(true),
    _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
    canRoll = _ref3[0],
    setCanRoll = _ref3[1];
  var spinValue = (0, react_1.useRef)(new react_native_1.Animated.Value(0)).current;
  var handleSpin = function handleSpin(value) {
    var duration = value / 2 * 500;
    spinValue.setValue(0);
    react_native_1.Animated.timing(spinValue, {
      toValue: value,
      duration: duration,
      easing: react_native_1.Easing.linear,
      useNativeDriver: true
    }).start(function () {
      disabled ? updateStep() : updateStep(players - 1);
      setTimeout(function () {
        return setCanRoll(true);
      }, 200);
    });
  };
  var isOpacity = !canGo && disabled || disabled && !isReported;
  var spin = spinValue.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '360deg']
  });
  var rollDice = function rollDice() {
    if (isOpacity) {
      return;
    }
    setCanRoll(false);
    random();
    handleSpin(count);
  };
  return (0, _jsxRuntime.jsx)(react_native_1.Pressable, {
    onPress: function onPress() {
      canRoll && rollDice();
    },
    style: [styles.diceContainer, isOpacity && styles.opacityCube],
    testID: "dice-component",
    children: (0, _jsxRuntime.jsx)(react_native_1.Animated.Image, {
      style: [styles.image, {
        transform: [{
          rotate: spin
        }]
      }],
      source: getImage(count)
    })
  });
};
exports.Dice = Dice;
var styles = react_native_1.StyleSheet.create({
  diceContainer: {
    alignItems: 'center',
    alignSelf: 'center',
    marginVertical: (0, react_native_size_matters_1.vs)(12)
  },
  image: {
    height: (0, react_native_size_matters_1.vs)(65),
    width: (0, react_native_size_matters_1.vs)(65)
  },
  opacityCube: {
    opacity: 0.4
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,