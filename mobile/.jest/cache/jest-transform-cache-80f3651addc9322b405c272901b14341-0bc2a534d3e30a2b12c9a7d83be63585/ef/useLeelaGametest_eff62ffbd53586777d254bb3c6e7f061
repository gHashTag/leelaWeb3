7bf36012fad03141e2460f20a9ecf5cc
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return mockAsyncStorage;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_hooks_1 = require("@testing-library/react-hooks");
var mock_async_storage_1 = __importDefault(require("mock-async-storage"));
var useLeelaGame_1 = require("./useLeelaGame");
var mockAsyncStorage = new mock_async_storage_1.default();
describe('useLeelaGame', function () {
  beforeEach(function () {
    mockAsyncStorage.clear();
  });
  it('should initialize state correctly', (0, _asyncToGenerator2.default)(function* () {
    var initialState = {
      currentPlayer: {
        id: 1,
        plan: 68,
        previousPlan: 68,
        isStart: false,
        isFinished: false,
        consecutiveSixes: 0,
        message: 'sixToBegin',
        positionBeforeThreeSixes: 0,
        avatar: 'avatar.png'
      },
      lastRoll: 1,
      rollHistory: [],
      planHistory: [68]
    };
    mockAsyncStorage.setItem('leelaGameState', JSON.stringify(initialState));
    var _ref2 = (0, react_hooks_1.renderHook)(function () {
        return (0, useLeelaGame_1.useLeelaGame)();
      }),
      result = _ref2.result,
      waitForNextUpdate = _ref2.waitForNextUpdate;
    (0, react_hooks_1.act)(function () {
      result.current.rollDice();
    });
    yield waitForNextUpdate();
    expect(result.current.currentPlayer).toEqual(initialState.currentPlayer);
    expect(result.current.rollHistory).toEqual(initialState.rollHistory);
    expect(result.current.planHistory).toEqual(initialState.planHistory);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJtb2NrQXN5bmNTdG9yYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVxdWlyZSIsImplc3QiLCJyZWFjdF9ob29rc18xIiwibW9ja19hc3luY19zdG9yYWdlXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJ1c2VMZWVsYUdhbWVfMSIsImRlZmF1bHQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhciIsIml0IiwiaW5pdGlhbFN0YXRlIiwiY3VycmVudFBsYXllciIsImlkIiwicGxhbiIsInByZXZpb3VzUGxhbiIsImlzU3RhcnQiLCJpc0ZpbmlzaGVkIiwiY29uc2VjdXRpdmVTaXhlcyIsIm1lc3NhZ2UiLCJwb3NpdGlvbkJlZm9yZVRocmVlU2l4ZXMiLCJhdmF0YXIiLCJsYXN0Um9sbCIsInJvbGxIaXN0b3J5IiwicGxhbkhpc3RvcnkiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9yZWYyIiwicmVuZGVySG9vayIsInVzZUxlZWxhR2FtZSIsInJlc3VsdCIsIndhaXRGb3JOZXh0VXBkYXRlIiwiYWN0IiwiY3VycmVudCIsInJvbGxEaWNlIiwiZXhwZWN0IiwidG9FcXVhbCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2hvb2tzL3VzZUxlZWxhR2FtZS91c2VMZWVsYUdhbWUudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1ob29rcydcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBNb2NrQXN5bmNTdG9yYWdlIGZyb20gJ21vY2stYXN5bmMtc3RvcmFnZSdcblxuaW1wb3J0IHsgdXNlTGVlbGFHYW1lIH0gZnJvbSAnLi91c2VMZWVsYUdhbWUnXG5cbmNvbnN0IG1vY2tBc3luY1N0b3JhZ2UgPSBuZXcgTW9ja0FzeW5jU3RvcmFnZSgpXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gbW9ja0FzeW5jU3RvcmFnZSlcblxuZGVzY3JpYmUoJ3VzZUxlZWxhR2FtZScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja0FzeW5jU3RvcmFnZS5jbGVhcigpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHN0YXRlIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgICBjdXJyZW50UGxheWVyOiB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBwbGFuOiA2OCxcbiAgICAgICAgcHJldmlvdXNQbGFuOiA2OCxcbiAgICAgICAgaXNTdGFydDogZmFsc2UsXG4gICAgICAgIGlzRmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICBjb25zZWN1dGl2ZVNpeGVzOiAwLFxuICAgICAgICBtZXNzYWdlOiAnc2l4VG9CZWdpbicsXG4gICAgICAgIHBvc2l0aW9uQmVmb3JlVGhyZWVTaXhlczogMCxcbiAgICAgICAgYXZhdGFyOiAnYXZhdGFyLnBuZycsXG4gICAgICB9LFxuICAgICAgbGFzdFJvbGw6IDEsXG4gICAgICByb2xsSGlzdG9yeTogW10sXG4gICAgICBwbGFuSGlzdG9yeTogWzY4XSxcbiAgICB9XG5cbiAgICAvLyBNb2NrIEFzeW5jU3RvcmFnZS5nZXRJdGVtXG4gICAgbW9ja0FzeW5jU3RvcmFnZS5zZXRJdGVtKCdsZWVsYUdhbWVTdGF0ZScsIEpTT04uc3RyaW5naWZ5KGluaXRpYWxTdGF0ZSkpXG5cbiAgICBjb25zdCB7IHJlc3VsdCwgd2FpdEZvck5leHRVcGRhdGUgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGVlbGFHYW1lKCkpXG5cbiAgICAvLyBDYWxsIHRoZSBmdW5jdGlvbiB0aGF0IHRyaWdnZXJzIHN0YXRlIGNoYW5nZVxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5yb2xsRGljZSgpXG4gICAgfSlcblxuICAgIC8vIFdhaXQgZm9yIHRoZSBuZXh0IHVwZGF0ZVxuICAgIGF3YWl0IHdhaXRGb3JOZXh0VXBkYXRlKClcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50UGxheWVyKS50b0VxdWFsKGluaXRpYWxTdGF0ZS5jdXJyZW50UGxheWVyKVxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5yb2xsSGlzdG9yeSkudG9FcXVhbChpbml0aWFsU3RhdGUucm9sbEhpc3RvcnkpXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnBsYW5IaXN0b3J5KS50b0VxdWFsKGluaXRpYWxTdGF0ZS5wbGFuSGlzdG9yeSlcbiAgfSlcblxuICAvLyBUZXN0IG90aGVyIHNjZW5hcmlvcyBzaW1pbGFybHlcbn0pXG4iXSwibWFwcGluZ3MiOiI7O0FBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTUMsZ0JBQWdCO0FBQUEsRUFBQztBQUFBLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQUosWUFBQTtFQUFBLElBQUFNLFFBQUEsR0FBQUYsT0FBQTtJQUFBRyxJQUFBLEdBQUFELFFBQUEsQ0FBQUMsSUFBQTtFQUFBUCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBTyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7Ozs7Ozs7OztBQVA5RSxJQUFBQyxhQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxvQkFBQSxHQUFBQyxlQUFBLENBQUFOLE9BQUE7QUFFQSxJQUFBTyxjQUFBLEdBQUFQLE9BQUE7QUFFQSxJQUFNRixnQkFBZ0IsR0FBRyxJQUFJTyxvQkFBQSxDQUFBRyxPQUFnQixFQUFFO0FBRy9DQyxRQUFRLENBQUMsY0FBYyxFQUFFLFlBQUs7RUFDNUJDLFVBQVUsQ0FBQyxZQUFLO0lBQ2RaLGdCQUFnQixDQUFDYSxLQUFLLEVBQUU7RUFDMUIsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyxtQ0FBbUMsTUFBQVgsa0JBQUEsQ0FBQU8sT0FBQSxFQUFFLGFBQVc7SUFDakQsSUFBTUssWUFBWSxHQUFHO01BQ25CQyxhQUFhLEVBQUU7UUFDYkMsRUFBRSxFQUFFLENBQUM7UUFDTEMsSUFBSSxFQUFFLEVBQUU7UUFDUkMsWUFBWSxFQUFFLEVBQUU7UUFDaEJDLE9BQU8sRUFBRSxLQUFLO1FBQ2RDLFVBQVUsRUFBRSxLQUFLO1FBQ2pCQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ25CQyxPQUFPLEVBQUUsWUFBWTtRQUNyQkMsd0JBQXdCLEVBQUUsQ0FBQztRQUMzQkMsTUFBTSxFQUFFO09BQ1Q7TUFDREMsUUFBUSxFQUFFLENBQUM7TUFDWEMsV0FBVyxFQUFFLEVBQUU7TUFDZkMsV0FBVyxFQUFFLENBQUMsRUFBRTtLQUNqQjtJQUdENUIsZ0JBQWdCLENBQUM2QixPQUFPLENBQUMsZ0JBQWdCLEVBQUVDLElBQUksQ0FBQ0MsU0FBUyxDQUFDaEIsWUFBWSxDQUFDLENBQUM7SUFFeEUsSUFBQWlCLEtBQUEsR0FBc0MsSUFBQTFCLGFBQUEsQ0FBQTJCLFVBQVUsRUFBQztRQUFBLE9BQU0sSUFBQXhCLGNBQUEsQ0FBQXlCLFlBQVksR0FBRTtNQUFBLEVBQUM7TUFBOURDLE1BQU0sR0FBQUgsS0FBQSxDQUFORyxNQUFNO01BQUVDLGlCQUFpQixHQUFBSixLQUFBLENBQWpCSSxpQkFBaUI7SUFHakMsSUFBQTlCLGFBQUEsQ0FBQStCLEdBQUcsRUFBQyxZQUFLO01BQ1BGLE1BQU0sQ0FBQ0csT0FBTyxDQUFDQyxRQUFRLEVBQUU7SUFDM0IsQ0FBQyxDQUFDO0lBR0YsTUFBTUgsaUJBQWlCLEVBQUU7SUFFekJJLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDRyxPQUFPLENBQUN0QixhQUFhLENBQUMsQ0FBQ3lCLE9BQU8sQ0FBQzFCLFlBQVksQ0FBQ0MsYUFBYSxDQUFDO0lBQ3hFd0IsTUFBTSxDQUFDTCxNQUFNLENBQUNHLE9BQU8sQ0FBQ1gsV0FBVyxDQUFDLENBQUNjLE9BQU8sQ0FBQzFCLFlBQVksQ0FBQ1ksV0FBVyxDQUFDO0lBQ3BFYSxNQUFNLENBQUNMLE1BQU0sQ0FBQ0csT0FBTyxDQUFDVixXQUFXLENBQUMsQ0FBQ2EsT0FBTyxDQUFDMUIsWUFBWSxDQUFDYSxXQUFXLENBQUM7RUFDdEUsQ0FBQyxFQUFDO0FBR0osQ0FBQyxDQUFDIn0=