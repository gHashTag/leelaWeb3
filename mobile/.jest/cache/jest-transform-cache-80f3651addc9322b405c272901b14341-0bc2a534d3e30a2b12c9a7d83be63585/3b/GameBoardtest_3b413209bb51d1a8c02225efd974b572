29d6da2a9a4d438cf610c84a1405762b
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
describe('GameBoard Component', function () {
  test('should render the correct number of Gem components based on the players prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
        players: players
      })),
      getAllByTestId = _ref.getAllByTestId;
    var gemComponents = getAllByTestId('gem-container');
    var playerGemImages = getAllByTestId('player-gem-image');
    expect(playerGemImages.length).toEqual(2);
    expect(gemComponents.length).toEqual(72);
  });
  test('should render correct player avatars', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
        players: players
      })),
      getAllByTestId = _ref2.getAllByTestId,
      queryByTestId = _ref2.queryByTestId;
    players.forEach(function (player) {
      var gemImage = getAllByTestId(`gem-${player.id}`)[0];
      expect(gemImage).toBeTruthy();
      if (typeof player.avatar === 'string') {
        var playerGemImage = queryByTestId(`player-gem-image-${player.id}`);
        expect(playerGemImage).toBeTruthy();
        expect(playerGemImage == null ? void 0 : playerGemImage.props.source.uri).toEqual(player.avatar);
      } else {
        var _playerGemImage = queryByTestId(`player-gem-image-${player.id}`);
        expect(_playerGemImage).toBeFalsy();
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsImRlc2NyaWJlIiwidGVzdCIsIl9yZWYiLCJyZW5kZXIiLCJfanN4UnVudGltZSIsImpzeCIsIkdhbWVCb2FyZCIsImdldEFsbEJ5VGVzdElkIiwiZ2VtQ29tcG9uZW50cyIsInBsYXllckdlbUltYWdlcyIsImV4cGVjdCIsImxlbmd0aCIsInRvRXF1YWwiLCJfcmVmMiIsInF1ZXJ5QnlUZXN0SWQiLCJmb3JFYWNoIiwicGxheWVyIiwiZ2VtSW1hZ2UiLCJ0b0JlVHJ1dGh5IiwicGxheWVyR2VtSW1hZ2UiLCJwcm9wcyIsInNvdXJjZSIsInVyaSIsInRvQmVGYWxzeSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvR2FtZUJvYXJkL0dhbWVCb2FyZC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAndHlwZXMnXG5cbmltcG9ydCB7IEdhbWVCb2FyZCB9IGZyb20gJy4uLydcblxuY29uc3QgcGxheWVyczogUGxheWVyW10gPSBbXG4gIHtcbiAgICBpZDogMixcbiAgICBwbGFuOiA3MixcbiAgICBhdmF0YXI6IDEwNixcbiAgfSxcbiAge1xuICAgIGlkOiA0LFxuICAgIHBsYW46IDM0LFxuICAgIGF2YXRhcjpcbiAgICAgICdodHRwczovL2JhZmtyZWlmdHJtZm1pbWx2bzI2eGF4ZnZ0MnlwbmpqYWF2cTVtZ25ramxqczZtY3pmZWtpaTRjbXRxLmlwZnMubmZ0c3RvcmFnZS5saW5rLycsXG4gIH0sXG5dXG5cbmRlc2NyaWJlKCdHYW1lQm9hcmQgQ29tcG9uZW50JywgKCkgPT4ge1xuICB0ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBjb3JyZWN0IG51bWJlciBvZiBHZW0gY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgcGxheWVycyBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuICAgIGNvbnN0IGdlbUNvbXBvbmVudHMgPSBnZXRBbGxCeVRlc3RJZCgnZ2VtLWNvbnRhaW5lcicpXG4gICAgY29uc3QgcGxheWVyR2VtSW1hZ2VzID0gZ2V0QWxsQnlUZXN0SWQoJ3BsYXllci1nZW0taW1hZ2UnKVxuICAgIGV4cGVjdChwbGF5ZXJHZW1JbWFnZXMubGVuZ3RoKS50b0VxdWFsKDIpIC8vINCf0YDQvtCy0LXRgNC60LAg0L3QsCAyINC40LPRgNC+0LrQsFxuICAgIGV4cGVjdChnZW1Db21wb25lbnRzLmxlbmd0aCkudG9FcXVhbCg3MikgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwINC+0LHRidC10LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0LrQvtC80L/QvtC90LXQvdGC0L7QsiBHZW1cbiAgfSlcblxuICB0ZXN0KCdzaG91bGQgcmVuZGVyIGNvcnJlY3QgcGxheWVyIGF2YXRhcnMnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCwgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPixcbiAgICApXG4gICAgcGxheWVycy5mb3JFYWNoKChwbGF5ZXIpID0+IHtcbiAgICAgIGNvbnN0IGdlbUltYWdlID0gZ2V0QWxsQnlUZXN0SWQoYGdlbS0ke3BsYXllci5pZH1gKVswXVxuICAgICAgZXhwZWN0KGdlbUltYWdlKS50b0JlVHJ1dGh5KClcblxuICAgICAgaWYgKHR5cGVvZiBwbGF5ZXIuYXZhdGFyID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBwbGF5ZXJHZW1JbWFnZSA9IHF1ZXJ5QnlUZXN0SWQoYHBsYXllci1nZW0taW1hZ2UtJHtwbGF5ZXIuaWR9YClcbiAgICAgICAgZXhwZWN0KHBsYXllckdlbUltYWdlKS50b0JlVHJ1dGh5KClcbiAgICAgICAgZXhwZWN0KHBsYXllckdlbUltYWdlPy5wcm9wcy5zb3VyY2UudXJpKS50b0VxdWFsKHBsYXllci5hdmF0YXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwbGF5ZXJHZW1JbWFnZSA9IHF1ZXJ5QnlUZXN0SWQoYHBsYXllci1nZW0taW1hZ2UtJHtwbGF5ZXIuaWR9YClcbiAgICAgICAgZXhwZWN0KHBsYXllckdlbUltYWdlKS50b0JlRmFsc3koKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG59KVxuXG4vLyB0ZXN0KCdzaG91bGQgcmVuZGVyIHBsYXllciBhdmF0YXJzJywgKCkgPT4ge1xuLy8gICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPilcblxuLy8gICBwbGF5ZXJzLmZvckVhY2goKHBsYXllcikgPT4ge1xuLy8gICAgIGNvbnN0IGdlbUltYWdlID0gZ2V0QnlUZXN0SWQoYGdlbS0ke3BsYXllci5pZH1gKVxuLy8gICAgIGV4cGVjdChnZW1JbWFnZSkudG9CZVRydXRoeSgpXG4vLyAgIH0pXG4vLyB9KVxuXG4vLyB0ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBjb3JyZWN0IG51bWJlciBvZiBHZW0gY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgcGxheWVycyBwcm9wJywgKCkgPT4ge1xuLy8gICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPilcblxuLy8gICBjb25zdCBnZW1Db21wb25lbnRzID0gZ2V0QWxsQnlUZXN0SWQoL15nZW0tXFxkKyQvKVxuLy8gICBleHBlY3QoZ2VtQ29tcG9uZW50cy5sZW5ndGgpLnRvRXF1YWwoNzIpIC8vINCe0LHRidC10LUg0LrQvtC70LjRh9C10YHRgtCy0L4gR2VtINC60L7QvNC/0L7QvdC10L3RgtC+0LIg0LHQtdC3INC/0YPRgdGC0YvRhSDRj9GH0LXQtdC6XG4vLyB9KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFHQSxJQUFBRSxHQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFNRyxPQUFPLEdBQWEsQ0FDeEI7RUFDRUMsRUFBRSxFQUFFLENBQUM7RUFDTEMsSUFBSSxFQUFFLEVBQUU7RUFDUkMsTUFBTSxFQUFFO0NBQ1QsRUFDRDtFQUNFRixFQUFFLEVBQUUsQ0FBQztFQUNMQyxJQUFJLEVBQUUsRUFBRTtFQUNSQyxNQUFNLEVBQ0o7Q0FDSCxDQUNGO0FBRURDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxZQUFLO0VBQ25DQyxJQUFJLENBQUMsOEVBQThFLEVBQUUsWUFBSztJQUN4RixJQUFBQyxJQUFBLEdBQTJCLElBQUFSLGNBQUEsQ0FBQVMsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVixHQUFBLENBQUFXLFNBQVM7UUFBQ1YsT0FBTyxFQUFFQTtNQUFRLEVBQUcsQ0FBQztNQUExRFcsY0FBYyxHQUFBTCxJQUFBLENBQWRLLGNBQWM7SUFDdEIsSUFBTUMsYUFBYSxHQUFHRCxjQUFjLENBQUMsZUFBZSxDQUFDO0lBQ3JELElBQU1FLGVBQWUsR0FBR0YsY0FBYyxDQUFDLGtCQUFrQixDQUFDO0lBQzFERyxNQUFNLENBQUNELGVBQWUsQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDekNGLE1BQU0sQ0FBQ0YsYUFBYSxDQUFDRyxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLEVBQUUsQ0FBQztFQUMxQyxDQUFDLENBQUM7RUFFRlgsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLFlBQUs7SUFDaEQsSUFBQVksS0FBQSxHQUEwQyxJQUFBbkIsY0FBQSxDQUFBUyxNQUFNLEVBQzlDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVixHQUFBLENBQUFXLFNBQVM7UUFBQ1YsT0FBTyxFQUFFQTtNQUFRLEVBQUcsQ0FDaEM7TUFGT1csY0FBYyxHQUFBTSxLQUFBLENBQWROLGNBQWM7TUFBRU8sYUFBYSxHQUFBRCxLQUFBLENBQWJDLGFBQWE7SUFHckNsQixPQUFPLENBQUNtQixPQUFPLENBQUMsVUFBQ0MsTUFBTSxFQUFJO01BQ3pCLElBQU1DLFFBQVEsR0FBR1YsY0FBYyxDQUFDLE9BQU9TLE1BQU0sQ0FBQ25CLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3REYSxNQUFNLENBQUNPLFFBQVEsQ0FBQyxDQUFDQyxVQUFVLEVBQUU7TUFFN0IsSUFBSSxPQUFPRixNQUFNLENBQUNqQixNQUFNLEtBQUssUUFBUSxFQUFFO1FBQ3JDLElBQU1vQixjQUFjLEdBQUdMLGFBQWEsQ0FBQyxvQkFBb0JFLE1BQU0sQ0FBQ25CLEVBQUUsRUFBRSxDQUFDO1FBQ3JFYSxNQUFNLENBQUNTLGNBQWMsQ0FBQyxDQUFDRCxVQUFVLEVBQUU7UUFDbkNSLE1BQU0sQ0FBQ1MsY0FBYyxvQkFBZEEsY0FBYyxDQUFFQyxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUNWLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDakIsTUFBTSxDQUFDO09BQ2hFLE1BQU07UUFDTCxJQUFNb0IsZUFBYyxHQUFHTCxhQUFhLENBQUMsb0JBQW9CRSxNQUFNLENBQUNuQixFQUFFLEVBQUUsQ0FBQztRQUNyRWEsTUFBTSxDQUFDUyxlQUFjLENBQUMsQ0FBQ0ksU0FBUyxFQUFFOztJQUV0QyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==