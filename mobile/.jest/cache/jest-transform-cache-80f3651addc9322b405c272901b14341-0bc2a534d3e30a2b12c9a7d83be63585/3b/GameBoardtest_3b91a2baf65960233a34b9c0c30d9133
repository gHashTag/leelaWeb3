f1c1e8b44c0196f91b0cf626ef7eec08
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
describe('GameBoard Component', function () {
  test('should render the correct number of Gem components based on the players prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
        players: players
      })),
      getAllByTestId = _ref.getAllByTestId;
    var gemComponents = getAllByTestId('gem-container');
    var playerGemImages = getAllByTestId('player-gem-image');
    expect(playerGemImages.length).toEqual(2);
    expect(gemComponents.length).toEqual(72);
  });
});
test('should render the correct number of Gem components based on the players prop', function () {
  var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getAllByTestId = _ref2.getAllByTestId;
  var gemComponents = getAllByTestId(/^gem-\d+$/);
  expect(gemComponents.length).toEqual(61);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsImRlc2NyaWJlIiwidGVzdCIsIl9yZWYiLCJyZW5kZXIiLCJfanN4UnVudGltZSIsImpzeCIsIkdhbWVCb2FyZCIsImdldEFsbEJ5VGVzdElkIiwiZ2VtQ29tcG9uZW50cyIsInBsYXllckdlbUltYWdlcyIsImV4cGVjdCIsImxlbmd0aCIsInRvRXF1YWwiLCJfcmVmMiJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvR2FtZUJvYXJkL0dhbWVCb2FyZC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAndHlwZXMnXG5cbmltcG9ydCB7IEdhbWVCb2FyZCB9IGZyb20gJy4uLydcblxuY29uc3QgcGxheWVyczogUGxheWVyW10gPSBbXG4gIHtcbiAgICBpZDogMixcbiAgICBwbGFuOiA3MixcbiAgICBhdmF0YXI6IDEwNixcbiAgfSxcbiAge1xuICAgIGlkOiA0LFxuICAgIHBsYW46IDM0LFxuICAgIGF2YXRhcjpcbiAgICAgICdodHRwczovL2JhZmtyZWlmdHJtZm1pbWx2bzI2eGF4ZnZ0MnlwbmpqYWF2cTVtZ25ramxqczZtY3pmZWtpaTRjbXRxLmlwZnMubmZ0c3RvcmFnZS5saW5rLycsXG4gIH0sXG5dXG5cbmRlc2NyaWJlKCdHYW1lQm9hcmQgQ29tcG9uZW50JywgKCkgPT4ge1xuICB0ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBjb3JyZWN0IG51bWJlciBvZiBHZW0gY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgcGxheWVycyBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuICAgIGNvbnN0IGdlbUNvbXBvbmVudHMgPSBnZXRBbGxCeVRlc3RJZCgnZ2VtLWNvbnRhaW5lcicpXG4gICAgY29uc3QgcGxheWVyR2VtSW1hZ2VzID0gZ2V0QWxsQnlUZXN0SWQoJ3BsYXllci1nZW0taW1hZ2UnKVxuICAgIGV4cGVjdChwbGF5ZXJHZW1JbWFnZXMubGVuZ3RoKS50b0VxdWFsKDIpIC8vINCf0YDQvtCy0LXRgNC60LAg0L3QsCAyINC40LPRgNC+0LrQsFxuICAgIGV4cGVjdChnZW1Db21wb25lbnRzLmxlbmd0aCkudG9FcXVhbCg3MikgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwINC+0LHRidC10LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0LrQvtC80L/QvtC90LXQvdGC0L7QsiBHZW1cbiAgfSlcblxuICAvLyB0ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBjb3JyZWN0IG51bWJlciBvZiBHZW0gY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgcGxheWVycyBwcm9wJywgKCkgPT4ge1xuICAvLyAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KTtcbiAgLy8gICBjb25zdCBnZW1Db21wb25lbnRzID0gZ2V0QWxsQnlUZXN0SWQoL15nZW0tXFxkKyQvKTtcbiAgLy8gICBleHBlY3QoZ2VtQ29tcG9uZW50cy5sZW5ndGgpLnRvRXF1YWwoNjEpOyAvLyDQntC20LjQtNCw0LXRgtGB0Y8gNjEg0LrQvtC80L/QvtC90LXQvdGCIEdlbVxuICAvLyB9KTtcblxuICAvLyB0ZXN0KCdzaG91bGQgcmVuZGVyIHBsYW4gbnVtYmVycyBmb3IgZW1wdHkgc3BhY2VzJywgKCkgPT4ge1xuICAvLyAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPik7XG4gIC8vICAgY29uc3QgZW1wdHlQbGFuTnVtYmVycyA9IFs2OCwgNjksIDcwLCA3MSwgNzJdO1xuICAvLyAgIGVtcHR5UGxhbk51bWJlcnMuZm9yRWFjaCgocGxhbk51bWJlcikgPT4ge1xuICAvLyAgICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRleHQocGxhbk51bWJlci50b1N0cmluZygpKTtcbiAgLy8gICAgIGV4cGVjdChnZW1JbWFnZSkudG9CZVRydXRoeSgpO1xuICAvLyAgIH0pO1xuICAvLyB9KTtcbn0pXG5cbi8vIHRlc3QoJ3Nob3VsZCByZW5kZXIgcGxheWVyIGF2YXRhcnMnLCAoKSA9PiB7XG4vLyAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuXG4vLyAgIHBsYXllcnMuZm9yRWFjaCgocGxheWVyKSA9PiB7XG4vLyAgICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRlc3RJZChgZ2VtLSR7cGxheWVyLmlkfWApXG4vLyAgICAgZXhwZWN0KGdlbUltYWdlKS50b0JlVHJ1dGh5KClcbi8vICAgfSlcbi8vIH0pXG5cbi8vIHRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4vLyAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuXG4vLyAgIGNvbnN0IGdlbUNvbXBvbmVudHMgPSBnZXRBbGxCeVRlc3RJZCgvXmdlbS1cXGQrJC8pXG4vLyAgIGV4cGVjdChnZW1Db21wb25lbnRzLmxlbmd0aCkudG9FcXVhbCg3MikgLy8g0J7QsdGJ0LXQtSDQutC+0LvQuNGH0LXRgdGC0LLQviBHZW0g0LrQvtC80L/QvtC90LXQvdGC0L7QsiDQsdC10Lcg0L/Rg9GB0YLRi9GFINGP0YfQtdC10Lpcbi8vIH0pXG5cbnRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuICBjb25zdCBnZW1Db21wb25lbnRzID0gZ2V0QWxsQnlUZXN0SWQoL15nZW0tXFxkKyQvKVxuICBleHBlY3QoZ2VtQ29tcG9uZW50cy5sZW5ndGgpLnRvRXF1YWwoNjEpIC8vINCe0LHRidC10LUg0LrQvtC70LjRh9C10YHRgtCy0L4gR2VtINC60L7QvNC/0L7QvdC10L3RgtC+0LIg0LHQtdC3INC/0YPRgdGC0YvRhSDRj9GH0LXQtdC6XG59KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFHQSxJQUFBRSxHQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFNRyxPQUFPLEdBQWEsQ0FDeEI7RUFDRUMsRUFBRSxFQUFFLENBQUM7RUFDTEMsSUFBSSxFQUFFLEVBQUU7RUFDUkMsTUFBTSxFQUFFO0NBQ1QsRUFDRDtFQUNFRixFQUFFLEVBQUUsQ0FBQztFQUNMQyxJQUFJLEVBQUUsRUFBRTtFQUNSQyxNQUFNLEVBQ0o7Q0FDSCxDQUNGO0FBRURDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxZQUFLO0VBQ25DQyxJQUFJLENBQUMsOEVBQThFLEVBQUUsWUFBSztJQUN4RixJQUFBQyxJQUFBLEdBQTJCLElBQUFSLGNBQUEsQ0FBQVMsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVixHQUFBLENBQUFXLFNBQVM7UUFBQ1YsT0FBTyxFQUFFQTtNQUFRLEVBQUcsQ0FBQztNQUExRFcsY0FBYyxHQUFBTCxJQUFBLENBQWRLLGNBQWM7SUFDdEIsSUFBTUMsYUFBYSxHQUFHRCxjQUFjLENBQUMsZUFBZSxDQUFDO0lBQ3JELElBQU1FLGVBQWUsR0FBR0YsY0FBYyxDQUFDLGtCQUFrQixDQUFDO0lBQzFERyxNQUFNLENBQUNELGVBQWUsQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDekNGLE1BQU0sQ0FBQ0YsYUFBYSxDQUFDRyxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLEVBQUUsQ0FBQztFQUMxQyxDQUFDLENBQUM7QUFnQkosQ0FBQyxDQUFDO0FBa0JGWCxJQUFJLENBQUMsOEVBQThFLEVBQUUsWUFBSztFQUN4RixJQUFBWSxLQUFBLEdBQTJCLElBQUFuQixjQUFBLENBQUFTLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1YsR0FBQSxDQUFBVyxTQUFTO01BQUNWLE9BQU8sRUFBRUE7SUFBUSxFQUFHLENBQUM7SUFBMURXLGNBQWMsR0FBQU0sS0FBQSxDQUFkTixjQUFjO0VBQ3RCLElBQU1DLGFBQWEsR0FBR0QsY0FBYyxDQUFDLFdBQVcsQ0FBQztFQUNqREcsTUFBTSxDQUFDRixhQUFhLENBQUNHLE1BQU0sQ0FBQyxDQUFDQyxPQUFPLENBQUMsRUFBRSxDQUFDO0FBQzFDLENBQUMsQ0FBQyJ9