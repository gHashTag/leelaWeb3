57cb6bdf654ff5342ff79b54ba240e60
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
module.exports = function (moduleName, instanceMethods, isESModule) {
  var _class;
  var RealComponent = isESModule ? jest.requireActual(moduleName)["default"] : jest.requireActual(moduleName);
  var React = require('react');
  var SuperClass = typeof RealComponent === 'function' ? RealComponent : React.Component;
  var name = RealComponent.displayName || RealComponent.name || (RealComponent.render ? RealComponent.render.displayName || RealComponent.render.name : 'Unknown');
  var nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
  var Component = (_class = function (_SuperClass) {
    (0, _inherits2["default"])(Component, _SuperClass);
    var _super = _createSuper(Component);
    function Component() {
      (0, _classCallCheck2["default"])(this, Component);
      return _super.apply(this, arguments);
    }
    (0, _createClass2["default"])(Component, [{
      key: "render",
      value: function render() {
        var _this = this;
        var props = Object.assign({}, RealComponent.defaultProps);
        if (this.props) {
          Object.keys(this.props).forEach(function (prop) {
            if (_this.props[prop] !== undefined) {
              props[prop] = _this.props[prop];
            }
          });
        }
        return React.createElement(nameWithoutPrefix, props, this.props.children);
      }
    }]);
    return Component;
  }(SuperClass), _class.displayName = 'Component', _class);
  Component.displayName = nameWithoutPrefix;
  Object.keys(RealComponent).forEach(function (classStatic) {
    Component[classStatic] = RealComponent[classStatic];
  });
  if (instanceMethods != null) {
    Object.assign(Component.prototype, instanceMethods);
  }
  return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZU5hbWUiLCJpbnN0YW5jZU1ldGhvZHMiLCJpc0VTTW9kdWxlIiwiX2NsYXNzIiwiUmVhbENvbXBvbmVudCIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiUmVhY3QiLCJTdXBlckNsYXNzIiwiQ29tcG9uZW50IiwibmFtZSIsImRpc3BsYXlOYW1lIiwicmVuZGVyIiwibmFtZVdpdGhvdXRQcmVmaXgiLCJyZXBsYWNlIiwiX1N1cGVyQ2xhc3MiLCJfc3VwZXIiLCJrZXkiLCJ2YWx1ZSIsIl90aGlzIiwicHJvcHMiLCJPYmplY3QiLCJhc3NpZ24iLCJkZWZhdWx0UHJvcHMiLCJrZXlzIiwiZm9yRWFjaCIsInByb3AiLCJ1bmRlZmluZWQiLCJjcmVhdGVFbGVtZW50IiwiY2hpbGRyZW4iLCJjbGFzc1N0YXRpYyJdLCJzb3VyY2VzIjpbIm1vY2tDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKG1vZHVsZU5hbWUsIGluc3RhbmNlTWV0aG9kcywgaXNFU01vZHVsZSkgPT4ge1xuICBjb25zdCBSZWFsQ29tcG9uZW50ID0gaXNFU01vZHVsZVxuICAgID8gamVzdC5yZXF1aXJlQWN0dWFsKG1vZHVsZU5hbWUpLmRlZmF1bHRcbiAgICA6IGplc3QucmVxdWlyZUFjdHVhbChtb2R1bGVOYW1lKTtcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4gIGNvbnN0IFN1cGVyQ2xhc3MgPVxuICAgIHR5cGVvZiBSZWFsQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nID8gUmVhbENvbXBvbmVudCA6IFJlYWN0LkNvbXBvbmVudDtcblxuICBjb25zdCBuYW1lID1cbiAgICBSZWFsQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8XG4gICAgUmVhbENvbXBvbmVudC5uYW1lIHx8XG4gICAgKFJlYWxDb21wb25lbnQucmVuZGVyIC8vIGhhbmRsZSBSZWFjdC5mb3J3YXJkUmVmXG4gICAgICA/IFJlYWxDb21wb25lbnQucmVuZGVyLmRpc3BsYXlOYW1lIHx8IFJlYWxDb21wb25lbnQucmVuZGVyLm5hbWVcbiAgICAgIDogJ1Vua25vd24nKTtcblxuICBjb25zdCBuYW1lV2l0aG91dFByZWZpeCA9IG5hbWUucmVwbGFjZSgvXihSQ1R8UkspLywgJycpO1xuXG4gIGNvbnN0IENvbXBvbmVudCA9IGNsYXNzIGV4dGVuZHMgU3VwZXJDbGFzcyB7XG4gICAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0NvbXBvbmVudCc7XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIFJlYWxDb21wb25lbnQuZGVmYXVsdFByb3BzKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICAvLyBXZSBjYW4ndCBqdXN0IGFzc2lnbiBwcm9wcyBvbiB0b3Agb2YgZGVmYXVsdFByb3BzXG4gICAgICAgICAgLy8gYmVjYXVzZSBSZWFjdCB0cmVhdHMgdW5kZWZpbmVkIGFzIHNwZWNpYWwgYW5kIGRpZmZlcmVudCBmcm9tIG51bGwuXG4gICAgICAgICAgLy8gSWYgYSBwcm9wIGlzIHNwZWNpZmllZCBidXQgc2V0IHRvIHVuZGVmaW5lZCBpdCBpcyBpZ25vcmVkIGFuZCB0aGVcbiAgICAgICAgICAvLyBkZWZhdWx0IHByb3AgaXMgdXNlZCBpbnN0ZWFkLiBJZiBpdCBpcyBzZXQgdG8gbnVsbCwgdGhlbiB0aGVcbiAgICAgICAgICAvLyBudWxsIHZhbHVlIG92ZXJ3cml0ZXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgICAgaWYgKHRoaXMucHJvcHNbcHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvcHNbcHJvcF0gPSB0aGlzLnByb3BzW3Byb3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KG5hbWVXaXRob3V0UHJlZml4LCBwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9O1xuXG4gIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IG5hbWVXaXRob3V0UHJlZml4O1xuXG4gIE9iamVjdC5rZXlzKFJlYWxDb21wb25lbnQpLmZvckVhY2goY2xhc3NTdGF0aWMgPT4ge1xuICAgIENvbXBvbmVudFtjbGFzc1N0YXRpY10gPSBSZWFsQ29tcG9uZW50W2NsYXNzU3RhdGljXTtcbiAgfSk7XG5cbiAgaWYgKGluc3RhbmNlTWV0aG9kcyAhPSBudWxsKSB7XG4gICAgT2JqZWN0LmFzc2lnbihDb21wb25lbnQucHJvdG90eXBlLCBpbnN0YW5jZU1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSxhQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRyxVQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSSwyQkFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUssZ0JBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLFNBQUFNLGFBQUFDLE9BQUEsUUFBQUMseUJBQUEsR0FBQUMseUJBQUEsb0JBQUFDLHFCQUFBLFFBQUFDLEtBQUEsT0FBQU4sZ0JBQUEsYUFBQUUsT0FBQSxHQUFBSyxNQUFBLE1BQUFKLHlCQUFBLFFBQUFLLFNBQUEsT0FBQVIsZ0JBQUEsbUJBQUFTLFdBQUEsRUFBQUYsTUFBQSxHQUFBRyxPQUFBLENBQUFDLFNBQUEsQ0FBQUwsS0FBQSxFQUFBTSxTQUFBLEVBQUFKLFNBQUEsWUFBQUQsTUFBQSxHQUFBRCxLQUFBLENBQUFPLEtBQUEsT0FBQUQsU0FBQSxnQkFBQWIsMkJBQUEsbUJBQUFRLE1BQUE7QUFBQSxTQUFBSCwwQkFBQSxlQUFBTSxPQUFBLHFCQUFBQSxPQUFBLENBQUFDLFNBQUEsb0JBQUFELE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxJQUFBLDJCQUFBQyxLQUFBLG9DQUFBQyxPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBQyxJQUFBLENBQUFULE9BQUEsQ0FBQUMsU0FBQSxDQUFBSyxPQUFBLDhDQUFBSSxDQUFBO0FBRWJDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQUNDLFVBQVUsRUFBRUMsZUFBZSxFQUFFQyxVQUFVLEVBQUs7RUFBQSxJQUFBQyxNQUFBO0VBQzVE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