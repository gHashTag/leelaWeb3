4217b9d414953a6db3ec9f9837957c66
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonVectorIcon/ButtonVectorIcon.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var ButtonVectorIcon_1 = require("./ButtonVectorIcon");
describe('ButtonVectorIcon Component', function () {
  it('calls onPress callback when pressed', function () {
    var onPressMock = jest.fn();
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(ButtonVectorIcon_1.ButtonVectorIcon, {
        name: "icon-name",
        onPress: onPressMock,
        testID: "button-vector-icon"
      })),
      getByTestId = _ref.getByTestId;
    var buttonVectorIcon = getByTestId('button-vector-icon');
    react_native_1.fireEvent.press(buttonVectorIcon);
    expect(onPressMock).toHaveBeenCalledTimes(1);
  });
  it('renders correct icon', function () {
    var iconName = 'icon-name';
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(ButtonVectorIcon_1.ButtonVectorIcon, {
        name: iconName,
        onPress: function onPress() {},
        testID: "button-vector-icon"
      })),
      getByTestId = _ref2.getByTestId;
    var renderedIcon = getByTestId('button-vector-icon');
    expect(renderedIcon).toBeTruthy();
  });
  it('renders count correctly', function () {
    var count = 10;
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(ButtonVectorIcon_1.ButtonVectorIcon, {
        name: "icon-name",
        onPress: function onPress() {},
        count: count,
        testID: "button-vector-icon"
      })),
      getByTestId = _ref3.getByTestId,
      getByText = _ref3.getByText;
    var renderedIcon = getByTestId('button-vector-icon');
    var renderedCount = getByText(count.toString());
    expect(renderedIcon).toBeTruthy();
    expect(renderedCount).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiQnV0dG9uVmVjdG9ySWNvbl8xIiwiZGVzY3JpYmUiLCJpdCIsIm9uUHJlc3NNb2NrIiwiamVzdCIsImZuIiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiQnV0dG9uVmVjdG9ySWNvbiIsIm5hbWUiLCJvblByZXNzIiwidGVzdElEIiwiZ2V0QnlUZXN0SWQiLCJidXR0b25WZWN0b3JJY29uIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJpY29uTmFtZSIsIl9yZWYyIiwicmVuZGVyZWRJY29uIiwidG9CZVRydXRoeSIsImNvdW50IiwiX3JlZjMiLCJnZXRCeVRleHQiLCJyZW5kZXJlZENvdW50IiwidG9TdHJpbmciXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL0J1dHRvbnMvQnV0dG9uVmVjdG9ySWNvbi9CdXR0b25WZWN0b3JJY29uLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcblxuaW1wb3J0IHsgQnV0dG9uVmVjdG9ySWNvbiB9IGZyb20gJy4vQnV0dG9uVmVjdG9ySWNvbidcblxuZGVzY3JpYmUoJ0J1dHRvblZlY3Rvckljb24gQ29tcG9uZW50JywgKCkgPT4ge1xuICBpdCgnY2FsbHMgb25QcmVzcyBjYWxsYmFjayB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKClcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8QnV0dG9uVmVjdG9ySWNvblxuICAgICAgICBuYW1lPVwiaWNvbi1uYW1lXCJcbiAgICAgICAgb25QcmVzcz17b25QcmVzc01vY2t9XG4gICAgICAgIHRlc3RJRD1cImJ1dHRvbi12ZWN0b3ItaWNvblwiXG4gICAgICAvPixcbiAgICApXG5cbiAgICBjb25zdCBidXR0b25WZWN0b3JJY29uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbi12ZWN0b3ItaWNvbicpXG5cbiAgICAvLyBTaW11bGF0ZSBidXR0b24gcHJlc3NcbiAgICBmaXJlRXZlbnQucHJlc3MoYnV0dG9uVmVjdG9ySWNvbilcblxuICAgIC8vIENoZWNrIGlmIHRoZSBvblByZXNzIGNhbGxiYWNrIHdhcyBjYWxsZWRcbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICB9KVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3QgaWNvbicsICgpID0+IHtcbiAgICBjb25zdCBpY29uTmFtZSA9ICdpY29uLW5hbWUnXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEJ1dHRvblZlY3Rvckljb25cbiAgICAgICAgbmFtZT17aWNvbk5hbWV9XG4gICAgICAgIG9uUHJlc3M9eygpID0+IHt9fVxuICAgICAgICB0ZXN0SUQ9XCJidXR0b24tdmVjdG9yLWljb25cIlxuICAgICAgLz4sXG4gICAgKVxuXG4gICAgY29uc3QgcmVuZGVyZWRJY29uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbi12ZWN0b3ItaWNvbicpXG5cbiAgICAvLyBDaGVjayBpZiB0aGUgY29ycmVjdCBpY29uIGlzIHJlbmRlcmVkXG4gICAgZXhwZWN0KHJlbmRlcmVkSWNvbikudG9CZVRydXRoeSgpXG4gICAgLy8gWW91IG1pZ2h0IGFsc28gd2FudCB0byBjaGVjayBmb3IgdGhlIHNwZWNpZmljIGljb24gbGlicmFyeSB1c2VkIChGb250QXdlc29tZSwgSW9uaWNvbnMsIGV0Yy4pXG4gICAgLy8gRm9yIGV4YW1wbGUsIGlmIEZvbnRBd2Vzb21lIGlzIHVzZWQ6XG4gICAgLy8gZXhwZWN0KHJlbmRlcmVkSWNvbi5nZXRCeVR5cGUoSWNvbikucHJvcHMubmFtZSkudG9CZShpY29uTmFtZSk7XG4gICAgLy8gSWYgSW9uaWNvbnMgaXMgdXNlZDpcbiAgICAvLyBleHBlY3QocmVuZGVyZWRJY29uLmdldEJ5VHlwZShJb25pY29ucykucHJvcHMubmFtZSkudG9CZShpY29uTmFtZSk7XG4gIH0pXG5cbiAgaXQoJ3JlbmRlcnMgY291bnQgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IGNvdW50ID0gMTBcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxCdXR0b25WZWN0b3JJY29uXG4gICAgICAgIG5hbWU9XCJpY29uLW5hbWVcIlxuICAgICAgICBvblByZXNzPXsoKSA9PiB7fX1cbiAgICAgICAgY291bnQ9e2NvdW50fVxuICAgICAgICB0ZXN0SUQ9XCJidXR0b24tdmVjdG9yLWljb25cIlxuICAgICAgLz4sXG4gICAgKVxuXG4gICAgY29uc3QgcmVuZGVyZWRJY29uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbi12ZWN0b3ItaWNvbicpXG4gICAgY29uc3QgcmVuZGVyZWRDb3VudCA9IGdldEJ5VGV4dChjb3VudC50b1N0cmluZygpKVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNvdW50IGlzIHJlbmRlcmVkIGNvcnJlY3RseVxuICAgIGV4cGVjdChyZW5kZXJlZEljb24pLnRvQmVUcnV0aHkoKVxuICAgIGV4cGVjdChyZW5kZXJlZENvdW50KS50b0JlVHJ1dGh5KClcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLGtCQUFBLEdBQUFGLE9BQUE7QUFFQUcsUUFBUSxDQUFDLDRCQUE0QixFQUFFLFlBQUs7RUFDMUNDLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxZQUFLO0lBQzdDLElBQU1DLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDN0IsSUFBQUMsSUFBQSxHQUF3QixJQUFBUCxjQUFBLENBQUFRLE1BQU0sRUFDNUIsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNULGtCQUFBLENBQUFVLGdCQUFnQjtRQUNmQyxJQUFJLEVBQUMsV0FBVztRQUNoQkMsT0FBTyxFQUFFVCxXQUFZO1FBQ3JCVSxNQUFNLEVBQUM7TUFBb0IsRUFDM0IsQ0FDSDtNQU5PQyxXQUFXLEdBQUFSLElBQUEsQ0FBWFEsV0FBVztJQVFuQixJQUFNQyxnQkFBZ0IsR0FBR0QsV0FBVyxDQUFDLG9CQUFvQixDQUFDO0lBRzFEZixjQUFBLENBQUFpQixTQUFTLENBQUNDLEtBQUssQ0FBQ0YsZ0JBQWdCLENBQUM7SUFHakNHLE1BQU0sQ0FBQ2YsV0FBVyxDQUFDLENBQUNnQixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBRUZqQixFQUFFLENBQUMsc0JBQXNCLEVBQUUsWUFBSztJQUM5QixJQUFNa0IsUUFBUSxHQUFHLFdBQVc7SUFDNUIsSUFBQUMsS0FBQSxHQUF3QixJQUFBdEIsY0FBQSxDQUFBUSxNQUFNLEVBQzVCLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVCxrQkFBQSxDQUFBVSxnQkFBZ0I7UUFDZkMsSUFBSSxFQUFFUyxRQUFTO1FBQ2ZSLE9BQU8sRUFBRSxTQUFBQSxRQUFBLEVBQUssQ0FBRSxDQUFFO1FBQ2xCQyxNQUFNLEVBQUM7TUFBb0IsRUFDM0IsQ0FDSDtNQU5PQyxXQUFXLEdBQUFPLEtBQUEsQ0FBWFAsV0FBVztJQVFuQixJQUFNUSxZQUFZLEdBQUdSLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztJQUd0REksTUFBTSxDQUFDSSxZQUFZLENBQUMsQ0FBQ0MsVUFBVSxFQUFFO0VBTW5DLENBQUMsQ0FBQztFQUVGckIsRUFBRSxDQUFDLHlCQUF5QixFQUFFLFlBQUs7SUFDakMsSUFBTXNCLEtBQUssR0FBRyxFQUFFO0lBQ2hCLElBQUFDLEtBQUEsR0FBbUMsSUFBQTFCLGNBQUEsQ0FBQVEsTUFBTSxFQUN2QyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1Qsa0JBQUEsQ0FBQVUsZ0JBQWdCO1FBQ2ZDLElBQUksRUFBQyxXQUFXO1FBQ2hCQyxPQUFPLEVBQUUsU0FBQUEsUUFBQSxFQUFLLENBQUUsQ0FBRTtRQUNsQlksS0FBSyxFQUFFQSxLQUFNO1FBQ2JYLE1BQU0sRUFBQztNQUFvQixFQUMzQixDQUNIO01BUE9DLFdBQVcsR0FBQVcsS0FBQSxDQUFYWCxXQUFXO01BQUVZLFNBQVMsR0FBQUQsS0FBQSxDQUFUQyxTQUFTO0lBUzlCLElBQU1KLFlBQVksR0FBR1IsV0FBVyxDQUFDLG9CQUFvQixDQUFDO0lBQ3RELElBQU1hLGFBQWEsR0FBR0QsU0FBUyxDQUFDRixLQUFLLENBQUNJLFFBQVEsRUFBRSxDQUFDO0lBR2pEVixNQUFNLENBQUNJLFlBQVksQ0FBQyxDQUFDQyxVQUFVLEVBQUU7SUFDakNMLE1BQU0sQ0FBQ1MsYUFBYSxDQUFDLENBQUNKLFVBQVUsRUFBRTtFQUNwQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==