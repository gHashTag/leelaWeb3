e2d31409c664f7c71bad7f4e5024da4f
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
var Text_1 = require("./Text");
describe('Text Component', function () {
  it('Text component snapshot', function () {
    var component = react_test_renderer_1.default.create((0, _jsxRuntime.jsx)(Text_1.Text, {
      title: "Snapshot Test",
      testID: "snapshot-text"
    }));
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        testID: "text-component",
        title: "Test Title"
      })),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('applies the correct style based on the "h" prop', function () {
    var styles = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5'];
    styles.forEach(function (style) {
      var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
          testID: "text-component",
          title: "Test Title",
          h: style
        })),
        getByTestId = _ref2.getByTestId;
      var receivedStyle = getByTestId('text-component').props.style;
      expect(receivedStyle).toEqual(expect.objectContaining(Text_1.textStyles[style]));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwicmVhY3RfdGVzdF9yZW5kZXJlcl8xIiwiVGV4dF8xIiwiZGVzY3JpYmUiLCJpdCIsImNvbXBvbmVudCIsImRlZmF1bHQiLCJjcmVhdGUiLCJfanN4UnVudGltZSIsImpzeCIsIlRleHQiLCJ0aXRsZSIsInRlc3RJRCIsInRyZWUiLCJ0b0pTT04iLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJfcmVmIiwicmVuZGVyIiwiZ2V0QnlUZXh0IiwidG9CZVRydXRoeSIsInN0eWxlcyIsImZvckVhY2giLCJzdHlsZSIsIl9yZWYyIiwiaCIsImdldEJ5VGVzdElkIiwicmVjZWl2ZWRTdHlsZSIsInByb3BzIiwidG9FcXVhbCIsIm9iamVjdENvbnRhaW5pbmciLCJ0ZXh0U3R5bGVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9UZXh0L1RleHQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJ1xuXG5pbXBvcnQgeyBUZXh0LCBoVCwgdGV4dFN0eWxlcyB9IGZyb20gJy4vVGV4dCdcblxuZGVzY3JpYmUoJ1RleHQgQ29tcG9uZW50JywgKCkgPT4ge1xuICBpdCgnVGV4dCBjb21wb25lbnQgc25hcHNob3QnLCAoKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gcmVuZGVyZXIuY3JlYXRlKFxuICAgICAgPFRleHQgdGl0bGU9XCJTbmFwc2hvdCBUZXN0XCIgdGVzdElEPVwic25hcHNob3QtdGV4dFwiIC8+LFxuICAgIClcblxuICAgIGNvbnN0IHRyZWUgPSBjb21wb25lbnQudG9KU09OKClcbiAgICBleHBlY3QodHJlZSkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcblxuICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBkZWZhdWx0IHByb3BzJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJ0ZXh0LWNvbXBvbmVudFwiIHRpdGxlPVwiVGVzdCBUaXRsZVwiIC8+LFxuICAgIClcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdUZXN0IFRpdGxlJykpLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGl0KCdhcHBsaWVzIHRoZSBjb3JyZWN0IHN0eWxlIGJhc2VkIG9uIHRoZSBcImhcIiBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlczogaFRbXSA9IFsnaDAnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnXVxuICAgIHN0eWxlcy5mb3JFYWNoKChzdHlsZSkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJ0ZXh0LWNvbXBvbmVudFwiIHRpdGxlPVwiVGVzdCBUaXRsZVwiIGg9e3N0eWxlfSAvPixcbiAgICAgIClcbiAgICAgIGNvbnN0IHJlY2VpdmVkU3R5bGUgPSBnZXRCeVRlc3RJZCgndGV4dC1jb21wb25lbnQnKS5wcm9wcy5zdHlsZVxuICAgICAgZXhwZWN0KHJlY2VpdmVkU3R5bGUpLnRvRXF1YWwoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcodGV4dFN0eWxlc1tzdHlsZV0pKVxuICAgIH0pXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxxQkFBQSxHQUFBSCxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFFQUksUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQUs7RUFDOUJDLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxZQUFLO0lBQ2pDLElBQU1DLFNBQVMsR0FBR0oscUJBQUEsQ0FBQUssT0FBUSxDQUFDQyxNQUFNLENBQy9CLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUCxNQUFBLENBQUFRLElBQUk7TUFBQ0MsS0FBSyxFQUFDLGVBQWU7TUFBQ0MsTUFBTSxFQUFDO0lBQWUsRUFBRyxDQUN0RDtJQUVELElBQU1DLElBQUksR0FBR1IsU0FBUyxDQUFDUyxNQUFNLEVBQUU7SUFDL0JDLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDLENBQUNHLGVBQWUsRUFBRTtFQUNoQyxDQUFDLENBQUM7RUFFRlosRUFBRSxDQUFDLHNDQUFzQyxFQUFFLFlBQUs7SUFDOUMsSUFBQWEsSUFBQSxHQUFzQixJQUFBakIsY0FBQSxDQUFBa0IsTUFBTSxFQUMxQixJQUFBVixXQUFBLENBQUFDLEdBQUEsRUFBQ1AsTUFBQSxDQUFBUSxJQUFJO1FBQUNFLE1BQU0sRUFBQyxnQkFBZ0I7UUFBQ0QsS0FBSyxFQUFDO01BQVksRUFBRyxDQUNwRDtNQUZPUSxTQUFTLEdBQUFGLElBQUEsQ0FBVEUsU0FBUztJQUdqQkosTUFBTSxDQUFDSSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQ0MsVUFBVSxFQUFFO0VBQzlDLENBQUMsQ0FBQztFQUVGaEIsRUFBRSxDQUFDLGlEQUFpRCxFQUFFLFlBQUs7SUFDekQsSUFBTWlCLE1BQU0sR0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQ3pEQSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxVQUFDQyxLQUFLLEVBQUk7TUFDdkIsSUFBQUMsS0FBQSxHQUF3QixJQUFBeEIsY0FBQSxDQUFBa0IsTUFBTSxFQUM1QixJQUFBVixXQUFBLENBQUFDLEdBQUEsRUFBQ1AsTUFBQSxDQUFBUSxJQUFJO1VBQUNFLE1BQU0sRUFBQyxnQkFBZ0I7VUFBQ0QsS0FBSyxFQUFDLFlBQVk7VUFBQ2MsQ0FBQyxFQUFFRjtRQUFNLEVBQUcsQ0FDOUQ7UUFGT0csV0FBVyxHQUFBRixLQUFBLENBQVhFLFdBQVc7TUFHbkIsSUFBTUMsYUFBYSxHQUFHRCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ0UsS0FBSyxDQUFDTCxLQUFLO01BQy9EUixNQUFNLENBQUNZLGFBQWEsQ0FBQyxDQUFDRSxPQUFPLENBQUNkLE1BQU0sQ0FBQ2UsZ0JBQWdCLENBQUM1QixNQUFBLENBQUE2QixVQUFVLENBQUNSLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=