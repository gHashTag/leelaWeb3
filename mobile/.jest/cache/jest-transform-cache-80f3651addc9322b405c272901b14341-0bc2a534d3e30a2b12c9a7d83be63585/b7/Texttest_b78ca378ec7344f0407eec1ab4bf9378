b26b574e80e0b6edc7233821f76dd172
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
var Text_1 = require("./Text");
describe('Text Component', function () {
  it('Text component snapshot', function () {
    var component = react_test_renderer_1.default.create((0, _jsxRuntime.jsx)(Text_1.Text, {
      title: "Snapshot Test",
      testID: "snapshot-text"
    }));
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        testID: "text-component",
        title: "Test Title"
      })),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('applies the correct style based on the "h" prop', function () {
    var styles = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5'];
    styles.forEach(function (style) {
      var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
          testID: "text-component",
          title: "Test Title",
          h: style
        })),
        getByTestId = _ref2.getByTestId;
      var receivedStyle = getByTestId('text-component').props.style;
      expect(receivedStyle).toEqual(expect.objectContaining(Text_1.textStyles[style]));
    });
  });
  it('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        title: "Clickable Text",
        onPress: onPressMock,
        testID: "clickable-text"
      })),
      getByTestId = _ref3.getByTestId;
    var clickableText = getByTestId('clickable-text');
    react_native_1.fireEvent.press(clickableText);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwicmVhY3RfdGVzdF9yZW5kZXJlcl8xIiwiVGV4dF8xIiwiZGVzY3JpYmUiLCJpdCIsImNvbXBvbmVudCIsImRlZmF1bHQiLCJjcmVhdGUiLCJfanN4UnVudGltZSIsImpzeCIsIlRleHQiLCJ0aXRsZSIsInRlc3RJRCIsInRyZWUiLCJ0b0pTT04iLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJfcmVmIiwicmVuZGVyIiwiZ2V0QnlUZXh0IiwidG9CZVRydXRoeSIsInN0eWxlcyIsImZvckVhY2giLCJzdHlsZSIsIl9yZWYyIiwiaCIsImdldEJ5VGVzdElkIiwicmVjZWl2ZWRTdHlsZSIsInByb3BzIiwidG9FcXVhbCIsIm9iamVjdENvbnRhaW5pbmciLCJ0ZXh0U3R5bGVzIiwib25QcmVzc01vY2siLCJqZXN0IiwiZm4iLCJfcmVmMyIsIm9uUHJlc3MiLCJjbGlja2FibGVUZXh0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9UZXh0L1RleHQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBmaXJlRXZlbnQsIHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHJlbmRlcmVyIGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInXG5cbmltcG9ydCB7IFRleHQsIGhULCB0ZXh0U3R5bGVzIH0gZnJvbSAnLi9UZXh0J1xuXG5kZXNjcmliZSgnVGV4dCBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGl0KCdUZXh0IGNvbXBvbmVudCBzbmFwc2hvdCcsICgpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnQgPSByZW5kZXJlci5jcmVhdGUoXG4gICAgICA8VGV4dCB0aXRsZT1cIlNuYXBzaG90IFRlc3RcIiB0ZXN0SUQ9XCJzbmFwc2hvdC10ZXh0XCIgLz4sXG4gICAgKVxuXG4gICAgY29uc3QgdHJlZSA9IGNvbXBvbmVudC50b0pTT04oKVxuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKVxuICB9KVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGRlZmF1bHQgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxUZXh0IHRlc3RJRD1cInRleHQtY29tcG9uZW50XCIgdGl0bGU9XCJUZXN0IFRpdGxlXCIgLz4sXG4gICAgKVxuICAgIGV4cGVjdChnZXRCeVRleHQoJ1Rlc3QgVGl0bGUnKSkudG9CZVRydXRoeSgpXG4gIH0pXG5cbiAgaXQoJ2FwcGxpZXMgdGhlIGNvcnJlY3Qgc3R5bGUgYmFzZWQgb24gdGhlIFwiaFwiIHByb3AnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3R5bGVzOiBoVFtdID0gWydoMCcsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNSddXG4gICAgc3R5bGVzLmZvckVhY2goKHN0eWxlKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgIDxUZXh0IHRlc3RJRD1cInRleHQtY29tcG9uZW50XCIgdGl0bGU9XCJUZXN0IFRpdGxlXCIgaD17c3R5bGV9IC8+LFxuICAgICAgKVxuICAgICAgY29uc3QgcmVjZWl2ZWRTdHlsZSA9IGdldEJ5VGVzdElkKCd0ZXh0LWNvbXBvbmVudCcpLnByb3BzLnN0eWxlXG4gICAgICBleHBlY3QocmVjZWl2ZWRTdHlsZSkudG9FcXVhbChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh0ZXh0U3R5bGVzW3N0eWxlXSkpXG4gICAgfSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIGNhbGwgdGhlIG9uUHJlc3MgZnVuY3Rpb24gd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uUHJlc3NNb2NrID0gamVzdC5mbigpXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPFRleHRcbiAgICAgICAgdGl0bGU9XCJDbGlja2FibGUgVGV4dFwiXG4gICAgICAgIG9uUHJlc3M9e29uUHJlc3NNb2NrfVxuICAgICAgICB0ZXN0SUQ9XCJjbGlja2FibGUtdGV4dFwiXG4gICAgICAvPixcbiAgICApXG4gICAgY29uc3QgY2xpY2thYmxlVGV4dCA9IGdldEJ5VGVzdElkKCdjbGlja2FibGUtdGV4dCcpXG4gICAgZmlyZUV2ZW50LnByZXNzKGNsaWNrYWJsZVRleHQpXG4gICAgZXhwZWN0KG9uUHJlc3NNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLHFCQUFBLEdBQUFILGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLE1BQUEsR0FBQUgsT0FBQTtBQUVBSSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBSztFQUM5QkMsRUFBRSxDQUFDLHlCQUF5QixFQUFFLFlBQUs7SUFDakMsSUFBTUMsU0FBUyxHQUFHSixxQkFBQSxDQUFBSyxPQUFRLENBQUNDLE1BQU0sQ0FDL0IsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNQLE1BQUEsQ0FBQVEsSUFBSTtNQUFDQyxLQUFLLEVBQUMsZUFBZTtNQUFDQyxNQUFNLEVBQUM7SUFBZSxFQUFHLENBQ3REO0lBRUQsSUFBTUMsSUFBSSxHQUFHUixTQUFTLENBQUNTLE1BQU0sRUFBRTtJQUMvQkMsTUFBTSxDQUFDRixJQUFJLENBQUMsQ0FBQ0csZUFBZSxFQUFFO0VBQ2hDLENBQUMsQ0FBQztFQUVGWixFQUFFLENBQUMsc0NBQXNDLEVBQUUsWUFBSztJQUM5QyxJQUFBYSxJQUFBLEdBQXNCLElBQUFqQixjQUFBLENBQUFrQixNQUFNLEVBQzFCLElBQUFWLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUCxNQUFBLENBQUFRLElBQUk7UUFBQ0UsTUFBTSxFQUFDLGdCQUFnQjtRQUFDRCxLQUFLLEVBQUM7TUFBWSxFQUFHLENBQ3BEO01BRk9RLFNBQVMsR0FBQUYsSUFBQSxDQUFURSxTQUFTO0lBR2pCSixNQUFNLENBQUNJLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDQyxVQUFVLEVBQUU7RUFDOUMsQ0FBQyxDQUFDO0VBRUZoQixFQUFFLENBQUMsaURBQWlELEVBQUUsWUFBSztJQUN6RCxJQUFNaUIsTUFBTSxHQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFDekRBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLFVBQUNDLEtBQUssRUFBSTtNQUN2QixJQUFBQyxLQUFBLEdBQXdCLElBQUF4QixjQUFBLENBQUFrQixNQUFNLEVBQzVCLElBQUFWLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUCxNQUFBLENBQUFRLElBQUk7VUFBQ0UsTUFBTSxFQUFDLGdCQUFnQjtVQUFDRCxLQUFLLEVBQUMsWUFBWTtVQUFDYyxDQUFDLEVBQUVGO1FBQU0sRUFBRyxDQUM5RDtRQUZPRyxXQUFXLEdBQUFGLEtBQUEsQ0FBWEUsV0FBVztNQUduQixJQUFNQyxhQUFhLEdBQUdELFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDRSxLQUFLLENBQUNMLEtBQUs7TUFDL0RSLE1BQU0sQ0FBQ1ksYUFBYSxDQUFDLENBQUNFLE9BQU8sQ0FBQ2QsTUFBTSxDQUFDZSxnQkFBZ0IsQ0FBQzVCLE1BQUEsQ0FBQTZCLFVBQVUsQ0FBQ1IsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRm5CLEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxZQUFLO0lBQ3ZELElBQU00QixXQUFXLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQzdCLElBQUFDLEtBQUEsR0FBd0IsSUFBQW5DLGNBQUEsQ0FBQWtCLE1BQU0sRUFDNUIsSUFBQVYsV0FBQSxDQUFBQyxHQUFBLEVBQUNQLE1BQUEsQ0FBQVEsSUFBSTtRQUNIQyxLQUFLLEVBQUMsZ0JBQWdCO1FBQ3RCeUIsT0FBTyxFQUFFSixXQUFZO1FBQ3JCcEIsTUFBTSxFQUFDO01BQWdCLEVBQ3ZCLENBQ0g7TUFOT2MsV0FBVyxHQUFBUyxLQUFBLENBQVhULFdBQVc7SUFPbkIsSUFBTVcsYUFBYSxHQUFHWCxXQUFXLENBQUMsZ0JBQWdCLENBQUM7SUFDbkQxQixjQUFBLENBQUFzQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0YsYUFBYSxDQUFDO0lBQzlCdEIsTUFBTSxDQUFDaUIsV0FBVyxDQUFDLENBQUNRLGdCQUFnQixFQUFFO0VBQ3hDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9