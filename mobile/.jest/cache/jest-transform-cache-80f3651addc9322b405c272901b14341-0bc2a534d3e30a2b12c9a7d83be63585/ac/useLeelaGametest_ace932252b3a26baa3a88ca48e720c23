6a1447a7cb453e293ddfd8bc038215bb
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return mockAsyncStorage;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_hooks_1 = require("@testing-library/react-hooks");
var i18next_1 = __importDefault(require("i18next"));
var mock_async_storage_1 = __importDefault(require("mock-async-storage"));
var images_1 = require("./images");
var useLeelaGame_1 = require("./useLeelaGame");
var mockAsyncStorage = new mock_async_storage_1.default();
mockAsyncStorage.setItem = jest.fn();
describe('useLeelaGame', function () {
  beforeEach(function () {
    mockAsyncStorage.clear();
  });
  it('should initialize state correctly', (0, _asyncToGenerator2.default)(function* () {
    var initialState = {
      currentPlayer: {
        id: 1,
        plan: 68,
        previousPlan: 68,
        isStart: false,
        isFinished: false,
        consecutiveSixes: 0,
        message: i18next_1.default.t('sixToBegin'),
        positionBeforeThreeSixes: 0,
        avatar: images_1.GEM_ICONS[1]
      },
      lastRoll: 1,
      rollHistory: [],
      planHistory: [68]
    };
    mockAsyncStorage.setItem('leelaGameState', JSON.stringify(initialState));
    mockAsyncStorage.getItem = jest.fn().mockResolvedValue(JSON.stringify(initialState));
    var _ref2 = (0, react_hooks_1.renderHook)(function () {
        return (0, useLeelaGame_1.useLeelaGame)();
      }),
      result = _ref2.result,
      waitForNextUpdate = _ref2.waitForNextUpdate;
    (0, react_hooks_1.act)(function () {
      result.current.rollDice();
    });
    yield waitForNextUpdate();
    expect(result.current.currentPlayer).toMatchObject(initialState.currentPlayer);
    expect(result.current.rollHistory).toEqual(initialState.rollHistory);
    expect(result.current.planHistory).toEqual(initialState.planHistory);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJtb2NrQXN5bmNTdG9yYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVxdWlyZSIsImplc3QiLCJyZWFjdF9ob29rc18xIiwiaTE4bmV4dF8xIiwiX19pbXBvcnREZWZhdWx0IiwibW9ja19hc3luY19zdG9yYWdlXzEiLCJpbWFnZXNfMSIsInVzZUxlZWxhR2FtZV8xIiwiZGVmYXVsdCIsInNldEl0ZW0iLCJmbiIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyIiwiaXQiLCJpbml0aWFsU3RhdGUiLCJjdXJyZW50UGxheWVyIiwiaWQiLCJwbGFuIiwicHJldmlvdXNQbGFuIiwiaXNTdGFydCIsImlzRmluaXNoZWQiLCJjb25zZWN1dGl2ZVNpeGVzIiwibWVzc2FnZSIsInQiLCJwb3NpdGlvbkJlZm9yZVRocmVlU2l4ZXMiLCJhdmF0YXIiLCJHRU1fSUNPTlMiLCJsYXN0Um9sbCIsInJvbGxIaXN0b3J5IiwicGxhbkhpc3RvcnkiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0SXRlbSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiX3JlZjIiLCJyZW5kZXJIb29rIiwidXNlTGVlbGFHYW1lIiwicmVzdWx0Iiwid2FpdEZvck5leHRVcGRhdGUiLCJhY3QiLCJjdXJyZW50Iiwicm9sbERpY2UiLCJleHBlY3QiLCJ0b01hdGNoT2JqZWN0IiwidG9FcXVhbCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2hvb2tzL3VzZUxlZWxhR2FtZS91c2VMZWVsYUdhbWUudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1ob29rcydcbmltcG9ydCBpMThuZXh0IGZyb20gJ2kxOG5leHQnXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgTW9ja0FzeW5jU3RvcmFnZSBmcm9tICdtb2NrLWFzeW5jLXN0b3JhZ2UnXG5cbmltcG9ydCB7IEdFTV9JQ09OUyB9IGZyb20gJy4vaW1hZ2VzJ1xuaW1wb3J0IHsgdXNlTGVlbGFHYW1lIH0gZnJvbSAnLi91c2VMZWVsYUdhbWUnXG5cbmNvbnN0IG1vY2tBc3luY1N0b3JhZ2UgPSBuZXcgTW9ja0FzeW5jU3RvcmFnZSgpXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gbW9ja0FzeW5jU3RvcmFnZSlcblxubW9ja0FzeW5jU3RvcmFnZS5zZXRJdGVtID0gamVzdC5mbigpXG5cbmRlc2NyaWJlKCd1c2VMZWVsYUdhbWUnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG1vY2tBc3luY1N0b3JhZ2UuY2xlYXIoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSBzdGF0ZSBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgY3VycmVudFBsYXllcjoge1xuICAgICAgICBpZDogMSxcbiAgICAgICAgcGxhbjogNjgsXG4gICAgICAgIHByZXZpb3VzUGxhbjogNjgsXG4gICAgICAgIGlzU3RhcnQ6IGZhbHNlLFxuICAgICAgICBpc0ZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgY29uc2VjdXRpdmVTaXhlczogMCxcbiAgICAgICAgbWVzc2FnZTogaTE4bmV4dC50KCdzaXhUb0JlZ2luJyksXG4gICAgICAgIHBvc2l0aW9uQmVmb3JlVGhyZWVTaXhlczogMCxcbiAgICAgICAgYXZhdGFyOiBHRU1fSUNPTlNbMV0sXG4gICAgICB9LFxuICAgICAgbGFzdFJvbGw6IDEsXG4gICAgICByb2xsSGlzdG9yeTogW10sXG4gICAgICBwbGFuSGlzdG9yeTogWzY4XSxcbiAgICB9XG5cbiAgICAvLyBNb2NrIEFzeW5jU3RvcmFnZS5nZXRJdGVtXG4gICAgbW9ja0FzeW5jU3RvcmFnZS5zZXRJdGVtKCdsZWVsYUdhbWVTdGF0ZScsIEpTT04uc3RyaW5naWZ5KGluaXRpYWxTdGF0ZSkpXG4gICAgbW9ja0FzeW5jU3RvcmFnZS5nZXRJdGVtID0gamVzdFxuICAgICAgLmZuKClcbiAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZShKU09OLnN0cmluZ2lmeShpbml0aWFsU3RhdGUpKVxuXG4gICAgY29uc3QgeyByZXN1bHQsIHdhaXRGb3JOZXh0VXBkYXRlIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUxlZWxhR2FtZSgpKVxuXG4gICAgLy8gQ2FsbCB0aGUgZnVuY3Rpb24gdGhhdCB0cmlnZ2VycyBzdGF0ZSBjaGFuZ2VcbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQucm9sbERpY2UoKVxuICAgIH0pXG5cbiAgICAvLyBXYWl0IGZvciB0aGUgbmV4dCB1cGRhdGVcbiAgICBhd2FpdCB3YWl0Rm9yTmV4dFVwZGF0ZSgpXG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY3VycmVudFBsYXllcikudG9NYXRjaE9iamVjdChcbiAgICAgIGluaXRpYWxTdGF0ZS5jdXJyZW50UGxheWVyLFxuICAgIClcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucm9sbEhpc3RvcnkpLnRvRXF1YWwoaW5pdGlhbFN0YXRlLnJvbGxIaXN0b3J5KVxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wbGFuSGlzdG9yeSkudG9FcXVhbChpbml0aWFsU3RhdGUucGxhbkhpc3RvcnkpXG4gIH0pXG5cbiAgLy8gVGVzdCBvdGhlciBzY2VuYXJpb3Mgc2ltaWxhcmx5XG59KVxuIl0sIm1hcHBpbmdzIjoiOztBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsRUFBRTtFQUFBLE9BQU1DLGdCQUFnQjtBQUFBLEVBQUM7QUFBQSxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLFNBQUFKLFlBQUE7RUFBQSxJQUFBTSxR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