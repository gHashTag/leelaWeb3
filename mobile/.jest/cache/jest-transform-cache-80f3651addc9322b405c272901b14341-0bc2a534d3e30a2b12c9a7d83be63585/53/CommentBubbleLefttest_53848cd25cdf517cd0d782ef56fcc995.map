{"version":3,"names":["react_1","__importDefault","require","react_native_1","CommentBubbleLeft_1","describe","mockPost","id","createTime","liked","comments","ownerId","text","plan","accept","mockFullName","mockAvatar","mockDate","mockHandleProfile","jest","fn","mockOnPress","it","_ref","render","_jsxRuntime","jsx","CommentBubbleLeft","post","fullName","avatar","date","handleProfile","onPress","getByTestId","getByText","commentBubbleContainer","commentText","expect","toBeTruthy","fireEvent","press","toHaveBeenCalledTimes"],"sources":["/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.test.tsx"],"sourcesContent":["import React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { CommentBubbleLeft } from './CommentBubbleLeft'\n\ndescribe('CommentBubbleLeft Component', () => {\n  const mockPost = {\n    id: 123, // Add id property\n    createTime: 1628779200000,\n    liked: ['user456'],\n    comments: [], // Add comments property\n    ownerId: 'user123', // Add ownerId property\n    text: 'Test comment text',\n    plan: 1,\n    accept: true,\n  }\n  const mockFullName = 'John Doe'\n  const mockAvatar = 'avatar-url'\n  const mockDate = '2023-08-12'\n  const mockHandleProfile = jest.fn()\n  const mockOnPress = jest.fn()\n\n  it('renders correctly', () => {\n    const { getByTestId, getByText } = render(\n      <CommentBubbleLeft\n        post={mockPost}\n        fullName={mockFullName}\n        avatar={mockAvatar}\n        date={mockDate}\n        handleProfile={mockHandleProfile}\n        onPress={mockOnPress}\n      />,\n    )\n\n    const commentBubbleContainer = getByTestId('comment-bubble-left-container')\n    const commentText = getByText('Test comment text')\n    const fullName = getByText('John Doe')\n    const date = getByText('2023-08-12')\n\n    // Check if the component renders\n    expect(commentBubbleContainer).toBeTruthy()\n\n    // Check if the post text renders\n    expect(commentText).toBeTruthy()\n\n    // Check if the full name renders\n    expect(fullName).toBeTruthy()\n\n    // Check if the date renders\n    expect(date).toBeTruthy()\n\n    // Simulate press on the component\n    fireEvent.press(commentBubbleContainer)\n\n    // Check if the onPress callback was called\n    expect(mockOnPress).toHaveBeenCalledTimes(1)\n  })\n})\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AAEA,IAAAE,mBAAA,GAAAF,OAAA;AAEAG,QAAQ,CAAC,6BAA6B,EAAE,YAAK;EAC3C,IAAMC,QAAQ,GAAG;IACfC,EAAE,EAAE,GAAG;IACPC,UAAU,EAAE,aAAa;IACzBC,KAAK,EAAE,CAAC,SAAS,CAAC;IAClBC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE,mBAAmB;IACzBC,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE;GACT;EACD,IAAMC,YAAY,GAAG,UAAU;EAC/B,IAAMC,UAAU,GAAG,YAAY;EAC/B,IAAMC,QAAQ,GAAG,YAAY;EAC7B,IAAMC,iBAAiB,GAAGC,IAAI,CAACC,EAAE,EAAE;EACnC,IAAMC,WAAW,GAAGF,IAAI,CAACC,EAAE,EAAE;EAE7BE,EAAE,CAAC,mBAAmB,EAAE,YAAK;IAC3B,IAAAC,IAAA,GAAmC,IAAApB,cAAA,CAAAqB,MAAM,EACvC,IAAAC,WAAA,CAAAC,GAAA,EAACtB,mBAAA,CAAAuB,iBAAiB;QAChBC,IAAI,EAAEtB,QAAS;QACfuB,QAAQ,EAAEd,YAAa;QACvBe,MAAM,EAAEd,UAAW;QACnBe,IAAI,EAAEd,QAAS;QACfe,aAAa,EAAEd,iBAAkB;QACjCe,OAAO,EAAEZ;MAAY,EACrB,CACH;MATOa,WAAW,GAAAX,IAAA,CAAXW,WAAW;MAAEC,SAAS,GAAAZ,IAAA,CAATY,SAAS;IAW9B,IAAMC,sBAAsB,GAAGF,WAAW,CAAC,+BAA+B,CAAC;IAC3E,IAAMG,WAAW,GAAGF,SAAS,CAAC,mBAAmB,CAAC;IAClD,IAAMN,QAAQ,GAAGM,SAAS,CAAC,UAAU,CAAC;IACtC,IAAMJ,IAAI,GAAGI,SAAS,CAAC,YAAY,CAAC;IAGpCG,MAAM,CAACF,sBAAsB,CAAC,CAACG,UAAU,EAAE;IAG3CD,MAAM,CAACD,WAAW,CAAC,CAACE,UAAU,EAAE;IAGhCD,MAAM,CAACT,QAAQ,CAAC,CAACU,UAAU,EAAE;IAG7BD,MAAM,CAACP,IAAI,CAAC,CAACQ,UAAU,EAAE;IAGzBpC,cAAA,CAAAqC,SAAS,CAACC,KAAK,CAACL,sBAAsB,CAAC;IAGvCE,MAAM,CAACjB,WAAW,CAAC,CAACqB,qBAAqB,CAAC,CAAC,CAAC;EAC9C,CAAC,CAAC;AACJ,CAAC,CAAC"}