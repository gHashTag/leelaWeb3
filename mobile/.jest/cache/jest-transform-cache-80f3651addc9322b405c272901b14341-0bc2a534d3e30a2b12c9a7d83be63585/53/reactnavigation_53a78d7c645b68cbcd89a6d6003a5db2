9f58315c0e6fa8bb14decc20773c2b45
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNavigationV5Instrumentation = exports.ReactNavigationInstrumentation = exports.BLANK_TRANSACTION_CONTEXT = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _utils = require("@sentry/utils");
var _worldwide = require("../utils/worldwide");
var _routingInstrumentation = require("./routingInstrumentation");
var _utils2 = require("./utils");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var defaultOptions = {
  routeChangeTimeoutMs: 1000
};
var ReactNavigationInstrumentation = function (_InternalRoutingInstr) {
  (0, _inherits2.default)(ReactNavigationInstrumentation, _InternalRoutingInstr);
  var _super = _createSuper(ReactNavigationInstrumentation);
  function ReactNavigationInstrumentation() {
    var _this;
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, ReactNavigationInstrumentation);
    _this = _super.call(this);
    _this.name = ReactNavigationInstrumentation.instrumentationName;
    _this._navigationContainer = null;
    _this._maxRecentRouteLen = 200;
    _this._initialStateHandled = false;
    _this._recentRouteKeys = [];
    _this._pushRecentRouteKey = function (key) {
      _this._recentRouteKeys.push(key);
      if (_this._recentRouteKeys.length > _this._maxRecentRouteLen) {
        _this._recentRouteKeys = _this._recentRouteKeys.slice(_this._recentRouteKeys.length - _this._maxRecentRouteLen);
      }
    };
    _this._options = Object.assign(Object.assign({}, defaultOptions), options);
    return _this;
  }
  (0, _createClass2.default)(ReactNavigationInstrumentation, [{
    key: "registerRoutingInstrumentation",
    value: function registerRoutingInstrumentation(listener, beforeNavigate, onConfirmRoute) {
      (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNavigationInstrumentation.prototype), "registerRoutingInstrumentation", this).call(this, listener, beforeNavigate, onConfirmRoute);
      if (!this._initialStateHandled) {
        this._onDispatch();
        if (this._navigationContainer) {
          this._onStateChange();
          this._initialStateHandled = true;
        }
      }
    }
  }, {
    key: "registerNavigationContainer",
    value: function registerNavigationContainer(navigationContainerRef) {
      if (!_worldwide.RN_GLOBAL_OBJ.__sentry_rn_v5_registered) {
        if ('current' in navigationContainerRef) {
          this._navigationContainer = navigationContainerRef.current;
        } else {
          this._navigationContainer = navigationContainerRef;
        }
        if (this._navigationContainer) {
          this._navigationContainer.addListener('__unsafe_action__', this._onDispatch.bind(this));
          this._navigationContainer.addListener('state', this._onStateChange.bind(this));
          if (!this._initialStateHandled) {
            if (this._latestTransaction) {
              this._onStateChange();
              this._initialStateHandled = true;
            } else {
              _utils.logger.log('[ReactNavigationInstrumentation] Navigation container registered, but integration has not been setup yet.');
            }
          }
          _worldwide.RN_GLOBAL_OBJ.__sentry_rn_v5_registered = true;
        } else {
          _utils.logger.warn('[ReactNavigationInstrumentation] Received invalid navigation container ref!');
        }
      } else {
        _utils.logger.log('[ReactNavigationInstrumentation] Instrumentation already exists, but register has been called again, doing nothing.');
      }
    }
  }, {
    key: "_onDispatch",
    value: function _onDispatch() {
      if (this._latestTransaction) {
        _utils.logger.log('[ReactNavigationInstrumentation] A transaction was detected that turned out to be a noop, discarding.');
        this._discardLatestTransaction();
        this._clearStateChangeTimeout();
      }
      this._latestTransaction = this.onRouteWillChange((0, _utils2.getBlankTransactionContext)(ReactNavigationInstrumentation.instrumentationName));
      this._stateChangeTimeout = setTimeout(this._discardLatestTransaction.bind(this), this._options.routeChangeTimeoutMs);
    }
  }, {
    key: "_onStateChange",
    value: function _onStateChange() {
      var _a, _b, _c;
      var previousRoute = this._latestRoute;
      if (!this._navigationContainer) {
        _utils.logger.warn('[ReactNavigationInstrumentation] Missing navigation container ref. Route transactions will not be sent.');
        return;
      }
      var route = this._navigationContainer.getCurrentRoute();
      if (route) {
        if (this._latestTransaction) {
          if (!previousRoute || previousRoute.key !== route.key) {
            var originalContext = this._latestTransaction.toContext();
            var routeHasBeenSeen = this._recentRouteKeys.includes(route.key);
            var data = Object.assign(Object.assign({}, originalContext.data), {
              route: {
                name: route.name,
                key: route.key,
                params: (_a = route.params) !== null && _a !== void 0 ? _a : {},
                hasBeenSeen: routeHasBeenSeen
              },
              previousRoute: previousRoute ? {
                name: previousRoute.name,
                key: previousRoute.key,
                params: (_b = previousRoute.params) !== null && _b !== void 0 ? _b : {}
              } : null
            });
            var updatedContext = Object.assign(Object.assign({}, originalContext), {
              name: route.name,
              tags: Object.assign(Object.assign({}, originalContext.tags), {
                'routing.route.name': route.name
              }),
              data: data
            });
            var finalContext = this._prepareFinalContext(updatedContext);
            this._latestTransaction.updateWithContext(finalContext);
            var isCustomName = updatedContext.name !== finalContext.name;
            this._latestTransaction.setName(finalContext.name, isCustomName ? _utils2.customTransactionSource : _utils2.defaultTransactionSource);
            (_c = this._onConfirmRoute) === null || _c === void 0 ? void 0 : _c.call(this, finalContext);
          }
          this._pushRecentRouteKey(route.key);
          this._latestRoute = route;
          this._latestTransaction = undefined;
        }
      }
    }
  }, {
    key: "_prepareFinalContext",
    value: function _prepareFinalContext(updatedContext) {
      var _a;
      var finalContext = (_a = this._beforeNavigate) === null || _a === void 0 ? void 0 : _a.call(this, Object.assign({}, updatedContext));
      if (!finalContext) {
        _utils.logger.error(`[ReactNavigationInstrumentation] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`);
        finalContext = Object.assign(Object.assign({}, updatedContext), {
          sampled: false
        });
      }
      if (finalContext.sampled === false) {
        _utils.logger.log(`[ReactNavigationInstrumentation] Will not send transaction "${finalContext.name}" due to beforeNavigate.`);
      } else {
        this._clearStateChangeTimeout();
      }
      return finalContext;
    }
  }, {
    key: "_discardLatestTransaction",
    value: function _discardLatestTransaction() {
      if (this._latestTransaction) {
        this._latestTransaction.sampled = false;
        this._latestTransaction.finish();
        this._latestTransaction = undefined;
      }
    }
  }, {
    key: "_clearStateChangeTimeout",
    value: function _clearStateChangeTimeout() {
      if (typeof this._stateChangeTimeout !== 'undefined') {
        clearTimeout(this._stateChangeTimeout);
        this._stateChangeTimeout = undefined;
      }
    }
  }]);
  return ReactNavigationInstrumentation;
}(_routingInstrumentation.InternalRoutingInstrumentation);
exports.ReactNavigationInstrumentation = ReactNavigationInstrumentation;
ReactNavigationInstrumentation.instrumentationName = 'react-navigation-v5';
var ReactNavigationV5Instrumentation = ReactNavigationInstrumentation;
exports.ReactNavigationV5Instrumentation = ReactNavigationV5Instrumentation;
var BLANK_TRANSACTION_CONTEXT = {
  name: 'Route Change',
  op: 'navigation',
  tags: {
    'routing.instrumentation': ReactNavigationInstrumentation.instrumentationName
  },
  data: {}
};
exports.BLANK_TRANSACTION_CONTEXT = BLANK_TRANSACTION_CONTEXT;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,