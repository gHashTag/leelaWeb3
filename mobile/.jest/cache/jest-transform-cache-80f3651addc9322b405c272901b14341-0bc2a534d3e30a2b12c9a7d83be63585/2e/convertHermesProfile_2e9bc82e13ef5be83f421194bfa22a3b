14c4850f1ee27ea5df292cbce5034d2e
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertToSentryProfile = convertToSentryProfile;
exports.mapSamples = mapSamples;
var _utils = require("@sentry/utils");
var _reactNative = require("react-native");
var _rewriteframes = require("../integrations/rewriteframes");
var _hermes = require("./hermes");
var _integration = require("./integration");
var MS_TO_NS = 1e6;
var MAX_PROFILE_DURATION_NS = _integration.MAX_PROFILE_DURATION_MS * MS_TO_NS;
var ANONYMOUS_FUNCTION_NAME = 'anonymous';
var UNKNOWN_STACK_ID = -1;
var JS_THREAD_NAME = 'JavaScriptThread';
var JS_THREAD_PRIORITY = 1;
var DEFAULT_BUNDLE_NAME = _reactNative.Platform.OS === 'android' ? _rewriteframes.ANDROID_DEFAULT_BUNDLE_NAME : _reactNative.Platform.OS === 'ios' ? _rewriteframes.IOS_DEFAULT_BUNDLE_NAME : undefined;
function convertToSentryProfile(hermesProfile) {
  if (hermesProfile.samples.length === 0) {
    _utils.logger.warn('[Profiling] No samples found in profile.');
    return null;
  }
  var _mapSamples = mapSamples(hermesProfile.samples),
    samples = _mapSamples.samples,
    hermesStacks = _mapSamples.hermesStacks,
    jsThreads = _mapSamples.jsThreads;
  var _mapFrames = mapFrames(hermesProfile.stackFrames),
    frames = _mapFrames.frames,
    hermesStackFrameIdToSentryFrameIdMap = _mapFrames.hermesStackFrameIdToSentryFrameIdMap;
  var _mapStacks = mapStacks(hermesStacks, hermesProfile.stackFrames, hermesStackFrameIdToSentryFrameIdMap),
    stacks = _mapStacks.stacks,
    hermesStackToSentryStackMap = _mapStacks.hermesStackToSentryStackMap;
  for (var sample of samples) {
    var sentryStackId = hermesStackToSentryStackMap.get(sample.stack_id);
    if (sentryStackId === undefined) {
      _utils.logger.error(`[Profiling] Hermes Stack ID ${sample.stack_id} not found when mapping to Sentry Stack ID.`);
      sample.stack_id = UNKNOWN_STACK_ID;
    } else {
      sample.stack_id = sentryStackId;
    }
  }
  var thread_metadata = {};
  for (var jsThreadId of jsThreads) {
    thread_metadata[jsThreadId] = {
      name: JS_THREAD_NAME,
      priority: JS_THREAD_PRIORITY
    };
  }
  return {
    samples: samples,
    frames: frames,
    stacks: stacks,
    thread_metadata: thread_metadata
  };
}
function mapSamples(hermesSamples) {
  var maxElapsedSinceStartNs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_PROFILE_DURATION_NS;
  var jsThreads = new Set();
  var hermesStacks = new Set();
  var start = Number(hermesSamples[0].ts);
  var samples = [];
  for (var hermesSample of hermesSamples) {
    jsThreads.add(hermesSample.tid);
    hermesStacks.add(hermesSample.sf);
    var elapsed_since_start_ns = (Number(hermesSample.ts) - start) * 1e3;
    if (elapsed_since_start_ns >= maxElapsedSinceStartNs) {
      _utils.logger.warn(`[Profiling] Sample has elapsed time since start ${elapsed_since_start_ns}ns ` + `greater than the max elapsed time ${maxElapsedSinceStartNs}ns.`);
      break;
    }
    samples.push({
      stack_id: hermesSample.sf,
      thread_id: hermesSample.tid,
      elapsed_since_start_ns: elapsed_since_start_ns.toFixed(0)
    });
  }
  return {
    samples: samples,
    hermesStacks: hermesStacks,
    jsThreads: jsThreads
  };
}
function mapFrames(hermesStackFrames) {
  var frames = [];
  var hermesStackFrameIdToSentryFrameIdMap = new Map();
  for (var key in hermesStackFrames) {
    if (!Object.prototype.hasOwnProperty.call(hermesStackFrames, key)) {
      continue;
    }
    hermesStackFrameIdToSentryFrameIdMap.set(Number(key), frames.length);
    var hermesFrame = hermesStackFrames[key];
    var functionName = (0, _hermes.parseHermesStackFrameFunctionName)(hermesFrame.name);
    frames.push({
      function: functionName || ANONYMOUS_FUNCTION_NAME,
      file: hermesFrame.category == 'JavaScript' ? DEFAULT_BUNDLE_NAME : undefined,
      lineno: hermesFrame.line !== undefined ? Number(hermesFrame.line) : undefined,
      colno: hermesFrame.column !== undefined ? Number(hermesFrame.column) : undefined
    });
  }
  return {
    frames: frames,
    hermesStackFrameIdToSentryFrameIdMap: hermesStackFrameIdToSentryFrameIdMap
  };
}
function mapStacks(hermesStacks, hermesStackFrames, hermesStackFrameIdToSentryFrameIdMap) {
  var hermesStackToSentryStackMap = new Map();
  var stacks = [];
  for (var hermesStackFunctionFrameId of hermesStacks) {
    var stackId = stacks.length;
    hermesStackToSentryStackMap.set(hermesStackFunctionFrameId, stackId);
    var stack = [];
    var currentHermesFrameId = hermesStackFunctionFrameId;
    while (currentHermesFrameId !== undefined) {
      var sentryFrameId = hermesStackFrameIdToSentryFrameIdMap.get(currentHermesFrameId);
      sentryFrameId !== undefined && stack.push(sentryFrameId);
      currentHermesFrameId = hermesStackFrames[currentHermesFrameId] && hermesStackFrames[currentHermesFrameId].parent;
    }
    stacks.push(stack);
  }
  return {
    stacks: stacks,
    hermesStackToSentryStackMap: hermesStackToSentryStackMap
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,