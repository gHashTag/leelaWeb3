1cd731dc378fa32ee5b1c94d66d065ad
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx";
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Avatar = void 0;
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var native_1 = require("@react-navigation/native");
var components_1 = require("./..");
var cons_1 = require("../../cons");
var react_native_size_matters_1 = require("react-native-size-matters");
var Ionicons_1 = __importDefault(require("react-native-vector-icons/Ionicons"));
var Avatar = (0, react_1.memo)(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    plan = _ref.plan,
    avatar = _ref.avatar,
    additionalStyle = _ref.additionalStyle,
    isAccept = _ref.isAccept,
    _ref$showIcon = _ref.showIcon,
    showIcon = _ref$showIcon === void 0 ? true : _ref$showIcon,
    onPress = _ref.onPress,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'avatar' : _ref$testID,
    _ref$isLoading = _ref.isLoading,
    isLoading = _ref$isLoading === void 0 ? true : _ref$isLoading;
  var _ref2 = (0, native_1.useTheme)(),
    background = _ref2.colors.background;
  var textPlan = plan < 10 ? `0${plan}` : `${plan}`;
  var fontSize = size === 'small' ? (0, react_native_size_matters_1.s)(6) : (0, react_native_size_matters_1.s)(10);
  var badgeS = size === 'small' || size === 'medium' ? styles.smallBadge : styles.bigBadge;
  return (0, _jsxRuntime.jsx)(react_native_1.Pressable, {
    onPress: onPress,
    testID: testID,
    children: (0, _jsxRuntime.jsx)(components_1.NeomorphView, {
      viewStyle: styles.card,
      children: (0, _jsxRuntime.jsx)(react_native_1.View, {
        style: styles.container,
        children: isLoading ? (0, _jsxRuntime.jsx)(react_native_1.ActivityIndicator, {
          size: "large",
          color: cons_1.secondary
        }) : avatar ? (0, _jsxRuntime.jsx)(react_native_1.ImageBackground, {
          source: {
            uri: avatar
          },
          style: [styles[size], additionalStyle],
          imageStyle: styles.container,
          children: (0, _jsxRuntime.jsx)(react_native_1.View, {
            style: [styles.badge, badgeS, {
              backgroundColor: background
            }],
            children: !isAccept ? showIcon && (0, _jsxRuntime.jsx)(Ionicons_1.default, {
              size: (0, react_native_size_matters_1.s)(15),
              color: cons_1.orange,
              name: "time-sharp",
              testID: "time-icon"
            }) : (0, _jsxRuntime.jsx)(components_1.Text, {
              testID: "avatar-title",
              textStyle: {
                fontSize: fontSize
              },
              title: textPlan,
              h: "h5"
            })
          })
        }) : (0, _jsxRuntime.jsx)(components_1.Text, {
          h: 'h2',
          testID: "add-image-text",
          title: "add image",
          textStyle: styles.textStyle
        })
      })
    })
  });
});
exports.Avatar = Avatar;
var styles = react_native_size_matters_1.ScaledSheet.create({
  xLarge: {
    marginLeft: 1,
    width: (0, react_native_size_matters_1.ms)(134),
    height: (0, react_native_size_matters_1.ms)(134),
    borderRadius: (0, react_native_size_matters_1.s)(70),
    justifyContent: 'center'
  },
  card: {
    width: (0, react_native_size_matters_1.ms)(130, 0.9),
    height: (0, react_native_size_matters_1.ms)(130, 0.9),
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: (0, react_native_size_matters_1.s)(70)
  },
  large: {
    marginLeft: 1,
    width: (0, react_native_size_matters_1.s)(55),
    height: (0, react_native_size_matters_1.s)(55)
  },
  medium: {
    width: (0, react_native_size_matters_1.ms)(50, 0.9),
    height: (0, react_native_size_matters_1.ms)(50, 0.9)
  },
  small: {
    width: (0, react_native_size_matters_1.s)(36),
    height: (0, react_native_size_matters_1.s)(36)
  },
  container: {
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: (0, react_native_size_matters_1.ms)(130)
  },
  badge: {
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: (0, react_native_size_matters_1.s)(180),
    flexDirection: 'row',
    position: 'absolute',
    padding: (0, react_native_size_matters_1.s)(4)
  },
  smallBadge: {
    right: (0, react_native_size_matters_1.s)(-1),
    bottom: (0, react_native_size_matters_1.s)(1)
  },
  bigBadge: {
    right: (0, react_native_size_matters_1.s)(-1),
    bottom: (0, react_native_size_matters_1.s)(2)
  },
  textStyle: {
    width: 100,
    textAlign: 'center',
    lineHeight: 30,
    alignSelf: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,