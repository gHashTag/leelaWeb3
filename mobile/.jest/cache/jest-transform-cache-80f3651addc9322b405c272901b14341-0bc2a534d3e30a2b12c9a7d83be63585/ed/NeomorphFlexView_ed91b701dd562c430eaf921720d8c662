d66ddfb2db92d24030f0a8625a404856
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NeomorphFlexView = void 0;
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var native_1 = require("@react-navigation/native");
var cons_1 = require("../../cons");
var react_native_neomorph_shadows_1 = require("react-native-neomorph-shadows");
var react_native_size_matters_1 = require("react-native-size-matters");
var NeomorphFlexView = function NeomorphFlexView(_ref) {
  var children = _ref.children,
    viewStyle = _ref.viewStyle,
    shadowStyle = _ref.shadowStyle;
  var _ref2 = (0, native_1.useTheme)(),
    dark = _ref2.dark;
  var backgroundColor = dark ? cons_1.black : cons_1.lightGray;
  return (0, _jsxRuntime.jsx)(react_native_neomorph_shadows_1.NeomorphFlex, {
    inner: true,
    style: Object.assign({}, styles.container, shadowStyle, viewStyle, {
      backgroundColor: backgroundColor
    }),
    children: (0, _jsxRuntime.jsx)(react_native_1.View, {
      style: viewStyle,
      children: children
    })
  });
};
exports.NeomorphFlexView = NeomorphFlexView;
var styles = react_native_size_matters_1.ScaledSheet.create({
  container: {
    borderRadius: 40,
    shadowRadius: 5,
    marginHorizontal: 40
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwibmF0aXZlXzEiLCJjb25zXzEiLCJyZWFjdF9uYXRpdmVfbmVvbW9ycGhfc2hhZG93c18xIiwicmVhY3RfbmF0aXZlX3NpemVfbWF0dGVyc18xIiwiTmVvbW9ycGhGbGV4VmlldyIsIl9yZWYiLCJjaGlsZHJlbiIsInZpZXdTdHlsZSIsInNoYWRvd1N0eWxlIiwiX3JlZjIiLCJ1c2VUaGVtZSIsImRhcmsiLCJiYWNrZ3JvdW5kQ29sb3IiLCJibGFjayIsImxpZ2h0R3JheSIsIl9qc3hSdW50aW1lIiwianN4IiwiTmVvbW9ycGhGbGV4IiwiaW5uZXIiLCJzdHlsZSIsIk9iamVjdCIsImFzc2lnbiIsInN0eWxlcyIsImNvbnRhaW5lciIsIlZpZXciLCJleHBvcnRzIiwiU2NhbGVkU2hlZXQiLCJjcmVhdGUiLCJib3JkZXJSYWRpdXMiLCJzaGFkb3dSYWRpdXMiLCJtYXJnaW5Ib3Jpem9udGFsIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9OZW9tb3JwaEZsZXhWaWV3L05lb21vcnBoRmxleFZpZXcudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgVmlldywgVmlld1N0eWxlIH0gZnJvbSAncmVhY3QtbmF0aXZlJ1xuXG5pbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSdcbmltcG9ydCB7IGJsYWNrLCBsaWdodEdyYXkgfSBmcm9tICdjb25zJ1xuaW1wb3J0IHsgTmVvbW9ycGhGbGV4IH0gZnJvbSAncmVhY3QtbmF0aXZlLW5lb21vcnBoLXNoYWRvd3MnXG5pbXBvcnQgeyBTY2FsZWRTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1zaXplLW1hdHRlcnMnXG5cbnR5cGUgRmxleFN0eWxlUHJvcGVydGllcyA9XG4gIHwgJ2ZsZXgnXG4gIHwgJ2FsaWduU2VsZidcbiAgfCAnZmxleEdyb3cnXG4gIHwgJ2ZsZXhTaHJpbmsnXG4gIHwgJ2ZsZXhCYXNpcydcblxudHlwZSBWaWV3U3R5bGVXaXRob3V0RmxleCA9IFBpY2s8XG4gIFZpZXdTdHlsZSxcbiAgRXhjbHVkZTxrZXlvZiBWaWV3U3R5bGUsIEZsZXhTdHlsZVByb3BlcnRpZXM+XG4+XG5cbmludGVyZmFjZSBWaWV3U3R5bGVXaXRoU2hhZG93IGV4dGVuZHMgVmlld1N0eWxlV2l0aG91dEZsZXgge1xuICBzaGFkb3dPZmZzZXQ/OiB7XG4gICAgd2lkdGg6IG51bWJlclxuICAgIGhlaWdodDogbnVtYmVyXG4gIH1cbiAgc2hhZG93T3BhY2l0eT86IG51bWJlclxuICBzaGFkb3dDb2xvcj86IHN0cmluZ1xuICBzaGFkb3dSYWRpdXM/OiBudW1iZXJcbiAgYm9yZGVyUmFkaXVzPzogbnVtYmVyXG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZ1xuICB3aWR0aD86IG51bWJlclxuICBoZWlnaHQ/OiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIE5lb21vcnBoRmxleFZpZXdQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbiAgc2hhZG93U3R5bGU/OiBWaWV3U3R5bGVXaXRoU2hhZG93XG4gIHZpZXdTdHlsZT86IFZpZXdTdHlsZVdpdGhTaGFkb3dcbn1cblxuY29uc3QgTmVvbW9ycGhGbGV4VmlldzogUmVhY3QuRkM8TmVvbW9ycGhGbGV4Vmlld1Byb3BzPiA9ICh7XG4gIGNoaWxkcmVuLFxuICB2aWV3U3R5bGUsXG4gIHNoYWRvd1N0eWxlLFxufSkgPT4ge1xuICBjb25zdCB7IGRhcmsgfSA9IHVzZVRoZW1lKClcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gZGFyayA/IGJsYWNrIDogbGlnaHRHcmF5XG4gIHJldHVybiAoXG4gICAgPE5lb21vcnBoRmxleFxuICAgICAgaW5uZXJcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgLi4uc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgLi4uc2hhZG93U3R5bGUsXG4gICAgICAgIC4uLnZpZXdTdHlsZSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8VmlldyBzdHlsZT17dmlld1N0eWxlfT57Y2hpbGRyZW59PC9WaWV3PlxuICAgIDwvTmVvbW9ycGhGbGV4PlxuICApXG59XG5cbmNvbnN0IHN0eWxlcyA9IFNjYWxlZFNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGJvcmRlclJhZGl1czogNDAsXG4gICAgc2hhZG93UmFkaXVzOiA1LFxuICAgIG1hcmdpbkhvcml6b250YWw6IDQwLFxuICB9LFxufSlcblxuZXhwb3J0IHsgTmVvbW9ycGhGbGV4VmlldyB9XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxRQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSwrQkFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssMkJBQUEsR0FBQUwsT0FBQTtBQWtDQSxJQUFNTSxnQkFBZ0IsR0FBb0MsU0FBcERBLGdCQUFnQkEsQ0FBQUMsSUFBQSxFQUlqQjtFQUFBLElBSEhDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQ1JDLFNBQVMsR0FBQUYsSUFBQSxDQUFURSxTQUFTO0lBQ1RDLFdBQVcsR0FBQUgsSUFBQSxDQUFYRyxXQUFXO0VBRVgsSUFBQUMsS0FBQSxHQUFpQixJQUFBVCxRQUFBLENBQUFVLFFBQVEsR0FBRTtJQUFuQkMsSUFBSSxHQUFBRixLQUFBLENBQUpFLElBQUk7RUFDWixJQUFNQyxlQUFlLEdBQUdELElBQUksR0FBR1YsTUFBQSxDQUFBWSxLQUFLLEdBQUdaLE1BQUEsQ0FBQWEsU0FBUztFQUNoRCxPQUNFLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDZCwrQkFBQSxDQUFBZSxZQUFZO0lBQ1hDLEtBQUs7SUFDTEMsS0FBSyxFQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FFQUMsTUFBTSxDQUFDQyxTQUFTLEVBQ2hCZixXQUFXLEVBQ1hELFNBQVM7TUFDWkssZUFBZSxFQUFmQTtJQUFlLEVBQ2Y7SUFBQU4sUUFBQSxFQUVGLElBQUFTLFdBQUEsQ0FBQUMsR0FBQSxFQUFDakIsY0FBQSxDQUFBeUIsSUFBSTtNQUFDTCxLQUFLLEVBQUVaLFNBQVU7TUFBQUQsUUFBQSxFQUFFQTtJQUFRLENBQU87RUFDMUMsQ0FBYyxDQUFDO0FBRW5CLENBQUM7QUFVUW1CLE9BQUEsQ0FBQXJCLGdCQUFBLEdBQUFBLGdCQUFBO0FBUlQsSUFBTWtCLE1BQU0sR0FBR25CLDJCQUFBLENBQUF1QixXQUFXLENBQUNDLE1BQU0sQ0FBQztFQUNoQ0osU0FBUyxFQUFFO0lBQ1RLLFlBQVksRUFBRSxFQUFFO0lBQ2hCQyxZQUFZLEVBQUUsQ0FBQztJQUNmQyxnQkFBZ0IsRUFBRTs7Q0FFckIsQ0FBQyJ9