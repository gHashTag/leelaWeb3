{"version":3,"names":["_browser","require","_core","_utils","_reactNative","_factory","_screenshot","_sdkinfo","_tracing","_envelope","_ignorerequirecyclelogs","_outcome","_wrapper","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","ReactNativeClient","_BaseClient","_inherits2","_super","options","_this","_classCallCheck2","ignoreRequireCycleLogs","_metadata","sdk","defaultSdkInfo","_outcomesBuffer","_initNativeSdk","_createClass2","key","value","eventFromException","exception","_this2","hint","length","undefined","Screenshot","attachScreenshotToEventHint","_options","then","hintWithScreenshot","stackParser","attachStacktrace","eventFromMessage","message","level","event","_a","values","map","stacktrace","threads","nativeCrash","NATIVE","close","_get2","closeNativeSdk","captureUserFeedback","feedback","envelope","createUserFeedbackEnvelope","metadata","dsn","getDsn","tunnel","_sendEnvelope","setupIntegrations","tracing","getIntegration","ReactNativeTracing","routingName","routingInstrumentation","name","addIntegration","createIntegration","enableUserInteractionTracing","outcomes","_clearOutcomes","mergeOutcomes","sendClientReports","_attachClientReportTo","shouldClearOutcomesBuffer","_transport","_dsn","emit","send","reason","SentryError","logger","error","didCallNativeInit","initNativeSdk","_","_showCannotConnectDialog","_b","onReady","__DEV__","enableNativeNagger","Alert","alert","clientReportItem","type","timestamp","dateTimestampInSeconds","discarded_events","items","push","BaseClient","exports"],"sources":["../../src/js/client.ts"],"sourcesContent":["import { eventFromException, eventFromMessage } from '@sentry/browser';\nimport { BaseClient } from '@sentry/core';\nimport type {\n  ClientReportEnvelope,\n  ClientReportItem,\n  Envelope,\n  Event,\n  EventHint,\n  Exception,\n  Outcome,\n  SeverityLevel,\n  Thread,\n  UserFeedback,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, logger, SentryError } from '@sentry/utils';\nimport { Alert } from 'react-native';\n\nimport { createIntegration } from './integrations/factory';\nimport { Screenshot } from './integrations/screenshot';\nimport { defaultSdkInfo } from './integrations/sdkinfo';\nimport type { ReactNativeClientOptions } from './options';\nimport { ReactNativeTracing } from './tracing';\nimport { createUserFeedbackEnvelope, items } from './utils/envelope';\nimport { ignoreRequireCycleLogs } from './utils/ignorerequirecyclelogs';\nimport { mergeOutcomes } from './utils/outcome';\nimport { NATIVE } from './wrapper';\n\n/**\n * The Sentry React Native SDK Client.\n *\n * @see ReactNativeClientOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class ReactNativeClient extends BaseClient<ReactNativeClientOptions> {\n  private _outcomesBuffer: Outcome[];\n\n  /**\n   * Creates a new React Native SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: ReactNativeClientOptions) {\n    ignoreRequireCycleLogs();\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || defaultSdkInfo;\n    super(options);\n\n    this._outcomesBuffer = [];\n    void this._initNativeSdk();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint: EventHint = {}): PromiseLike<Event> {\n    return Screenshot.attachScreenshotToEventHint(hint, this._options).then(hintWithScreenshot =>\n      eventFromException(this._options.stackParser, exception, hintWithScreenshot, this._options.attachStacktrace),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level?: SeverityLevel, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace).then(\n      (event: Event) => {\n        // TMP! Remove this function once JS SDK uses threads for messages\n        if (!event.exception?.values || event.exception.values.length <= 0) {\n          return event;\n        }\n        const values = event.exception.values.map(\n          (exception: Exception): Thread => ({\n            stacktrace: exception.stacktrace,\n          }),\n        );\n        (event as { threads?: { values: Thread[] } }).threads = { values };\n        delete event.exception;\n        return event;\n      },\n    );\n  }\n\n  /**\n   * If native client is available it will trigger a native crash.\n   * Use this only for testing purposes.\n   */\n  public nativeCrash(): void {\n    NATIVE.nativeCrash();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(): PromiseLike<boolean> {\n    // As super.close() flushes queued events, we wait for that to finish before closing the native SDK.\n    return super.close().then((result: boolean) => {\n      return NATIVE.closeNativeSdk().then(() => result) as PromiseLike<boolean>;\n    });\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   */\n  public captureUserFeedback(feedback: UserFeedback): void {\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this._options._metadata,\n      dsn: this.getDsn(),\n      tunnel: this._options.tunnel,\n    });\n    this._sendEnvelope(envelope);\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    super.setupIntegrations();\n    const tracing = this.getIntegration(ReactNativeTracing);\n    const routingName = tracing?.options.routingInstrumentation?.name;\n    if (routingName) {\n      this.addIntegration(createIntegration(routingName));\n    }\n    const enableUserInteractionTracing = tracing?.options.enableUserInteractionTracing;\n    if (enableUserInteractionTracing) {\n      this.addIntegration(createIntegration('ReactNativeUserInteractionTracing'));\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected _sendEnvelope(envelope: Envelope): void {\n    const outcomes = this._clearOutcomes();\n    this._outcomesBuffer = mergeOutcomes(this._outcomesBuffer, outcomes);\n\n    if (this._options.sendClientReports) {\n      this._attachClientReportTo(this._outcomesBuffer, envelope as ClientReportEnvelope);\n    }\n\n    let shouldClearOutcomesBuffer = true;\n    if (this._transport && this._dsn) {\n      this.emit('beforeEnvelope', envelope);\n\n      this._transport.send(envelope).then(null, reason => {\n        if (reason instanceof SentryError) {\n          // SentryError is thrown by SyncPromise\n          shouldClearOutcomesBuffer = false;\n          // If this is called asynchronously we want the _outcomesBuffer to be cleared\n          logger.error('SentryError while sending event, keeping outcomes buffer:', reason);\n        } else {\n          logger.error('Error while sending event:', reason);\n        }\n      });\n    } else {\n      logger.error('Transport disabled');\n    }\n\n    if (shouldClearOutcomesBuffer) {\n      this._outcomesBuffer = []; // if send fails synchronously the _outcomesBuffer will stay intact\n    }\n  }\n\n  /**\n   * Starts native client with dsn and options\n   */\n  private async _initNativeSdk(): Promise<void> {\n    let didCallNativeInit = false;\n\n    try {\n      didCallNativeInit = await NATIVE.initNativeSdk(this._options);\n    } catch (_) {\n      this._showCannotConnectDialog();\n    } finally {\n      try {\n        this._options.onReady?.({ didCallNativeInit });\n      } catch (error) {\n        logger.error('The OnReady callback threw an error: ', error);\n      }\n    }\n  }\n\n  /**\n   * If the user is in development mode, and the native nagger is enabled then it will show an alert.\n   */\n  private _showCannotConnectDialog(): void {\n    if (__DEV__ && this._options.enableNativeNagger) {\n      Alert.alert(\n        'Sentry',\n        'Warning, could not connect to Sentry native SDK.\\nIf you do not want to use the native component please pass `enableNative: false` in the options.\\nVisit: https://docs.sentry.io/platforms/react-native/#linking for more details.',\n      );\n    }\n  }\n\n  /**\n   * Attaches a client report from outcomes to the envelope.\n   */\n  private _attachClientReportTo(outcomes: Outcome[], envelope: ClientReportEnvelope): void {\n    if (outcomes.length > 0) {\n      const clientReportItem: ClientReportItem = [\n        { type: 'client_report' },\n        {\n          timestamp: dateTimestampInSeconds(),\n          discarded_events: outcomes,\n        },\n      ];\n\n      envelope[items].push(clientReportItem);\n    }\n  }\n}\n"],"mappings":"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"}