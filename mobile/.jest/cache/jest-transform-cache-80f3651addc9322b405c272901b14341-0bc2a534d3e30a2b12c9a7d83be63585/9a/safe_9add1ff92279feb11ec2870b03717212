e9ccb03d1aa269af5e637bace2b9cacc
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeFactory = safeFactory;
exports.safeTracesSampler = safeTracesSampler;
var _utils = require("@sentry/utils");
function safeFactory(danger) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (typeof danger === 'function') {
    return function () {
      try {
        return danger.apply(void 0, arguments);
      } catch (error) {
        _utils.logger.error(options.loggerMessage ? options.loggerMessage : `The ${danger.name} callback threw an error`, error);
        return arguments.length <= 0 ? undefined : arguments[0];
      }
    };
  } else {
    return danger;
  }
}
function safeTracesSampler(tracesSampler) {
  if (tracesSampler) {
    return function () {
      try {
        return tracesSampler.apply(void 0, arguments);
      } catch (error) {
        _utils.logger.error('The tracesSampler callback threw an error', error);
        return 0;
      }
    };
  } else {
    return tracesSampler;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbHMiLCJyZXF1aXJlIiwic2FmZUZhY3RvcnkiLCJkYW5nZXIiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiYXBwbHkiLCJlcnJvciIsImxvZ2dlciIsImxvZ2dlck1lc3NhZ2UiLCJuYW1lIiwic2FmZVRyYWNlc1NhbXBsZXIiLCJ0cmFjZXNTYW1wbGVyIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3V0aWxzL3NhZmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB0eXBlIHsgUmVhY3ROYXRpdmVPcHRpb25zIH0gZnJvbSAnLi4vb3B0aW9ucyc7XG5cbnR5cGUgRGFuZ2VyVHlwZXNXaXRob3V0Q2FsbFNpZ25hdHVyZSA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIE9iamVjdCB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmV0dXJucyBjYWxsYmFjayBmYWN0b3J5IHdyYXBwZWQgd2l0aCB0cnkvY2F0Y2hcbiAqIG9yIHRoZSBvcmlnaW5hbCBwYXNzZWQgdmFsdWUgaXMgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAqXG4gKiBJZiB0aGUgZmFjdG9yeSBmYWlscyBvcmlnaW5hbCBkYXRhIGFyZSByZXR1cm5lZCBhcyBpdC5cbiAqIFRoZXkgbWlnaHQgYmUgcGFydGlhbGx5IG1vZGlmaWVkIGJ5IHRoZSBmYWlsZWQgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlRmFjdG9yeTxBIGV4dGVuZHMgW1IsIC4uLnVua25vd25bXV0sIFIsIFQgZXh0ZW5kcyBEYW5nZXJUeXBlc1dpdGhvdXRDYWxsU2lnbmF0dXJlPihcbiAgZGFuZ2VyOiAoKC4uLmFyZ3M6IEEpID0+IFIpIHwgVCxcbiAgb3B0aW9uczoge1xuICAgIGxvZ2dlck1lc3NhZ2U/OiBzdHJpbmc7XG4gIH0gPSB7fSxcbik6ICgoLi4uYXJnczogQSkgPT4gUikgfCBUIHtcbiAgaWYgKHR5cGVvZiBkYW5nZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkYW5nZXIoLi4uYXJncyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoXG4gICAgICAgICAgb3B0aW9ucy5sb2dnZXJNZXNzYWdlID8gb3B0aW9ucy5sb2dnZXJNZXNzYWdlIDogYFRoZSAke2Rhbmdlci5uYW1lfSBjYWxsYmFjayB0aHJldyBhbiBlcnJvcmAsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRhbmdlcjtcbiAgfVxufVxuXG50eXBlIFRyYWNlc1NhbXBsZXIgPSBSZXF1aXJlZDxSZWFjdE5hdGl2ZU9wdGlvbnM+Wyd0cmFjZXNTYW1wbGVyJ107XG5cbi8qKlxuICogUmV0dXJucyBzYWdlIHRyYWNlc1NhbXBsZXIgdGhhdCByZXR1cm5zIDAgaWYgdGhlIG9yaWdpbmFsIGZhaWxlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVUcmFjZXNTYW1wbGVyKFxuICB0cmFjZXNTYW1wbGVyOiBSZWFjdE5hdGl2ZU9wdGlvbnNbJ3RyYWNlc1NhbXBsZXInXSxcbik6IFJlYWN0TmF0aXZlT3B0aW9uc1sndHJhY2VzU2FtcGxlciddIHtcbiAgaWYgKHRyYWNlc1NhbXBsZXIpIHtcbiAgICByZXR1cm4gKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VHJhY2VzU2FtcGxlcj4pOiBSZXR1cm5UeXBlPFRyYWNlc1NhbXBsZXI+ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0cmFjZXNTYW1wbGVyKC4uLmFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdUaGUgdHJhY2VzU2FtcGxlciBjYWxsYmFjayB0aHJldyBhbiBlcnJvcicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJhY2VzU2FtcGxlcjtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQWVNLFNBQVVDLFdBQVdBLENBQ3pCQyxNQUErQixFQUd6QjtFQUFBLElBRk5DLE9BQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BRUksRUFBRTtFQUVOLElBQUksT0FBT0YsTUFBTSxLQUFLLFVBQVUsRUFBRTtJQUNoQyxPQUFPLFlBQVk7TUFDakIsSUFBSTtRQUNGLE9BQU9BLE1BQU0sQ0FBQUssS0FBQSxTQUFBSCxTQUFRLENBQUM7T0FDdkIsQ0FBQyxPQUFPSSxLQUFLLEVBQUU7UUFDZEMsYUFBTSxDQUFDRCxLQUFLLENBQ1ZMLE9BQU8sQ0FBQ08sYUFBYSxHQUFHUCxPQUFPLENBQUNPLGFBQWEsR0FBRyxPQUFPUixNQUFNLENBQUNTLElBQUksMEJBQTBCLEVBQzVGSCxLQUFLLENBQ047UUFDRCxPQUFBSixTQUFBLENBQUFDLE1BQUEsUUFBQUMsU0FBQSxHQUFBRixTQUFBOztJQUVKLENBQUM7R0FDRixNQUFNO0lBQ0wsT0FBT0YsTUFBTTs7QUFFakI7QUFPTSxTQUFVVSxpQkFBaUJBLENBQy9CQyxhQUFrRDtFQUVsRCxJQUFJQSxhQUFhLEVBQUU7SUFDakIsT0FBTyxZQUFrRTtNQUN2RSxJQUFJO1FBQ0YsT0FBT0EsYUFBYSxDQUFBTixLQUFBLFNBQUFILFNBQVEsQ0FBQztPQUM5QixDQUFDLE9BQU9JLEtBQUssRUFBRTtRQUNkQyxhQUFNLENBQUNELEtBQUssQ0FBQywyQ0FBMkMsRUFBRUEsS0FBSyxDQUFDO1FBQ2hFLE9BQU8sQ0FBQzs7SUFFWixDQUFDO0dBQ0YsTUFBTTtJQUNMLE9BQU9LLGFBQWE7O0FBRXhCIn0=