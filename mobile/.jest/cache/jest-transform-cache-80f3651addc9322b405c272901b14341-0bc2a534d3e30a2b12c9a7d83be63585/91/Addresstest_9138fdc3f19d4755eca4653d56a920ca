15efc54e84c9561e8a24c33064021cd8
"use strict";

_getJestObj().mock('@react-native-clipboard/clipboard');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Address/Address.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var clipboard_1 = __importDefault(require("@react-native-clipboard/clipboard"));
var react_native_1 = require("@testing-library/react-native");
var Address_1 = require("../Address");
jest.useFakeTimers();
describe('Address component', function () {
  it('should copy full address to clipboard and change opacity on press', (0, _asyncToGenerator2.default)(function* () {
    var rlyAccount = 'exampleAddress12345';
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Address_1.Address, {
        rlyAccount: rlyAccount
      })),
      getByTestId = _ref2.getByTestId,
      getByText = _ref2.getByText;
    var copyButton = getByTestId('copy-button');
    expect(copyButton).toBeDefined();
    var mockSetString = jest.fn();
    clipboard_1.default.setString = mockSetString;
    react_native_1.fireEvent.press(copyButton);
    expect(mockSetString).toHaveBeenCalledWith(rlyAccount);
    var renderedText = getByText('examp...ress12345');
    expect(renderedText).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9qc3hSdW50aW1lIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsImplc3QiLCJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwiY2xpcGJvYXJkXzEiLCJyZWFjdF9uYXRpdmVfMSIsIkFkZHJlc3NfMSIsInVzZUZha2VUaW1lcnMiLCJkZXNjcmliZSIsIml0IiwiZGVmYXVsdCIsInJseUFjY291bnQiLCJfcmVmMiIsInJlbmRlciIsImpzeCIsIkFkZHJlc3MiLCJnZXRCeVRlc3RJZCIsImdldEJ5VGV4dCIsImNvcHlCdXR0b24iLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsIm1vY2tTZXRTdHJpbmciLCJmbiIsInNldFN0cmluZyIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJyZW5kZXJlZFRleHQiLCJ0b0JlVHJ1dGh5Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9BZGRyZXNzL0FkZHJlc3MudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgQ2xpcGJvYXJkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY2xpcGJvYXJkL2NsaXBib2FyZCcgLy8gSW1wb3J0IHRoZSBtb2NrZWQgQ2xpcGJvYXJkXG5pbXBvcnQgeyBmaXJlRXZlbnQsIHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuXG5pbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnLi4vQWRkcmVzcydcblxuamVzdC51c2VGYWtlVGltZXJzKCkgLy8gRW5hYmxlIGZha2UgdGltZXJzIGZvciBzaW11bGF0aW5nIHRpbWVcblxuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWNsaXBib2FyZC9jbGlwYm9hcmQnKSAvLyBNb2NraW5nIHRoZSBDbGlwYm9hcmQgbW9kdWxlXG5cbmRlc2NyaWJlKCdBZGRyZXNzIGNvbXBvbmVudCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBjb3B5IGZ1bGwgYWRkcmVzcyB0byBjbGlwYm9hcmQgYW5kIGNoYW5nZSBvcGFjaXR5IG9uIHByZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJseUFjY291bnQgPSAnZXhhbXBsZUFkZHJlc3MxMjM0NSdcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPEFkZHJlc3Mgcmx5QWNjb3VudD17cmx5QWNjb3VudH0gLz4sXG4gICAgKVxuXG4gICAgY29uc3QgY29weUJ1dHRvbiA9IGdldEJ5VGVzdElkKCdjb3B5LWJ1dHRvbicpXG4gICAgZXhwZWN0KGNvcHlCdXR0b24pLnRvQmVEZWZpbmVkKClcblxuICAgIC8vIE1vY2sgdGhlIGNsaXBib2FyZCdzIHNldFN0cmluZyBmdW5jdGlvblxuICAgIGNvbnN0IG1vY2tTZXRTdHJpbmcgPSBqZXN0LmZuKClcbiAgICBDbGlwYm9hcmQuc2V0U3RyaW5nID0gbW9ja1NldFN0cmluZ1xuXG4gICAgLy8gVHJpZ2dlciB0aGUgcHJlc3MgZXZlbnQgb24gdGhlIGNvcHkgYnV0dG9uXG4gICAgZmlyZUV2ZW50LnByZXNzKGNvcHlCdXR0b24pXG5cbiAgICAvLyBFeHBlY3QgdGhhdCBzZXRTdHJpbmcgd2FzIGNhbGxlZCB3aXRoIHRoZSBjb3JyZWN0IHZhbHVlXG4gICAgZXhwZWN0KG1vY2tTZXRTdHJpbmcpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHJseUFjY291bnQpXG4gICAgLy8gQ2hlY2sgdGhlIHJlbmRlcmVkIHRleHQgYWZ0ZXIgYW5pbWF0aW9ucyBjb21wbGV0ZVxuICAgIGNvbnN0IHJlbmRlcmVkVGV4dCA9IGdldEJ5VGV4dCgnZXhhbXAuLi5yZXNzMTIzNDUnKVxuICAgIGV4cGVjdChyZW5kZXJlZFRleHQpLnRvQmVUcnV0aHkoKVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7QUFTQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsbUNBQW1DLENBQUM7QUFBQSxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUFBLElBQUFHLEtBQUE7RUFBQUMsWUFBQTtBQUFBLFNBQUFQLFlBQUE7RUFBQSxJQUFBUSxRQUFBLEdBQUFMLE9BQUE7SUFBQU0sSUFBQSxHQUFBRCxRQUFBLENBQUFDLElBQUE7RUFBQVQsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQVMsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBOzs7Ozs7Ozs7QUFUOUMsSUFBQUMsT0FBQSxHQUFBQyxlQUFBLENBQUFSLE9BQUE7QUFFQSxJQUFBUyxXQUFBLEdBQUFELGVBQUEsQ0FBQVIsT0FBQTtBQUNBLElBQUFVLGNBQUEsR0FBQVYsT0FBQTtBQUVBLElBQUFXLFNBQUEsR0FBQVgsT0FBQTtBQUVBTSxJQUFJLENBQUNNLGFBQWEsRUFBRTtBQUlwQkMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLFlBQUs7RUFDakNDLEVBQUUsQ0FBQyxtRUFBbUUsTUFBQWIsa0JBQUEsQ0FBQWMsT0FBQSxFQUFFLGFBQVc7SUFDakYsSUFBTUMsVUFBVSxHQUFHLHFCQUFxQjtJQUV4QyxJQUFBQyxLQUFBLEdBQW1DLElBQUFQLGNBQUEsQ0FBQVEsTUFBTSxFQUN2QyxJQUFBaEIsV0FBQSxDQUFBaUIsR0FBQSxFQUFDUixTQUFBLENBQUFTLE9BQU87UUFBQ0osVUFBVSxFQUFFQTtNQUFXLEVBQUcsQ0FDcEM7TUFGT0ssV0FBVyxHQUFBSixLQUFBLENBQVhJLFdBQVc7TUFBRUMsU0FBUyxHQUFBTCxLQUFBLENBQVRLLFNBQVM7SUFJOUIsSUFBTUMsVUFBVSxHQUFHRixXQUFXLENBQUMsYUFBYSxDQUFDO0lBQzdDRyxNQUFNLENBQUNELFVBQVUsQ0FBQyxDQUFDRSxXQUFXLEVBQUU7SUFHaEMsSUFBTUMsYUFBYSxHQUFHcEIsSUFBSSxDQUFDcUIsRUFBRSxFQUFFO0lBQy9CbEIsV0FBQSxDQUFBTSxPQUFTLENBQUNhLFNBQVMsR0FBR0YsYUFBYTtJQUduQ2hCLGNBQUEsQ0FBQW1CLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDUCxVQUFVLENBQUM7SUFHM0JDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDLENBQUNLLG9CQUFvQixDQUFDZixVQUFVLENBQUM7SUFFdEQsSUFBTWdCLFlBQVksR0FBR1YsU0FBUyxDQUFDLG1CQUFtQixDQUFDO0lBQ25ERSxNQUFNLENBQUNRLFlBQVksQ0FBQyxDQUFDQyxVQUFVLEVBQUU7RUFDbkMsQ0FBQyxFQUFDO0FBQ0osQ0FBQyxDQUFDIn0=