9ac0624a32a2c379804b3938e46377dc
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
test('should render the correct number of Gem components based on the players prop', function () {
  var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getAllByTestId = _ref.getAllByTestId;
  var gemComponents = getAllByTestId('gem-container');
  var playerGemImages = getAllByTestId('player-gem-image');
  expect(playerGemImages.length).toEqual(2);
  expect(gemComponents.length).toEqual(72);
});
test('should render player avatars', function () {
  var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getByTestId = _ref2.getByTestId;
  players.forEach(function (player) {
    var gemImage = getByTestId(`gem-${player.id}`);
    expect(gemImage).toBeTruthy();
  });
});
test('should render plan numbers for empty spaces', function () {
  var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getAllByTestId = _ref3.getAllByTestId;
  var emptyPlanNumbers = [68, 69, 70, 71, 72];
  emptyPlanNumbers.forEach(function (planNumber) {
    var gemImage = getAllByTestId(`gem-${planNumber}`);
    expect(gemImage.length).toBeGreaterThan(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsInRlc3QiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHYW1lQm9hcmQiLCJnZXRBbGxCeVRlc3RJZCIsImdlbUNvbXBvbmVudHMiLCJwbGF5ZXJHZW1JbWFnZXMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0VxdWFsIiwiX3JlZjIiLCJnZXRCeVRlc3RJZCIsImZvckVhY2giLCJwbGF5ZXIiLCJnZW1JbWFnZSIsInRvQmVUcnV0aHkiLCJfcmVmMyIsImVtcHR5UGxhbk51bWJlcnMiLCJwbGFuTnVtYmVyIiwidG9CZUdyZWF0ZXJUaGFuIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9HYW1lQm9hcmQvR2FtZUJvYXJkLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICd0eXBlcydcblxuaW1wb3J0IHsgR2FtZUJvYXJkIH0gZnJvbSAnLi4vJ1xuXG5jb25zdCBwbGF5ZXJzOiBQbGF5ZXJbXSA9IFtcbiAge1xuICAgIGlkOiAyLFxuICAgIHBsYW46IDcyLFxuICAgIGF2YXRhcjogMTA2LFxuICB9LFxuICB7XG4gICAgaWQ6IDQsXG4gICAgcGxhbjogMzQsXG4gICAgYXZhdGFyOlxuICAgICAgJ2h0dHBzOi8vYmFma3JlaWZ0cm1mbWltbHZvMjZ4YXhmdnQyeXBuamphYXZxNW1nbmtqbGpzNm1jemZla2lpNGNtdHEuaXBmcy5uZnRzdG9yYWdlLmxpbmsvJyxcbiAgfSxcbl1cblxudGVzdCgnc2hvdWxkIHJlbmRlciB0aGUgY29ycmVjdCBudW1iZXIgb2YgR2VtIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIHBsYXllcnMgcHJvcCcsICgpID0+IHtcbiAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG4gIGNvbnN0IGdlbUNvbXBvbmVudHMgPSBnZXRBbGxCeVRlc3RJZCgnZ2VtLWNvbnRhaW5lcicpXG4gIGNvbnN0IHBsYXllckdlbUltYWdlcyA9IGdldEFsbEJ5VGVzdElkKCdwbGF5ZXItZ2VtLWltYWdlJylcbiAgZXhwZWN0KHBsYXllckdlbUltYWdlcy5sZW5ndGgpLnRvRXF1YWwoMikgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwIDIg0LjQs9GA0L7QutCwXG4gIGV4cGVjdChnZW1Db21wb25lbnRzLmxlbmd0aCkudG9FcXVhbCg3MikgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwINC+0LHRidC10LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0LrQvtC80L/QvtC90LXQvdGC0L7QsiBHZW1cbn0pXG5cbnRlc3QoJ3Nob3VsZCByZW5kZXIgcGxheWVyIGF2YXRhcnMnLCAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuXG4gIHBsYXllcnMuZm9yRWFjaCgocGxheWVyKSA9PiB7XG4gICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRlc3RJZChgZ2VtLSR7cGxheWVyLmlkfWApXG4gICAgZXhwZWN0KGdlbUltYWdlKS50b0JlVHJ1dGh5KClcbiAgfSlcbn0pXG5cbi8vIHRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4vLyAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuXG4vLyAgIGNvbnN0IGdlbUNvbXBvbmVudHMgPSBnZXRBbGxCeVRlc3RJZCgvXmdlbS1cXGQrJC8pXG4vLyAgIGV4cGVjdChnZW1Db21wb25lbnRzLmxlbmd0aCkudG9FcXVhbCg3MikgLy8g0J7QsdGJ0LXQtSDQutC+0LvQuNGH0LXRgdGC0LLQviBHZW0g0LrQvtC80L/QvtC90LXQvdGC0L7QsiDQsdC10Lcg0L/Rg9GB0YLRi9GFINGP0YfQtdC10Lpcbi8vIH0pXG5cbnRlc3QoJ3Nob3VsZCByZW5kZXIgcGxhbiBudW1iZXJzIGZvciBlbXB0eSBzcGFjZXMnLCAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuXG4gIGNvbnN0IGVtcHR5UGxhbk51bWJlcnMgPSBbNjgsIDY5LCA3MCwgNzEsIDcyXVxuICBlbXB0eVBsYW5OdW1iZXJzLmZvckVhY2goKHBsYW5OdW1iZXIpID0+IHtcbiAgICBjb25zdCBnZW1JbWFnZSA9IGdldEFsbEJ5VGVzdElkKGBnZW0tJHtwbGFuTnVtYmVyfWApXG4gICAgZXhwZWN0KGdlbUltYWdlLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFHQSxJQUFBRSxHQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFNRyxPQUFPLEdBQWEsQ0FDeEI7RUFDRUMsRUFBRSxFQUFFLENBQUM7RUFDTEMsSUFBSSxFQUFFLEVBQUU7RUFDUkMsTUFBTSxFQUFFO0NBQ1QsRUFDRDtFQUNFRixFQUFFLEVBQUUsQ0FBQztFQUNMQyxJQUFJLEVBQUUsRUFBRTtFQUNSQyxNQUFNLEVBQ0o7Q0FDSCxDQUNGO0FBRURDLElBQUksQ0FBQyw4RUFBOEUsRUFBRSxZQUFLO0VBQ3hGLElBQUFDLElBQUEsR0FBMkIsSUFBQVAsY0FBQSxDQUFBUSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNULEdBQUEsQ0FBQVUsU0FBUztNQUFDVCxPQUFPLEVBQUVBO0lBQVEsRUFBRyxDQUFDO0lBQTFEVSxjQUFjLEdBQUFMLElBQUEsQ0FBZEssY0FBYztFQUN0QixJQUFNQyxhQUFhLEdBQUdELGNBQWMsQ0FBQyxlQUFlLENBQUM7RUFDckQsSUFBTUUsZUFBZSxHQUFHRixjQUFjLENBQUMsa0JBQWtCLENBQUM7RUFDMURHLE1BQU0sQ0FBQ0QsZUFBZSxDQUFDRSxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLENBQUMsQ0FBQztFQUN6Q0YsTUFBTSxDQUFDRixhQUFhLENBQUNHLE1BQU0sQ0FBQyxDQUFDQyxPQUFPLENBQUMsRUFBRSxDQUFDO0FBQzFDLENBQUMsQ0FBQztBQUVGWCxJQUFJLENBQUMsOEJBQThCLEVBQUUsWUFBSztFQUN4QyxJQUFBWSxLQUFBLEdBQXdCLElBQUFsQixjQUFBLENBQUFRLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1QsR0FBQSxDQUFBVSxTQUFTO01BQUNULE9BQU8sRUFBRUE7SUFBUSxFQUFHLENBQUM7SUFBdkRpQixXQUFXLEdBQUFELEtBQUEsQ0FBWEMsV0FBVztFQUVuQmpCLE9BQU8sQ0FBQ2tCLE9BQU8sQ0FBQyxVQUFDQyxNQUFNLEVBQUk7SUFDekIsSUFBTUMsUUFBUSxHQUFHSCxXQUFXLENBQUMsT0FBT0UsTUFBTSxDQUFDbEIsRUFBRSxFQUFFLENBQUM7SUFDaERZLE1BQU0sQ0FBQ08sUUFBUSxDQUFDLENBQUNDLFVBQVUsRUFBRTtFQUMvQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFTRmpCLElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxZQUFLO0VBQ3ZELElBQUFrQixLQUFBLEdBQTJCLElBQUF4QixjQUFBLENBQUFRLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1QsR0FBQSxDQUFBVSxTQUFTO01BQUNULE9BQU8sRUFBRUE7SUFBUSxFQUFHLENBQUM7SUFBMURVLGNBQWMsR0FBQVksS0FBQSxDQUFkWixjQUFjO0VBRXRCLElBQU1hLGdCQUFnQixHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztFQUM3Q0EsZ0JBQWdCLENBQUNMLE9BQU8sQ0FBQyxVQUFDTSxVQUFVLEVBQUk7SUFDdEMsSUFBTUosUUFBUSxHQUFHVixjQUFjLENBQUMsT0FBT2MsVUFBVSxFQUFFLENBQUM7SUFDcERYLE1BQU0sQ0FBQ08sUUFBUSxDQUFDTixNQUFNLENBQUMsQ0FBQ1csZUFBZSxDQUFDLENBQUMsQ0FBQztFQUM1QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==