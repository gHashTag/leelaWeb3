c1106ece7fb6aeee2acbdcc6c8c0ad54
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
test('should render the correct number of Gem components based on the players prop', function () {
  var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getAllByTestId = _ref.getAllByTestId;
  var gemComponents = getAllByTestId('gem-container');
  var playerGemImages = getAllByTestId('player-gem-image');
  expect(playerGemImages.length).toEqual(2);
  expect(gemComponents.length).toEqual(72);
});
test('should render player avatars correctly', function () {
  var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getAllByTestId = _ref2.getAllByTestId;
  players.forEach(function (player) {
    var gemImage = getAllByTestId(`gem-image-${player.id}`)[0];
    expect(gemImage).toBeTruthy();
    if (typeof player.avatar === 'string') {
      expect(gemImage.props.source.uri).toEqual(player.avatar);
    } else if (typeof player.avatar === 'number') {
      expect(gemImage.props.source).toEqual(player.avatar);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsInRlc3QiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHYW1lQm9hcmQiLCJnZXRBbGxCeVRlc3RJZCIsImdlbUNvbXBvbmVudHMiLCJwbGF5ZXJHZW1JbWFnZXMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0VxdWFsIiwiX3JlZjIiLCJmb3JFYWNoIiwicGxheWVyIiwiZ2VtSW1hZ2UiLCJ0b0JlVHJ1dGh5IiwicHJvcHMiLCJzb3VyY2UiLCJ1cmkiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL0dhbWVCb2FyZC9HYW1lQm9hcmQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJ3R5cGVzJ1xuXG5pbXBvcnQgeyBHYW1lQm9hcmQgfSBmcm9tICcuLi8nXG5cbmNvbnN0IHBsYXllcnM6IFBsYXllcltdID0gW1xuICB7XG4gICAgaWQ6IDIsXG4gICAgcGxhbjogNzIsXG4gICAgYXZhdGFyOiAxMDYsXG4gIH0sXG4gIHtcbiAgICBpZDogNCxcbiAgICBwbGFuOiAzNCxcbiAgICBhdmF0YXI6XG4gICAgICAnaHR0cHM6Ly9iYWZrcmVpZnRybWZtaW1sdm8yNnhheGZ2dDJ5cG5qamFhdnE1bWdua2psanM2bWN6ZmVraWk0Y210cS5pcGZzLm5mdHN0b3JhZ2UubGluay8nLFxuICB9LFxuXVxuXG50ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBjb3JyZWN0IG51bWJlciBvZiBHZW0gY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgcGxheWVycyBwcm9wJywgKCkgPT4ge1xuICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPilcbiAgY29uc3QgZ2VtQ29tcG9uZW50cyA9IGdldEFsbEJ5VGVzdElkKCdnZW0tY29udGFpbmVyJylcbiAgY29uc3QgcGxheWVyR2VtSW1hZ2VzID0gZ2V0QWxsQnlUZXN0SWQoJ3BsYXllci1nZW0taW1hZ2UnKVxuICBleHBlY3QocGxheWVyR2VtSW1hZ2VzLmxlbmd0aCkudG9FcXVhbCgyKSAvLyDQn9GA0L7QstC10YDQutCwINC90LAgMiDQuNCz0YDQvtC60LBcbiAgZXhwZWN0KGdlbUNvbXBvbmVudHMubGVuZ3RoKS50b0VxdWFsKDcyKSAvLyDQn9GA0L7QstC10YDQutCwINC90LAg0L7QsdGJ0LXQtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQutC+0LzQv9C+0L3QtdC90YLQvtCyIEdlbVxufSlcblxudGVzdCgnc2hvdWxkIHJlbmRlciBwbGF5ZXIgYXZhdGFycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuXG4gIHBsYXllcnMuZm9yRWFjaCgocGxheWVyKSA9PiB7XG4gICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRBbGxCeVRlc3RJZChgZ2VtLWltYWdlLSR7cGxheWVyLmlkfWApWzBdXG4gICAgZXhwZWN0KGdlbUltYWdlKS50b0JlVHJ1dGh5KClcblxuICAgIGlmICh0eXBlb2YgcGxheWVyLmF2YXRhciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGV4cGVjdChnZW1JbWFnZS5wcm9wcy5zb3VyY2UudXJpKS50b0VxdWFsKHBsYXllci5hdmF0YXIpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGxheWVyLmF2YXRhciA9PT0gJ251bWJlcicpIHtcbiAgICAgIGV4cGVjdChnZW1JbWFnZS5wcm9wcy5zb3VyY2UpLnRvRXF1YWwocGxheWVyLmF2YXRhcilcbiAgICB9XG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFHQSxJQUFBRSxHQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFNRyxPQUFPLEdBQWEsQ0FDeEI7RUFDRUMsRUFBRSxFQUFFLENBQUM7RUFDTEMsSUFBSSxFQUFFLEVBQUU7RUFDUkMsTUFBTSxFQUFFO0NBQ1QsRUFDRDtFQUNFRixFQUFFLEVBQUUsQ0FBQztFQUNMQyxJQUFJLEVBQUUsRUFBRTtFQUNSQyxNQUFNLEVBQ0o7Q0FDSCxDQUNGO0FBRURDLElBQUksQ0FBQyw4RUFBOEUsRUFBRSxZQUFLO0VBQ3hGLElBQUFDLElBQUEsR0FBMkIsSUFBQVAsY0FBQSxDQUFBUSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNULEdBQUEsQ0FBQVUsU0FBUztNQUFDVCxPQUFPLEVBQUVBO0lBQVEsRUFBRyxDQUFDO0lBQTFEVSxjQUFjLEdBQUFMLElBQUEsQ0FBZEssY0FBYztFQUN0QixJQUFNQyxhQUFhLEdBQUdELGNBQWMsQ0FBQyxlQUFlLENBQUM7RUFDckQsSUFBTUUsZUFBZSxHQUFHRixjQUFjLENBQUMsa0JBQWtCLENBQUM7RUFDMURHLE1BQU0sQ0FBQ0QsZUFBZSxDQUFDRSxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLENBQUMsQ0FBQztFQUN6Q0YsTUFBTSxDQUFDRixhQUFhLENBQUNHLE1BQU0sQ0FBQyxDQUFDQyxPQUFPLENBQUMsRUFBRSxDQUFDO0FBQzFDLENBQUMsQ0FBQztBQUVGWCxJQUFJLENBQUMsd0NBQXdDLEVBQUUsWUFBSztFQUNsRCxJQUFBWSxLQUFBLEdBQTJCLElBQUFsQixjQUFBLENBQUFRLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1QsR0FBQSxDQUFBVSxTQUFTO01BQUNULE9BQU8sRUFBRUE7SUFBUSxFQUFHLENBQUM7SUFBMURVLGNBQWMsR0FBQU0sS0FBQSxDQUFkTixjQUFjO0VBRXRCVixPQUFPLENBQUNpQixPQUFPLENBQUMsVUFBQ0MsTUFBTSxFQUFJO0lBQ3pCLElBQU1DLFFBQVEsR0FBR1QsY0FBYyxDQUFDLGFBQWFRLE1BQU0sQ0FBQ2pCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVEWSxNQUFNLENBQUNNLFFBQVEsQ0FBQyxDQUFDQyxVQUFVLEVBQUU7SUFFN0IsSUFBSSxPQUFPRixNQUFNLENBQUNmLE1BQU0sS0FBSyxRQUFRLEVBQUU7TUFDckNVLE1BQU0sQ0FBQ00sUUFBUSxDQUFDRSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUNSLE9BQU8sQ0FBQ0csTUFBTSxDQUFDZixNQUFNLENBQUM7S0FDekQsTUFBTSxJQUFJLE9BQU9lLE1BQU0sQ0FBQ2YsTUFBTSxLQUFLLFFBQVEsRUFBRTtNQUM1Q1UsTUFBTSxDQUFDTSxRQUFRLENBQUNFLEtBQUssQ0FBQ0MsTUFBTSxDQUFDLENBQUNQLE9BQU8sQ0FBQ0csTUFBTSxDQUFDZixNQUFNLENBQUM7O0VBRXhELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9