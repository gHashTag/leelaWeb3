6e8dc7960f27fd202273b7410a4b87fe
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NeomorphCircle = void 0;
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var native_1 = require("@react-navigation/native");
var cons_1 = require("../../cons");
var react_native_neomorph_shadows_1 = require("react-native-neomorph-shadows");
var react_native_size_matters_1 = require("react-native-size-matters");
var NeomorphCircle = function NeomorphCircle(_ref) {
  var children = _ref.children,
    viewStyle = _ref.viewStyle,
    shadowStyle = _ref.shadowStyle;
  var _ref2 = (0, native_1.useTheme)(),
    dark = _ref2.dark;
  var backgroundColor = dark ? cons_1.black : cons_1.lightGray;
  return (0, _jsxRuntime.jsx)(react_native_neomorph_shadows_1.Neomorph, {
    style: Object.assign({}, styles.container, shadowStyle, viewStyle, {
      backgroundColor: backgroundColor
    }),
    children: (0, _jsxRuntime.jsx)(react_native_1.View, {
      style: viewStyle,
      children: children
    })
  });
};
exports.NeomorphCircle = NeomorphCircle;
var styles = react_native_size_matters_1.ScaledSheet.create({
  container: {
    borderRadius: 40,
    shadowRadius: 5
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwibmF0aXZlXzEiLCJjb25zXzEiLCJyZWFjdF9uYXRpdmVfbmVvbW9ycGhfc2hhZG93c18xIiwicmVhY3RfbmF0aXZlX3NpemVfbWF0dGVyc18xIiwiTmVvbW9ycGhDaXJjbGUiLCJfcmVmIiwiY2hpbGRyZW4iLCJ2aWV3U3R5bGUiLCJzaGFkb3dTdHlsZSIsIl9yZWYyIiwidXNlVGhlbWUiLCJkYXJrIiwiYmFja2dyb3VuZENvbG9yIiwiYmxhY2siLCJsaWdodEdyYXkiLCJfanN4UnVudGltZSIsImpzeCIsIk5lb21vcnBoIiwic3R5bGUiLCJPYmplY3QiLCJhc3NpZ24iLCJzdHlsZXMiLCJjb250YWluZXIiLCJWaWV3IiwiZXhwb3J0cyIsIlNjYWxlZFNoZWV0IiwiY3JlYXRlIiwiYm9yZGVyUmFkaXVzIiwic2hhZG93UmFkaXVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9OZW9tb3JwaENpcmNsZS9OZW9tb3JwaENpcmNsZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBWaWV3LCBWaWV3UHJvcHMsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSdcblxuaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnXG5pbXBvcnQgeyBibGFjaywgbGlnaHRHcmF5IH0gZnJvbSAnY29ucydcbmltcG9ydCB7IE5lb21vcnBoIH0gZnJvbSAncmVhY3QtbmF0aXZlLW5lb21vcnBoLXNoYWRvd3MnXG5pbXBvcnQgeyBTY2FsZWRTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1zaXplLW1hdHRlcnMnXG5cbnR5cGUgRmxleFN0eWxlUHJvcGVydGllcyA9XG4gIHwgJ2ZsZXgnXG4gIHwgJ2FsaWduU2VsZidcbiAgfCAnZmxleEdyb3cnXG4gIHwgJ2ZsZXhTaHJpbmsnXG4gIHwgJ2ZsZXhCYXNpcydcblxudHlwZSBWaWV3U3R5bGVXaXRob3V0RmxleCA9IFBpY2s8XG4gIFZpZXdTdHlsZSxcbiAgRXhjbHVkZTxrZXlvZiBWaWV3U3R5bGUsIEZsZXhTdHlsZVByb3BlcnRpZXM+XG4+XG5cbmludGVyZmFjZSBWaWV3U3R5bGVXaXRoU2hhZG93IGV4dGVuZHMgVmlld1N0eWxlV2l0aG91dEZsZXgge1xuICBzaGFkb3dPZmZzZXQ/OiB7XG4gICAgd2lkdGg6IG51bWJlclxuICAgIGhlaWdodDogbnVtYmVyXG4gIH1cbiAgc2hhZG93T3BhY2l0eT86IG51bWJlclxuICBzaGFkb3dDb2xvcj86IHN0cmluZ1xuICBzaGFkb3dSYWRpdXM/OiBudW1iZXJcbiAgYm9yZGVyUmFkaXVzPzogbnVtYmVyXG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZ1xuICB3aWR0aD86IG51bWJlclxuICBoZWlnaHQ/OiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIE5lb21vcnBoQ2lyY2xlUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG4gIHNoYWRvd1N0eWxlPzogVmlld1N0eWxlV2l0aFNoYWRvd1xuICB2aWV3U3R5bGU/OiBWaWV3UHJvcHNcbn1cblxuY29uc3QgTmVvbW9ycGhDaXJjbGU6IFJlYWN0LkZDPE5lb21vcnBoQ2lyY2xlUHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIHZpZXdTdHlsZSxcbiAgc2hhZG93U3R5bGUsXG59KSA9PiB7XG4gIGNvbnN0IHsgZGFyayB9ID0gdXNlVGhlbWUoKVxuICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBkYXJrID8gYmxhY2sgOiBsaWdodEdyYXlcblxuICByZXR1cm4gKFxuICAgIDxOZW9tb3JwaFxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAuLi5zdHlsZXMuY29udGFpbmVyLFxuICAgICAgICAuLi5zaGFkb3dTdHlsZSxcbiAgICAgICAgLi4udmlld1N0eWxlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxWaWV3IHN0eWxlPXt2aWV3U3R5bGV9PntjaGlsZHJlbn08L1ZpZXc+XG4gICAgPC9OZW9tb3JwaD5cbiAgKVxufVxuXG5jb25zdCBzdHlsZXMgPSBTY2FsZWRTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBib3JkZXJSYWRpdXM6IDQwLFxuICAgIHNoYWRvd1JhZGl1czogNSxcbiAgfSxcbn0pXG5cbmV4cG9ydCB7IE5lb21vcnBoQ2lyY2xlIH1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLFFBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLCtCQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSywyQkFBQSxHQUFBTCxPQUFBO0FBa0NBLElBQU1NLGNBQWMsR0FBa0MsU0FBaERBLGNBQWNBLENBQUFDLElBQUEsRUFJZjtFQUFBLElBSEhDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQ1JDLFNBQVMsR0FBQUYsSUFBQSxDQUFURSxTQUFTO0lBQ1RDLFdBQVcsR0FBQUgsSUFBQSxDQUFYRyxXQUFXO0VBRVgsSUFBQUMsS0FBQSxHQUFpQixJQUFBVCxRQUFBLENBQUFVLFFBQVEsR0FBRTtJQUFuQkMsSUFBSSxHQUFBRixLQUFBLENBQUpFLElBQUk7RUFDWixJQUFNQyxlQUFlLEdBQUdELElBQUksR0FBR1YsTUFBQSxDQUFBWSxLQUFLLEdBQUdaLE1BQUEsQ0FBQWEsU0FBUztFQUVoRCxPQUNFLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDZCwrQkFBQSxDQUFBZSxRQUFRO0lBQ1BDLEtBQUssRUFBQUMsTUFBQSxDQUFBQyxNQUFBLEtBRUFDLE1BQU0sQ0FBQ0MsU0FBUyxFQUNoQmQsV0FBVyxFQUNYRCxTQUFTO01BQ1pLLGVBQWUsRUFBZkE7SUFBZSxFQUNmO0lBQUFOLFFBQUEsRUFFRixJQUFBUyxXQUFBLENBQUFDLEdBQUEsRUFBQ2pCLGNBQUEsQ0FBQXdCLElBQUk7TUFBQ0wsS0FBSyxFQUFFWCxTQUFVO01BQUFELFFBQUEsRUFBRUE7SUFBUSxDQUFPO0VBQzFDLENBQVUsQ0FBQztBQUVmLENBQUM7QUFTUWtCLE9BQUEsQ0FBQXBCLGNBQUEsR0FBQUEsY0FBQTtBQVBULElBQU1pQixNQUFNLEdBQUdsQiwyQkFBQSxDQUFBc0IsV0FBVyxDQUFDQyxNQUFNLENBQUM7RUFDaENKLFNBQVMsRUFBRTtJQUNUSyxZQUFZLEVBQUUsRUFBRTtJQUNoQkMsWUFBWSxFQUFFOztDQUVqQixDQUFDIn0=