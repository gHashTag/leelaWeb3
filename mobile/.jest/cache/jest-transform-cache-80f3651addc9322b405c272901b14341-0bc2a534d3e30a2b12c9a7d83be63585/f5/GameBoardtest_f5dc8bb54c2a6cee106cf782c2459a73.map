{"version":3,"names":["react_1","__importDefault","require","react_native_1","__1","players","id","plan","avatar","describe","test","_ref","render","_jsxRuntime","jsx","GameBoard","getAllByTestId","gemComponents","playerGemImages","expect","length","toEqual","_asyncToGenerator2","default","_ref3","queryByTestId","waitFor","forEach","player","playerGemImage","toBeTruthy","_playerGemImage$props","_playerGemImage$props2","props","source","uri"],"sources":["/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx"],"sourcesContent":["import React from 'react'\n\nimport { render, waitFor } from '@testing-library/react-native'\nimport { Player } from 'types'\n\nimport { GameBoard } from '../'\n\nconst players: Player[] = [\n  {\n    id: 2,\n    plan: 72,\n    avatar: 106,\n  },\n  {\n    id: 4,\n    plan: 34,\n    avatar:\n      'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/',\n  },\n]\n\ndescribe('GameBoard Component', () => {\n  test('should render the correct number of Gem components based on the players prop', () => {\n    const { getAllByTestId } = render(<GameBoard players={players} />)\n    const gemComponents = getAllByTestId('gem-container')\n    const playerGemImages = getAllByTestId('player-gem-image')\n    expect(playerGemImages.length).toEqual(2) // Проверка на 2 игрока\n    expect(gemComponents.length).toEqual(72) // Проверка на общее количество компонентов Gem\n  })\n\n  test('should render correct player avatars', async () => {\n    const { queryByTestId } = render(<GameBoard players={players} />)\n\n    await waitFor(() => {\n      players.forEach((player) => {\n        const playerGemImage = queryByTestId(`gem-${player.id}`)\n        expect(playerGemImage).toBeTruthy()\n        if (typeof player.avatar === 'string') {\n          expect(playerGemImage?.props?.source?.uri).toEqual(player.avatar)\n        }\n      })\n    })\n  })\n})\n\n// test('should render player avatars', () => {\n//   const { getByTestId } = render(<GameBoard players={players} />)\n\n//   players.forEach((player) => {\n//     const gemImage = getByTestId(`gem-${player.id}`)\n//     expect(gemImage).toBeTruthy()\n//   })\n// })\n\n// test('should render the correct number of Gem components based on the players prop', () => {\n//   const { getAllByTestId } = render(<GameBoard players={players} />)\n\n//   const gemComponents = getAllByTestId(/^gem-\\d+$/)\n//   expect(gemComponents.length).toEqual(72) // Общее количество Gem компонентов без пустых ячеек\n// })\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AAGA,IAAAE,GAAA,GAAAF,OAAA;AAEA,IAAMG,OAAO,GAAa,CACxB;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE;CACT,EACD;EACEF,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,EAAE;EACRC,MAAM,EACJ;CACH,CACF;AAEDC,QAAQ,CAAC,qBAAqB,EAAE,YAAK;EACnCC,IAAI,CAAC,8EAA8E,EAAE,YAAK;IACxF,IAAAC,IAAA,GAA2B,IAAAR,cAAA,CAAAS,MAAM,EAAC,IAAAC,WAAA,CAAAC,GAAA,EAACV,GAAA,CAAAW,SAAS;QAACV,OAAO,EAAEA;MAAQ,EAAG,CAAC;MAA1DW,cAAc,GAAAL,IAAA,CAAdK,cAAc;IACtB,IAAMC,aAAa,GAAGD,cAAc,CAAC,eAAe,CAAC;IACrD,IAAME,eAAe,GAAGF,cAAc,CAAC,kBAAkB,CAAC;IAC1DG,MAAM,CAACD,eAAe,CAACE,MAAM,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;IACzCF,MAAM,CAACF,aAAa,CAACG,MAAM,CAAC,CAACC,OAAO,CAAC,EAAE,CAAC;EAC1C,CAAC,CAAC;EAEFX,IAAI,CAAC,sCAAsC,MAAAY,kBAAA,CAAAC,OAAA,EAAE,aAAW;IACtD,IAAAC,KAAA,GAA0B,IAAArB,cAAA,CAAAS,MAAM,EAAC,IAAAC,WAAA,CAAAC,GAAA,EAACV,GAAA,CAAAW,SAAS;QAACV,OAAO,EAAEA;MAAQ,EAAG,CAAC;MAAzDoB,aAAa,GAAAD,KAAA,CAAbC,aAAa;IAErB,MAAM,IAAAtB,cAAA,CAAAuB,OAAO,EAAC,YAAK;MACjBrB,OAAO,CAACsB,OAAO,CAAC,UAACC,MAAM,EAAI;QACzB,IAAMC,cAAc,GAAGJ,aAAa,CAAC,OAAOG,MAAM,CAACtB,EAAE,EAAE,CAAC;QACxDa,MAAM,CAACU,cAAc,CAAC,CAACC,UAAU,EAAE;QACnC,IAAI,OAAOF,MAAM,CAACpB,MAAM,KAAK,QAAQ,EAAE;UAAA,IAAAuB,qBAAA,EAAAC,sBAAA;UACrCb,MAAM,CAACU,cAAc,qBAAAE,qBAAA,GAAdF,cAAc,CAAEI,KAAK,sBAAAD,sBAAA,GAArBD,qBAAA,CAAuBG,MAAM,qBAA7BF,sBAAA,CAA+BG,GAAG,CAAC,CAACd,OAAO,CAACO,MAAM,CAACpB,MAAM,CAAC;;MAErE,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAC;AACJ,CAAC,CAAC"}