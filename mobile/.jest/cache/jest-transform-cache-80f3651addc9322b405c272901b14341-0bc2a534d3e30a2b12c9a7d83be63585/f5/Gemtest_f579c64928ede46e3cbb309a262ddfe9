88765a3c2558942d607a8411b5629660
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var playerWithNumber = {
  id: 1,
  plan: 68,
  avatar: ''
};
var playerWithStringAvatar = {
  id: 2,
  plan: 72,
  avatar: 'https://example.com/avatar.jpg'
};
var playerWithNumberAvatar = {
  id: 3,
  plan: 34,
  avatar: 106
};
describe('Gem Component', function () {
  test('should have the correct testID prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: function onPress() {}
      })),
      getByTestId = _ref.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(gemImage).toBeDefined();
  });
  test('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: onPressMock
      })),
      getByTestId = _ref2.getByTestId;
    var gemContainer = getByTestId('gem-container');
    react_native_1.fireEvent.press(gemContainer);
    expect(onPressMock).toHaveBeenCalled();
  });
  test('should render number for player with plan number 68', function () {
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        player: playerWithNumber,
        planNumber: 68
      })),
      queryByTestId = _ref3.queryByTestId;
    var numberGem = queryByTestId('gem-image');
    expect(numberGem).toBeTruthy();
    var imageGem = queryByTestId('player-gem-image');
    expect(imageGem).toBeFalsy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVyV2l0aE51bWJlciIsImlkIiwicGxhbiIsImF2YXRhciIsInBsYXllcldpdGhTdHJpbmdBdmF0YXIiLCJwbGF5ZXJXaXRoTnVtYmVyQXZhdGFyIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiR2VtIiwicGxhbk51bWJlciIsIm9uUHJlc3MiLCJnZXRCeVRlc3RJZCIsImdlbUltYWdlIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJvblByZXNzTW9jayIsImplc3QiLCJmbiIsIl9yZWYyIiwiZ2VtQ29udGFpbmVyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlZjMiLCJwbGF5ZXIiLCJxdWVyeUJ5VGVzdElkIiwibnVtYmVyR2VtIiwidG9CZVRydXRoeSIsImltYWdlR2VtIiwidG9CZUZhbHN5Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9HZW0vR2VtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb21wb25lbnRzL0dlbS9HZW0udGVzdC50c3hcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcblxuaW1wb3J0IHsgR2VtIH0gZnJvbSAnLi4vJ1xuXG5jb25zdCBwbGF5ZXJXaXRoTnVtYmVyID0ge1xuICBpZDogMSxcbiAgcGxhbjogNjgsXG4gIGF2YXRhcjogJycsXG59XG5cbmNvbnN0IHBsYXllcldpdGhTdHJpbmdBdmF0YXIgPSB7XG4gIGlkOiAyLFxuICBwbGFuOiA3MixcbiAgYXZhdGFyOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9hdmF0YXIuanBnJyxcbn1cblxuY29uc3QgcGxheWVyV2l0aE51bWJlckF2YXRhciA9IHtcbiAgaWQ6IDMsXG4gIHBsYW46IDM0LFxuICBhdmF0YXI6IDEwNixcbn1cblxuZGVzY3JpYmUoJ0dlbSBDb21wb25lbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ3Nob3VsZCBoYXZlIHRoZSBjb3JyZWN0IHRlc3RJRCBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8R2VtIHBsYW5OdW1iZXI9ezV9IG9uUHJlc3M9eygpID0+IHt9fSAvPilcbiAgICBjb25zdCBnZW1JbWFnZSA9IGdldEJ5VGVzdElkKCdnZW0taW1hZ2UnKVxuICAgIGV4cGVjdChnZW1JbWFnZSkudG9CZURlZmluZWQoKVxuICB9KVxuXG4gIHRlc3QoJ3Nob3VsZCBjYWxsIHRoZSBvblByZXNzIGZ1bmN0aW9uIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBvblByZXNzTW9jayA9IGplc3QuZm4oKVxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8R2VtIHBsYW5OdW1iZXI9ezV9IG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPilcbiAgICBjb25zdCBnZW1Db250YWluZXIgPSBnZXRCeVRlc3RJZCgnZ2VtLWNvbnRhaW5lcicpXG4gICAgZmlyZUV2ZW50LnByZXNzKGdlbUNvbnRhaW5lcilcbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICB9KVxuXG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgbnVtYmVyIGZvciBwbGF5ZXIgd2l0aCBwbGFuIG51bWJlciA2OCcsICgpID0+IHtcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxHZW0gcGxheWVyPXtwbGF5ZXJXaXRoTnVtYmVyfSBwbGFuTnVtYmVyPXs2OH0gLz4sXG4gICAgKVxuXG4gICAgY29uc3QgbnVtYmVyR2VtID0gcXVlcnlCeVRlc3RJZCgnZ2VtLWltYWdlJylcbiAgICBleHBlY3QobnVtYmVyR2VtKS50b0JlVHJ1dGh5KClcblxuICAgIGNvbnN0IGltYWdlR2VtID0gcXVlcnlCeVRlc3RJZCgncGxheWVyLWdlbS1pbWFnZScpXG4gICAgZXhwZWN0KGltYWdlR2VtKS50b0JlRmFsc3koKVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsR0FBQSxHQUFBRixPQUFBO0FBRUEsSUFBTUcsZ0JBQWdCLEdBQUc7RUFDdkJDLEVBQUUsRUFBRSxDQUFDO0VBQ0xDLElBQUksRUFBRSxFQUFFO0VBQ1JDLE1BQU0sRUFBRTtDQUNUO0FBRUQsSUFBTUMsc0JBQXNCLEdBQUc7RUFDN0JILEVBQUUsRUFBRSxDQUFDO0VBQ0xDLElBQUksRUFBRSxFQUFFO0VBQ1JDLE1BQU0sRUFBRTtDQUNUO0FBRUQsSUFBTUUsc0JBQXNCLEdBQUc7RUFDN0JKLEVBQUUsRUFBRSxDQUFDO0VBQ0xDLElBQUksRUFBRSxFQUFFO0VBQ1JDLE1BQU0sRUFBRTtDQUNUO0FBRURHLFFBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBSztFQUM3QkMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLFlBQUs7SUFDL0MsSUFBQUMsSUFBQSxHQUF3QixJQUFBVixjQUFBLENBQUFXLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1osR0FBQSxDQUFBYSxHQUFHO1FBQUNDLFVBQVUsRUFBRSxDQUFFO1FBQUNDLE9BQU8sRUFBRSxTQUFBQSxRQUFBLEVBQUssQ0FBRTtNQUFFLEVBQUcsQ0FBQztNQUFqRUMsV0FBVyxHQUFBUCxJQUFBLENBQVhPLFdBQVc7SUFDbkIsSUFBTUMsUUFBUSxHQUFHRCxXQUFXLENBQUMsV0FBVyxDQUFDO0lBQ3pDRSxNQUFNLENBQUNELFFBQVEsQ0FBQyxDQUFDRSxXQUFXLEVBQUU7RUFDaEMsQ0FBQyxDQUFDO0VBRUZYLElBQUksQ0FBQywrQ0FBK0MsRUFBRSxZQUFLO0lBQ3pELElBQU1ZLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDN0IsSUFBQUMsS0FBQSxHQUF3QixJQUFBeEIsY0FBQSxDQUFBVyxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNaLEdBQUEsQ0FBQWEsR0FBRztRQUFDQyxVQUFVLEVBQUUsQ0FBRTtRQUFDQyxPQUFPLEVBQUVLO01BQVksRUFBRyxDQUFDO01BQXBFSixXQUFXLEdBQUFPLEtBQUEsQ0FBWFAsV0FBVztJQUNuQixJQUFNUSxZQUFZLEdBQUdSLFdBQVcsQ0FBQyxlQUFlLENBQUM7SUFDakRqQixjQUFBLENBQUEwQixTQUFTLENBQUNDLEtBQUssQ0FBQ0YsWUFBWSxDQUFDO0lBQzdCTixNQUFNLENBQUNFLFdBQVcsQ0FBQyxDQUFDTyxnQkFBZ0IsRUFBRTtFQUN4QyxDQUFDLENBQUM7RUFFRm5CLElBQUksQ0FBQyxxREFBcUQsRUFBRSxZQUFLO0lBQy9ELElBQUFvQixLQUFBLEdBQTBCLElBQUE3QixjQUFBLENBQUFXLE1BQU0sRUFDOUIsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNaLEdBQUEsQ0FBQWEsR0FBRztRQUFDZ0IsTUFBTSxFQUFFNUIsZ0JBQWlCO1FBQUNhLFVBQVUsRUFBRTtNQUFHLEVBQUcsQ0FDbEQ7TUFGT2dCLGFBQWEsR0FBQUYsS0FBQSxDQUFiRSxhQUFhO0lBSXJCLElBQU1DLFNBQVMsR0FBR0QsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUM1Q1osTUFBTSxDQUFDYSxTQUFTLENBQUMsQ0FBQ0MsVUFBVSxFQUFFO0lBRTlCLElBQU1DLFFBQVEsR0FBR0gsYUFBYSxDQUFDLGtCQUFrQixDQUFDO0lBQ2xEWixNQUFNLENBQUNlLFFBQVEsQ0FBQyxDQUFDQyxTQUFTLEVBQUU7RUFDOUIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=