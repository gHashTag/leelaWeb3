47f22a4b62e8aaf217186b0863e9a37b
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextInputField = void 0;
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var components_1 = require("./..");
var cons_1 = require("../../cons");
var react_native_size_matters_1 = require("react-native-size-matters");
var TextInputField = function TextInputField(_ref) {
  var placeholder = _ref.placeholder,
    value = _ref.value,
    onChangeText = _ref.onChangeText,
    _ref$multiline = _ref.multiline,
    multiline = _ref$multiline === void 0 ? false : _ref$multiline,
    inputMode = _ref.inputMode,
    keyboardType = _ref.keyboardType;
  var inputComponent = (0, _jsxRuntime.jsx)(react_native_1.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(react_native_1.TextInput, {
      placeholder: placeholder,
      placeholderTextColor: cons_1.gray,
      multiline: multiline,
      value: value,
      onChangeText: onChangeText,
      style: styles.input,
      inputMode: inputMode,
      keyboardType: keyboardType
    })
  });
  return (0, _jsxRuntime.jsx)(components_1.NeomorphFlexView, {
    viewStyle: styles.card,
    children: inputComponent
  });
};
exports.TextInputField = TextInputField;
var styles = react_native_size_matters_1.ScaledSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    alignSelf: 'center',
    paddingVertical: 10,
    marginHorizontal: 20,
    marginVertical: 10
  },
  input: {
    flex: 1,
    bottom: 1,
    fontSize: 16,
    color: cons_1.gray
  },
  card: {
    width: (0, react_native_size_matters_1.ms)(230, 0.9),
    height: (0, react_native_size_matters_1.ms)(60, 0.9),
    borderRadius: (0, react_native_size_matters_1.s)(40),
    justifyContent: 'center',
    alignSelf: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiY29tcG9uZW50c18xIiwiY29uc18xIiwicmVhY3RfbmF0aXZlX3NpemVfbWF0dGVyc18xIiwiVGV4dElucHV0RmllbGQiLCJfcmVmIiwicGxhY2Vob2xkZXIiLCJ2YWx1ZSIsIm9uQ2hhbmdlVGV4dCIsIl9yZWYkbXVsdGlsaW5lIiwibXVsdGlsaW5lIiwiaW5wdXRNb2RlIiwia2V5Ym9hcmRUeXBlIiwiaW5wdXRDb21wb25lbnQiLCJfanN4UnVudGltZSIsImpzeCIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwiVGV4dElucHV0IiwicGxhY2Vob2xkZXJUZXh0Q29sb3IiLCJncmF5IiwiaW5wdXQiLCJOZW9tb3JwaEZsZXhWaWV3Iiwidmlld1N0eWxlIiwiY2FyZCIsImV4cG9ydHMiLCJTY2FsZWRTaGVldCIsImNyZWF0ZSIsImZsZXhEaXJlY3Rpb24iLCJhbGlnbkl0ZW1zIiwiYWxpZ25TZWxmIiwicGFkZGluZ1ZlcnRpY2FsIiwibWFyZ2luSG9yaXpvbnRhbCIsIm1hcmdpblZlcnRpY2FsIiwiZmxleCIsImJvdHRvbSIsImZvbnRTaXplIiwiY29sb3IiLCJ3aWR0aCIsIm1zIiwiaGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwicyIsImp1c3RpZnlDb250ZW50Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9UZXh0SW5wdXRGaWVsZC9UZXh0SW5wdXRGaWVsZC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBWaWV3LCBUZXh0SW5wdXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmltcG9ydCB7IE5lb21vcnBoRmxleFZpZXcgfSBmcm9tICdjb21wb25lbnRzJ1xuaW1wb3J0IHsgZ3JheSB9IGZyb20gJ2NvbnMnXG5pbXBvcnQgeyBTY2FsZWRTaGVldCwgbXMsIHMgfSBmcm9tICdyZWFjdC1uYXRpdmUtc2l6ZS1tYXR0ZXJzJ1xuXG5pbnRlcmZhY2UgVGV4dElucHV0RmllbGRQcm9wcyB7XG4gIHBsYWNlaG9sZGVyOiBzdHJpbmdcbiAgbXVsdGlsaW5lPzogYm9vbGVhblxuICB2YWx1ZTogc3RyaW5nXG4gIG9uQmx1cjogKCkgPT4gdm9pZFxuICBvbkNoYW5nZVRleHQ6ICh0ZXh0OiBzdHJpbmcpID0+IHZvaWRcbiAgaW5wdXRNb2RlPzpcbiAgICB8ICdkZWNpbWFsJ1xuICAgIHwgJ2VtYWlsJ1xuICAgIHwgJ25vbmUnXG4gICAgfCAnbnVtZXJpYydcbiAgICB8ICdzZWFyY2gnXG4gICAgfCAndGVsJ1xuICAgIHwgJ3RleHQnXG4gICAgfCAndXJsJ1xuICBrZXlib2FyZFR5cGU/OlxuICAgIHwgJ2RlZmF1bHQnXG4gICAgfCAnZW1haWwtYWRkcmVzcydcbiAgICB8ICdudW1lcmljJ1xuICAgIHwgJ3Bob25lLXBhZCdcbiAgICB8ICdhc2NpaS1jYXBhYmxlJ1xuICAgIHwgJ251bWJlcnMtYW5kLXB1bmN0dWF0aW9uJ1xuICAgIHwgJ3VybCdcbiAgICB8ICdudW1iZXItcGFkJ1xuICAgIHwgJ25hbWUtcGhvbmUtcGFkJ1xuICAgIHwgJ2RlY2ltYWwtcGFkJ1xuICAgIHwgJ3R3aXR0ZXInXG4gICAgfCAnd2ViLXNlYXJjaCdcbiAgICB8ICd2aXNpYmxlLXBhc3N3b3JkJ1xufVxuXG5jb25zdCBUZXh0SW5wdXRGaWVsZDogUmVhY3QuRkM8VGV4dElucHV0RmllbGRQcm9wcz4gPSAoe1xuICBwbGFjZWhvbGRlcixcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlVGV4dCxcbiAgbXVsdGlsaW5lID0gZmFsc2UsXG4gIGlucHV0TW9kZSxcbiAga2V5Ym9hcmRUeXBlLFxufSkgPT4ge1xuICBjb25zdCBpbnB1dENvbXBvbmVudCA9IChcbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICA8VGV4dElucHV0XG4gICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICAgICAgcGxhY2Vob2xkZXJUZXh0Q29sb3I9e2dyYXl9XG4gICAgICAgIG11bHRpbGluZT17bXVsdGlsaW5lfVxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIG9uQ2hhbmdlVGV4dD17b25DaGFuZ2VUZXh0fVxuICAgICAgICBzdHlsZT17c3R5bGVzLmlucHV0fVxuICAgICAgICBpbnB1dE1vZGU9e2lucHV0TW9kZX1cbiAgICAgICAga2V5Ym9hcmRUeXBlPXtrZXlib2FyZFR5cGV9XG4gICAgICAvPlxuICAgIDwvVmlldz5cbiAgKVxuXG4gIHJldHVybiAoXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIDxOZW9tb3JwaEZsZXhWaWV3IHZpZXdTdHlsZT17c3R5bGVzLmNhcmR9PlxuICAgICAge2lucHV0Q29tcG9uZW50fVxuICAgIDwvTmVvbW9ycGhGbGV4Vmlldz5cbiAgKVxufVxuXG5jb25zdCBzdHlsZXMgPSBTY2FsZWRTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgIHBhZGRpbmdWZXJ0aWNhbDogMTAsXG4gICAgbWFyZ2luSG9yaXpvbnRhbDogMjAsXG4gICAgbWFyZ2luVmVydGljYWw6IDEwLFxuICB9LFxuICBpbnB1dDoge1xuICAgIGZsZXg6IDEsXG4gICAgYm90dG9tOiAxLFxuICAgIGZvbnRTaXplOiAxNixcbiAgICBjb2xvcjogZ3JheSxcbiAgfSxcbiAgY2FyZDoge1xuICAgIHdpZHRoOiBtcygyMzAsIDAuOSksXG4gICAgaGVpZ2h0OiBtcyg2MCwgMC45KSxcbiAgICBib3JkZXJSYWRpdXM6IHMoNDApLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICB9LFxufSlcblxuZXhwb3J0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