b422c27d5f79097a89865d5aec9cdf59
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.styles = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("react-native");
var _Platform$select, _Platform$select2, _Platform$select3;
var styles = {
  body: {},
  heading1: {
    flexDirection: 'row',
    fontSize: 32
  },
  heading2: {
    flexDirection: 'row',
    fontSize: 24
  },
  heading3: {
    flexDirection: 'row',
    fontSize: 18
  },
  heading4: {
    flexDirection: 'row',
    fontSize: 16
  },
  heading5: {
    flexDirection: 'row',
    fontSize: 13
  },
  heading6: {
    flexDirection: 'row',
    fontSize: 11
  },
  hr: {
    backgroundColor: '#000000',
    height: 1
  },
  strong: {
    fontWeight: 'bold'
  },
  em: {
    fontStyle: 'italic'
  },
  s: {
    textDecorationLine: 'line-through'
  },
  blockquote: {
    backgroundColor: '#F5F5F5',
    borderColor: '#CCC',
    borderLeftWidth: 4,
    marginLeft: 5,
    paddingHorizontal: 5
  },
  bullet_list: {},
  ordered_list: {},
  list_item: {
    flexDirection: 'row',
    justifyContent: 'flex-start'
  },
  bullet_list_icon: {
    marginLeft: 10,
    marginRight: 10
  },
  bullet_list_content: {
    flex: 1
  },
  ordered_list_icon: {
    marginLeft: 10,
    marginRight: 10
  },
  ordered_list_content: {
    flex: 1
  },
  code_inline: Object.assign({
    borderWidth: 1,
    borderColor: '#CCCCCC',
    backgroundColor: '#f5f5f5',
    padding: 10,
    borderRadius: 4
  }, _reactNative.Platform.select((_Platform$select = {}, (0, _defineProperty2.default)(_Platform$select, 'ios', {
    fontFamily: 'Courier'
  }), (0, _defineProperty2.default)(_Platform$select, 'android', {
    fontFamily: 'monospace'
  }), _Platform$select))),
  code_block: Object.assign({
    borderWidth: 1,
    borderColor: '#CCCCCC',
    backgroundColor: '#f5f5f5',
    padding: 10,
    borderRadius: 4
  }, _reactNative.Platform.select((_Platform$select2 = {}, (0, _defineProperty2.default)(_Platform$select2, 'ios', {
    fontFamily: 'Courier'
  }), (0, _defineProperty2.default)(_Platform$select2, 'android', {
    fontFamily: 'monospace'
  }), _Platform$select2))),
  fence: Object.assign({
    borderWidth: 1,
    borderColor: '#CCCCCC',
    backgroundColor: '#f5f5f5',
    padding: 10,
    borderRadius: 4
  }, _reactNative.Platform.select((_Platform$select3 = {}, (0, _defineProperty2.default)(_Platform$select3, 'ios', {
    fontFamily: 'Courier'
  }), (0, _defineProperty2.default)(_Platform$select3, 'android', {
    fontFamily: 'monospace'
  }), _Platform$select3))),
  table: {
    borderWidth: 1,
    borderColor: '#000000',
    borderRadius: 3
  },
  thead: {},
  tbody: {},
  th: {
    flex: 1,
    padding: 5
  },
  tr: {
    borderBottomWidth: 1,
    borderColor: '#000000',
    flexDirection: 'row'
  },
  td: {
    flex: 1,
    padding: 5
  },
  link: {
    textDecorationLine: 'underline'
  },
  blocklink: {
    flex: 1,
    borderColor: '#000000',
    borderBottomWidth: 1
  },
  image: {
    flex: 1
  },
  text: {},
  textgroup: {},
  paragraph: {
    marginTop: 10,
    marginBottom: 10,
    flexWrap: 'wrap',
    flexDirection: 'row',
    alignItems: 'flex-start',
    justifyContent: 'flex-start',
    width: '100%'
  },
  hardbreak: {
    width: '100%',
    height: 1
  },
  softbreak: {},
  pre: {},
  inline: {},
  span: {}
};
exports.styles = styles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,