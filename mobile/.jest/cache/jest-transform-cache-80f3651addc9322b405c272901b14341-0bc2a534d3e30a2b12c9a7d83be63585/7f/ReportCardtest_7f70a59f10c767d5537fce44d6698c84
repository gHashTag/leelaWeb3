7986b439869925624ca9dd3e10e61600
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var ReportCard_1 = require("./ReportCard");
describe('ReportCard', function () {
  var mockProps = {
    id: '1',
    post: {
      id: 1,
      plan: 1,
      accept: true,
      text: 'Test post text',
      createTime: 1678840800000,
      liked: [],
      comments: [],
      ownerId: 'user1'
    },
    onPress: jest.fn(),
    fullName: 'John Doe',
    avatar: 'avatar.png',
    isAdmin: true,
    isLiked: false,
    likeCount: 10,
    commCount: 5,
    date: '2023-08-12',
    handleProfile: jest.fn(),
    handleAdminMenu: jest.fn(),
    handleShareLink: jest.fn(),
    handleLike: jest.fn(),
    handleComment: jest.fn()
  };
  it('should render correctly', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(ReportCard_1.ReportCard, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    var card = getByTestId('report-card');
    expect(card).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiUmVwb3J0Q2FyZF8xIiwiZGVzY3JpYmUiLCJtb2NrUHJvcHMiLCJpZCIsInBvc3QiLCJwbGFuIiwiYWNjZXB0IiwidGV4dCIsImNyZWF0ZVRpbWUiLCJsaWtlZCIsImNvbW1lbnRzIiwib3duZXJJZCIsIm9uUHJlc3MiLCJqZXN0IiwiZm4iLCJmdWxsTmFtZSIsImF2YXRhciIsImlzQWRtaW4iLCJpc0xpa2VkIiwibGlrZUNvdW50IiwiY29tbUNvdW50IiwiZGF0ZSIsImhhbmRsZVByb2ZpbGUiLCJoYW5kbGVBZG1pbk1lbnUiLCJoYW5kbGVTaGFyZUxpbmsiLCJoYW5kbGVMaWtlIiwiaGFuZGxlQ29tbWVudCIsIml0IiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiUmVwb3J0Q2FyZCIsIk9iamVjdCIsImFzc2lnbiIsImdldEJ5VGVzdElkIiwiY2FyZCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9SZXBvcnRDYXJkL1JlcG9ydENhcmQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuXG5pbXBvcnQgeyBSZXBvcnRDYXJkIH0gZnJvbSAnLi9SZXBvcnRDYXJkJ1xuXG5kZXNjcmliZSgnUmVwb3J0Q2FyZCcsICgpID0+IHtcbiAgY29uc3QgbW9ja1Byb3BzID0ge1xuICAgIGlkOiAnMScsXG4gICAgcG9zdDoge1xuICAgICAgaWQ6IDEsXG4gICAgICBwbGFuOiAxLFxuICAgICAgYWNjZXB0OiB0cnVlLFxuICAgICAgdGV4dDogJ1Rlc3QgcG9zdCB0ZXh0JyxcbiAgICAgIGNyZWF0ZVRpbWU6IDE2Nzg4NDA4MDAwMDAsXG4gICAgICBsaWtlZDogW10sXG4gICAgICBjb21tZW50czogW10sXG4gICAgICBvd25lcklkOiAndXNlcjEnLFxuICAgIH0sXG4gICAgb25QcmVzczogamVzdC5mbigpLFxuICAgIGZ1bGxOYW1lOiAnSm9obiBEb2UnLFxuICAgIGF2YXRhcjogJ2F2YXRhci5wbmcnLFxuICAgIGlzQWRtaW46IHRydWUsXG4gICAgaXNMaWtlZDogZmFsc2UsXG4gICAgbGlrZUNvdW50OiAxMCxcbiAgICBjb21tQ291bnQ6IDUsXG4gICAgZGF0ZTogJzIwMjMtMDgtMTInLFxuICAgIGhhbmRsZVByb2ZpbGU6IGplc3QuZm4oKSxcbiAgICBoYW5kbGVBZG1pbk1lbnU6IGplc3QuZm4oKSxcbiAgICBoYW5kbGVTaGFyZUxpbms6IGplc3QuZm4oKSxcbiAgICBoYW5kbGVMaWtlOiBqZXN0LmZuKCksXG4gICAgaGFuZGxlQ29tbWVudDogamVzdC5mbigpLFxuICB9XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8UmVwb3J0Q2FyZCB7Li4ubW9ja1Byb3BzfSAvPilcbiAgICBjb25zdCBjYXJkID0gZ2V0QnlUZXN0SWQoJ3JlcG9ydC1jYXJkJylcbiAgICBleHBlY3QoY2FyZCkudG9CZURlZmluZWQoKVxuICB9KVxuXG4gIC8vICAgaXQoJ3Nob3VsZCBjYWxsIG9uUHJlc3Mgd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXBvcnRDYXJkIHsuLi5tb2NrUHJvcHN9IC8+KVxuICAvLyAgICAgY29uc3QgY2FyZCA9IGdldEJ5VGVzdElkKCdyZXBvcnQtY2FyZCcpXG4gIC8vICAgICBmaXJlRXZlbnQucHJlc3MoY2FyZClcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMub25QcmVzcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIC8vICAgfSlcblxuICAvLyAgIGl0KCdzaG91bGQgY2FsbCBoYW5kbGVQcm9maWxlIHdoZW4gYXZhdGFyIGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFJlcG9ydENhcmQgey4uLm1vY2tQcm9wc30gLz4pXG4gIC8vICAgICBjb25zdCBhdmF0YXIgPSBnZXRCeVRlc3RJZCgncmVwb3J0LWNhcmQtYXZhdGFyJylcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhhdmF0YXIpXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLmhhbmRsZVByb2ZpbGUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICAvLyAgIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFFQUcsUUFBUSxDQUFDLFlBQVksRUFBRSxZQUFLO0VBQzFCLElBQU1DLFNBQVMsR0FBRztJQUNoQkMsRUFBRSxFQUFFLEdBQUc7SUFDUEMsSUFBSSxFQUFFO01BQ0pELEVBQUUsRUFBRSxDQUFDO01BQ0xFLElBQUksRUFBRSxDQUFDO01BQ1BDLE1BQU0sRUFBRSxJQUFJO01BQ1pDLElBQUksRUFBRSxnQkFBZ0I7TUFDdEJDLFVBQVUsRUFBRSxhQUFhO01BQ3pCQyxLQUFLLEVBQUUsRUFBRTtNQUNUQyxRQUFRLEVBQUUsRUFBRTtNQUNaQyxPQUFPLEVBQUU7S0FDVjtJQUNEQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQ2xCQyxRQUFRLEVBQUUsVUFBVTtJQUNwQkMsTUFBTSxFQUFFLFlBQVk7SUFDcEJDLE9BQU8sRUFBRSxJQUFJO0lBQ2JDLE9BQU8sRUFBRSxLQUFLO0lBQ2RDLFNBQVMsRUFBRSxFQUFFO0lBQ2JDLFNBQVMsRUFBRSxDQUFDO0lBQ1pDLElBQUksRUFBRSxZQUFZO0lBQ2xCQyxhQUFhLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQ3hCUyxlQUFlLEVBQUVWLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQzFCVSxlQUFlLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQzFCVyxVQUFVLEVBQUVaLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQ3JCWSxhQUFhLEVBQUViLElBQUksQ0FBQ0MsRUFBRTtHQUN2QjtFQUVEYSxFQUFFLENBQUMseUJBQXlCLEVBQUUsWUFBSztJQUNqQyxJQUFBQyxJQUFBLEdBQXdCLElBQUE3QixjQUFBLENBQUE4QixNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUMvQixZQUFBLENBQUFnQyxVQUFVLEVBQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUFLaEMsU0FBUyxDQUFDLENBQUcsQ0FBQztNQUFyRGlDLFdBQVcsR0FBQVAsSUFBQSxDQUFYTyxXQUFXO0lBQ25CLElBQU1DLElBQUksR0FBR0QsV0FBVyxDQUFDLGFBQWEsQ0FBQztJQUN2Q0UsTUFBTSxDQUFDRCxJQUFJLENBQUMsQ0FBQ0UsV0FBVyxFQUFFO0VBQzVCLENBQUMsQ0FBQztBQWVKLENBQUMsQ0FBQyJ9