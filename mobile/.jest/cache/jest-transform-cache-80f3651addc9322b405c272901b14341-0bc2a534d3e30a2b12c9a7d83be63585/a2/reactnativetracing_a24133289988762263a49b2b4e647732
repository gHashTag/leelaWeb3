e1ca7542b63aa3a614fb568e065970c0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNativeTracing = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _tslib = require("tslib");
var _browser = require("@sentry/browser");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var _measurements = require("../measurements");
var _wrapper = require("../wrapper");
var _nativeframes = require("./nativeframes");
var _ops = require("./ops");
var _stalltracking = require("./stalltracking");
var _transaction = require("./transaction");
var _utils2 = require("./utils");
var defaultReactNativeTracingOptions = Object.assign(Object.assign({}, _browser.defaultRequestInstrumentationOptions), {
  idleTimeout: 1000,
  maxTransactionDuration: 600,
  idleTimeoutMs: 1000,
  finalTimeoutMs: 600000,
  ignoreEmptyBackNavigationTransactions: true,
  beforeNavigate: function beforeNavigate(context) {
    return context;
  },
  enableAppStartTracking: true,
  enableNativeFramesTracking: true,
  enableStallTracking: true,
  enableUserInteractionTracing: false
});
var ReactNativeTracing = function () {
  function ReactNativeTracing() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, ReactNativeTracing);
    var _a, _b, _c, _d;
    this.name = ReactNativeTracing.id;
    this.useAppStartWithProfiler = false;
    this.options = Object.assign(Object.assign(Object.assign({}, defaultReactNativeTracingOptions), options), {
      finalTimeoutMs: (_b = (_a = options.finalTimeoutMs) !== null && _a !== void 0 ? _a : typeof options.maxTransactionDuration === 'number' ? options.maxTransactionDuration * 1000 : undefined) !== null && _b !== void 0 ? _b : defaultReactNativeTracingOptions.finalTimeoutMs,
      idleTimeoutMs: (_d = (_c = options.idleTimeoutMs) !== null && _c !== void 0 ? _c : options.idleTimeout) !== null && _d !== void 0 ? _d : defaultReactNativeTracingOptions.idleTimeoutMs
    });
  }
  (0, _createClass2.default)(ReactNativeTracing, [{
    key: "setupOnce",
    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {
      var _this$options = this.options,
        traceFetch = _this$options.traceFetch,
        traceXHR = _this$options.traceXHR,
        tracingOrigins = _this$options.tracingOrigins,
        shouldCreateSpanForRequest = _this$options.shouldCreateSpanForRequest,
        tracePropagationTargets = _this$options.tracePropagationTargets,
        routingInstrumentation = _this$options.routingInstrumentation,
        enableAppStartTracking = _this$options.enableAppStartTracking,
        enableNativeFramesTracking = _this$options.enableNativeFramesTracking,
        enableStallTracking = _this$options.enableStallTracking;
      this._getCurrentHub = getCurrentHub;
      if (enableAppStartTracking) {
        void this._instrumentAppStart();
      }
      if (enableNativeFramesTracking) {
        _wrapper.NATIVE.enableNativeFramesTracking();
        this.nativeFramesInstrumentation = new _nativeframes.NativeFramesInstrumentation(addGlobalEventProcessor, function () {
          var self = getCurrentHub().getIntegration(ReactNativeTracing);
          if (self) {
            return !!self.nativeFramesInstrumentation;
          }
          return false;
        });
      } else {
        _wrapper.NATIVE.disableNativeFramesTracking();
      }
      if (enableStallTracking) {
        this.stallTrackingInstrumentation = new _stalltracking.StallTrackingInstrumentation();
      }
      if (routingInstrumentation) {
        routingInstrumentation.registerRoutingInstrumentation(this._onRouteWillChange.bind(this), this.options.beforeNavigate, this._onConfirmRoute.bind(this));
      } else {
        _utils.logger.log('[ReactNativeTracing] Not instrumenting route changes as routingInstrumentation has not been set.');
      }
      (0, _browser.instrumentOutgoingRequests)({
        traceFetch: traceFetch,
        traceXHR: traceXHR,
        tracingOrigins: tracingOrigins,
        shouldCreateSpanForRequest: shouldCreateSpanForRequest,
        tracePropagationTargets: tracePropagationTargets
      });
    }
  }, {
    key: "onTransactionStart",
    value: function onTransactionStart(transaction) {
      var _a, _b;
      if ((0, _utils2.isNearToNow)(transaction.startTimestamp)) {
        (_a = this.nativeFramesInstrumentation) === null || _a === void 0 ? void 0 : _a.onTransactionStart(transaction);
        (_b = this.stallTrackingInstrumentation) === null || _b === void 0 ? void 0 : _b.onTransactionStart(transaction);
      }
    }
  }, {
    key: "onTransactionFinish",
    value: function onTransactionFinish(transaction, endTimestamp) {
      var _a, _b;
      (_a = this.nativeFramesInstrumentation) === null || _a === void 0 ? void 0 : _a.onTransactionFinish(transaction);
      (_b = this.stallTrackingInstrumentation) === null || _b === void 0 ? void 0 : _b.onTransactionFinish(transaction, endTimestamp);
    }
  }, {
    key: "onAppStartFinish",
    value: function onAppStartFinish(endTimestamp) {
      this._appStartFinishTimestamp = endTimestamp;
    }
  }, {
    key: "startUserInteractionTransaction",
    value: function startUserInteractionTransaction(userInteractionId) {
      var _this = this;
      var _a, _b;
      var elementId = userInteractionId.elementId,
        op = userInteractionId.op;
      if (!this.options.enableUserInteractionTracing) {
        _utils.logger.log('[ReactNativeTracing] User Interaction Tracing is disabled.');
        return;
      }
      if (!this.options.routingInstrumentation) {
        _utils.logger.error('[ReactNativeTracing] User Interaction Tracing is not working because no routing instrumentation is set.');
        return;
      }
      if (!elementId) {
        _utils.logger.log('[ReactNativeTracing] User Interaction Tracing can not create transaction with undefined elementId.');
        return;
      }
      if (!this._currentRoute) {
        _utils.logger.log('[ReactNativeTracing] User Interaction Tracing can not create transaction without a current route.');
        return;
      }
      var hub = ((_a = this._getCurrentHub) === null || _a === void 0 ? void 0 : _a.call(this)) || (0, _core.getCurrentHub)();
      var activeTransaction = (0, _core.getActiveTransaction)(hub);
      var activeTransactionIsNotInteraction = (activeTransaction === null || activeTransaction === void 0 ? void 0 : activeTransaction.spanId) !== ((_b = this._inflightInteractionTransaction) === null || _b === void 0 ? void 0 : _b.spanId);
      if (activeTransaction && activeTransactionIsNotInteraction) {
        _utils.logger.warn(`[ReactNativeTracing] Did not create ${op} transaction because active transaction ${activeTransaction.name} exists on the scope.`);
        return;
      }
      var _this$options2 = this.options,
        idleTimeoutMs = _this$options2.idleTimeoutMs,
        finalTimeoutMs = _this$options2.finalTimeoutMs;
      if (this._inflightInteractionTransaction) {
        this._inflightInteractionTransaction.cancelIdleTimeout(undefined, {
          restartOnChildSpanChange: false
        });
        this._inflightInteractionTransaction = undefined;
      }
      var name = `${this._currentRoute}.${elementId}`;
      var context = {
        name: name,
        op: op,
        trimEnd: true
      };
      this._inflightInteractionTransaction = (0, _core.startIdleTransaction)(hub, context, idleTimeoutMs, finalTimeoutMs, true);
      this._inflightInteractionTransaction.registerBeforeFinishCallback(function (transaction) {
        _this._inflightInteractionTransaction = undefined;
        _this.onTransactionFinish(transaction);
      });
      this._inflightInteractionTransaction.registerBeforeFinishCallback(_transaction.onlySampleIfChildSpans);
      this.onTransactionStart(this._inflightInteractionTransaction);
      _utils.logger.log(`[ReactNativeTracing] User Interaction Tracing Created ${op} transaction ${name}.`);
      return this._inflightInteractionTransaction;
    }
  }, {
    key: "_instrumentAppStart",
    value: function _instrumentAppStart() {
      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
        if (!this.options.enableAppStartTracking || !_wrapper.NATIVE.enableNative) {
          return;
        }
        var appStart = yield _wrapper.NATIVE.fetchNativeAppStart();
        if (!appStart || appStart.didFetchAppStart) {
          return;
        }
        if (!this.useAppStartWithProfiler) {
          this._appStartFinishTimestamp = (0, _utils2.getTimeOriginMilliseconds)() / 1000;
        }
        if (this.options.routingInstrumentation) {
          this._awaitingAppStartData = appStart;
        } else {
          var appStartTimeSeconds = appStart.appStartTime / 1000;
          var idleTransaction = this._createRouteTransaction({
            name: 'App Start',
            op: _ops.UI_LOAD,
            startTimestamp: appStartTimeSeconds
          });
          if (idleTransaction) {
            this._addAppStartData(idleTransaction, appStart);
          }
        }
      });
    }
  }, {
    key: "_addAppStartData",
    value: function _addAppStartData(transaction, appStart) {
      if (!this._appStartFinishTimestamp) {
        _utils.logger.warn('App start was never finished.');
        return;
      }
      var appStartTimeSeconds = appStart.appStartTime / 1000;
      var op = appStart.isColdStart ? _ops.APP_START_COLD : _ops.APP_START_WARM;
      transaction.startChild({
        description: appStart.isColdStart ? 'Cold App Start' : 'Warm App Start',
        op: op,
        startTimestamp: appStartTimeSeconds,
        endTimestamp: this._appStartFinishTimestamp
      });
      var appStartDurationMilliseconds = this._appStartFinishTimestamp * 1000 - appStart.appStartTime;
      if (appStartDurationMilliseconds >= ReactNativeTracing._maxAppStart) {
        return;
      }
      var measurement = appStart.isColdStart ? _measurements.APP_START_COLD : _measurements.APP_START_WARM;
      transaction.setMeasurement(measurement, appStartDurationMilliseconds, 'millisecond');
    }
  }, {
    key: "_onRouteWillChange",
    value: function _onRouteWillChange(context) {
      return this._createRouteTransaction(context);
    }
  }, {
    key: "_onConfirmRoute",
    value: function _onConfirmRoute(context) {
      var _a, _b, _c;
      this._currentRoute = (_b = (_a = context.data) === null || _a === void 0 ? void 0 : _a.route) === null || _b === void 0 ? void 0 : _b.name;
      (_c = this._getCurrentHub) === null || _c === void 0 ? void 0 : _c.call(this).configureScope(function (scope) {
        var _a;
        if (context.data) {
          var contextData = context.data;
          scope.addBreadcrumb({
            category: 'navigation',
            type: 'navigation',
            message: `Navigation to ${context.name}`,
            data: {
              from: (_a = contextData.previousRoute) === null || _a === void 0 ? void 0 : _a.name,
              to: contextData.route.name
            }
          });
        }
        scope.setTag('routing.route.name', context.name);
      });
    }
  }, {
    key: "_createRouteTransaction",
    value: function _createRouteTransaction(context) {
      var _this2 = this;
      if (!this._getCurrentHub) {
        _utils.logger.warn(`[ReactNativeTracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);
        return undefined;
      }
      if (this._inflightInteractionTransaction) {
        _utils.logger.log(`[ReactNativeTracing] Canceling ${this._inflightInteractionTransaction.op} transaction because navigation ${context.op}.`);
        this._inflightInteractionTransaction.setStatus('cancelled');
        this._inflightInteractionTransaction.finish();
      }
      var _this$options3 = this.options,
        idleTimeoutMs = _this$options3.idleTimeoutMs,
        finalTimeoutMs = _this$options3.finalTimeoutMs;
      var expandedContext = Object.assign(Object.assign({}, context), {
        trimEnd: true
      });
      var hub = this._getCurrentHub();
      var idleTransaction = (0, _core.startIdleTransaction)(hub, expandedContext, idleTimeoutMs, finalTimeoutMs, true);
      this.onTransactionStart(idleTransaction);
      _utils.logger.log(`[ReactNativeTracing] Starting ${context.op} transaction "${context.name}" on scope`);
      idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {
        _this2.onTransactionFinish(transaction, endTimestamp);
      });
      idleTransaction.registerBeforeFinishCallback(function (transaction) {
        if (_this2.options.enableAppStartTracking && _this2._awaitingAppStartData) {
          transaction.startTimestamp = _this2._awaitingAppStartData.appStartTime / 1000;
          transaction.op = 'ui.load';
          _this2._addAppStartData(transaction, _this2._awaitingAppStartData);
          _this2._awaitingAppStartData = undefined;
        }
      });
      idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {
        (0, _utils2.adjustTransactionDuration)(finalTimeoutMs, transaction, endTimestamp);
      });
      if (this.options.ignoreEmptyBackNavigationTransactions) {
        idleTransaction.registerBeforeFinishCallback(function (transaction) {
          var _a, _b;
          if (((_b = (_a = transaction.data) === null || _a === void 0 ? void 0 : _a.route) === null || _b === void 0 ? void 0 : _b.hasBeenSeen) && (!transaction.spanRecorder || transaction.spanRecorder.spans.filter(function (span) {
            return span.spanId !== transaction.spanId;
          }).length === 0)) {
            _utils.logger.log('[ReactNativeTracing] Not sampling transaction as route has been seen before. Pass ignoreEmptyBackNavigationTransactions = false to disable this feature.');
            transaction.sampled = false;
          }
        });
      }
      return idleTransaction;
    }
  }]);
  return ReactNativeTracing;
}();
exports.ReactNativeTracing = ReactNativeTracing;
ReactNativeTracing.id = 'ReactNativeTracing';
ReactNativeTracing._maxAppStart = 60000;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,