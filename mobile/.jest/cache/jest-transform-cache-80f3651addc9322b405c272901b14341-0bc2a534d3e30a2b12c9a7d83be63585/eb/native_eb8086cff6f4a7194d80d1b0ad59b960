3c1d46ba543abde7c0dec6e774b5f02c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeTransport = exports.DEFAULT_BUFFER_SIZE = void 0;
exports.makeNativeTransport = makeNativeTransport;
exports.makeNativeTransportFactory = makeNativeTransportFactory;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _utils = require("@sentry/utils");
var _wrapper = require("../wrapper");
var DEFAULT_BUFFER_SIZE = 30;
exports.DEFAULT_BUFFER_SIZE = DEFAULT_BUFFER_SIZE;
var NativeTransport = function () {
  function NativeTransport() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, NativeTransport);
    this._buffer = (0, _utils.makePromiseBuffer)(options.bufferSize || DEFAULT_BUFFER_SIZE);
  }
  (0, _createClass2.default)(NativeTransport, [{
    key: "send",
    value: function send(envelope) {
      return this._buffer.add(function () {
        return _wrapper.NATIVE.sendEnvelope(envelope);
      });
    }
  }, {
    key: "flush",
    value: function flush(timeout) {
      return this._buffer.drain(timeout);
    }
  }]);
  return NativeTransport;
}();
exports.NativeTransport = NativeTransport;
function makeNativeTransport() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return new NativeTransport(options);
}
function makeNativeTransportFactory(_ref) {
  var enableNative = _ref.enableNative;
  if (enableNative && _wrapper.NATIVE.isNativeAvailable()) {
    return makeNativeTransport;
  }
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbHMiLCJyZXF1aXJlIiwiX3dyYXBwZXIiLCJERUZBVUxUX0JVRkZFUl9TSVpFIiwiZXhwb3J0cyIsIk5hdGl2ZVRyYW5zcG9ydCIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfY2xhc3NDYWxsQ2hlY2syIiwiZGVmYXVsdCIsIl9idWZmZXIiLCJtYWtlUHJvbWlzZUJ1ZmZlciIsImJ1ZmZlclNpemUiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJzZW5kIiwiZW52ZWxvcGUiLCJhZGQiLCJOQVRJVkUiLCJzZW5kRW52ZWxvcGUiLCJmbHVzaCIsInRpbWVvdXQiLCJkcmFpbiIsIm1ha2VOYXRpdmVUcmFuc3BvcnQiLCJtYWtlTmF0aXZlVHJhbnNwb3J0RmFjdG9yeSIsIl9yZWYiLCJlbmFibGVOYXRpdmUiLCJpc05hdGl2ZUF2YWlsYWJsZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy90cmFuc3BvcnRzL25hdGl2ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJhc2VUcmFuc3BvcnRPcHRpb25zLCBFbnZlbG9wZSwgVHJhbnNwb3J0IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFByb21pc2VCdWZmZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IG1ha2VQcm9taXNlQnVmZmVyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB7IE5BVElWRSB9IGZyb20gJy4uL3dyYXBwZXInO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9CVUZGRVJfU0laRSA9IDMwO1xuXG5leHBvcnQgdHlwZSBCYXNlTmF0aXZlVHJhbnNwb3J0ID0gQmFzZVRyYW5zcG9ydE9wdGlvbnM7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZU5hdGl2ZVRyYW5zcG9ydE9wdGlvbnMge1xuICBidWZmZXJTaXplPzogbnVtYmVyO1xufVxuXG4vKiogTmF0aXZlIFRyYW5zcG9ydCBjbGFzcyBpbXBsZW1lbnRhdGlvbiAqL1xuZXhwb3J0IGNsYXNzIE5hdGl2ZVRyYW5zcG9ydCBpbXBsZW1lbnRzIFRyYW5zcG9ydCB7XG4gIC8qKiBBIHNpbXBsZSBidWZmZXIgaG9sZGluZyBhbGwgcmVxdWVzdHMuICovXG4gIHByb3RlY3RlZCByZWFkb25seSBfYnVmZmVyOiBQcm9taXNlQnVmZmVyPHZvaWQ+O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiBCYXNlTmF0aXZlVHJhbnNwb3J0T3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5fYnVmZmVyID0gbWFrZVByb21pc2VCdWZmZXIob3B0aW9ucy5idWZmZXJTaXplIHx8IERFRkFVTFRfQlVGRkVSX1NJWkUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIHRoZSBlbnZlbG9wZSB0byB0aGUgU3RvcmUgZW5kcG9pbnQgaW4gU2VudHJ5LlxuICAgKlxuICAgKiBAcGFyYW0gZW52ZWxvcGUgRW52ZWxvcGUgdGhhdCBzaG91bGQgYmUgc2VudCB0byBTZW50cnkuXG4gICAqL1xuICBwdWJsaWMgc2VuZChlbnZlbG9wZTogRW52ZWxvcGUpOiBQcm9taXNlTGlrZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5hZGQoKCkgPT4gTkFUSVZFLnNlbmRFbnZlbG9wZShlbnZlbG9wZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhaXQgZm9yIGFsbCBlbnZlbG9wZXMgdG8gYmUgc2VudCBvciB0aGUgdGltZW91dCB0byBleHBpcmUsIHdoaWNoZXZlciBjb21lcyBmaXJzdC5cbiAgICpcbiAgICogQHBhcmFtIHRpbWVvdXQgTWF4aW11bSB0aW1lIGluIG1zIHRoZSB0cmFuc3BvcnQgc2hvdWxkIHdhaXQgZm9yIGVudmVsb3BlcyB0byBiZSBmbHVzaGVkLiBPbWl0dGluZyB0aGlzIHBhcmFtZXRlciB3aWxsXG4gICAqICAgY2F1c2UgdGhlIHRyYW5zcG9ydCB0byB3YWl0IHVudGlsIGFsbCBldmVudHMgYXJlIHNlbnQgYmVmb3JlIHJlc29sdmluZyB0aGUgcHJvbWlzZS5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHdpdGggYHRydWVgIGlmIGFsbCBldmVudHMgYXJlIHNlbnQgYmVmb3JlIHRoZSB0aW1lb3V0LCBvciBgZmFsc2VgIGlmIHRoZXJlIGFyZVxuICAgKiBzdGlsbCBldmVudHMgaW4gdGhlIHF1ZXVlIHdoZW4gdGhlIHRpbWVvdXQgaXMgcmVhY2hlZC5cbiAgICovXG4gIHB1YmxpYyBmbHVzaCh0aW1lb3V0PzogbnVtYmVyKTogUHJvbWlzZUxpa2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXIuZHJhaW4odGltZW91dCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgTmF0aXZlIFRyYW5zcG9ydC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VOYXRpdmVUcmFuc3BvcnQob3B0aW9uczogQmFzZU5hdGl2ZVRyYW5zcG9ydE9wdGlvbnMgPSB7fSk6IE5hdGl2ZVRyYW5zcG9ydCB7XG4gIHJldHVybiBuZXcgTmF0aXZlVHJhbnNwb3J0KG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBOYXRpdmUgVHJhbnNwb3J0IGZhY3RvcnkgaWYgdGhlIG5hdGl2ZSB0cmFuc3BvcnQgaXMgYXZhaWxhYmxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZU5hdGl2ZVRyYW5zcG9ydEZhY3Rvcnkoe1xuICBlbmFibGVOYXRpdmUsXG59OiB7XG4gIGVuYWJsZU5hdGl2ZT86IGJvb2xlYW47XG59KTogdHlwZW9mIG1ha2VOYXRpdmVUcmFuc3BvcnQgfCBudWxsIHtcbiAgaWYgKGVuYWJsZU5hdGl2ZSAmJiBOQVRJVkUuaXNOYXRpdmVBdmFpbGFibGUoKSkge1xuICAgIHJldHVybiBtYWtlTmF0aXZlVHJhbnNwb3J0O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFFTyxJQUFNRSxtQkFBbUIsR0FBRyxFQUFFO0FBQUNDLE9BQUEsQ0FBQUQsbUJBQUEsR0FBQUEsbUJBQUE7QUFBQSxJQVN6QkUsZUFBZTtFQUkxQixTQUFBQSxnQkFBQSxFQUEyRDtJQUFBLElBQXhDQyxPQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFzQyxFQUFFO0lBQUEsSUFBQUcsZ0JBQUEsQ0FBQUMsT0FBQSxRQUFBTixlQUFBO0lBQ3pELElBQUksQ0FBQ08sT0FBTyxHQUFHLElBQUFDLHdCQUFpQixFQUFDUCxPQUFPLENBQUNRLFVBQVUsSUFBSVgsbUJBQW1CLENBQUM7RUFDN0U7RUFBQyxJQUFBWSxhQUFBLENBQUFKLE9BQUEsRUFBQU4sZUFBQTtJQUFBVyxHQUFBO0lBQUFDLEtBQUEsRUFPTSxTQUFBQyxLQUFLQyxRQUFrQjtNQUM1QixPQUFPLElBQUksQ0FBQ1AsT0FBTyxDQUFDUSxHQUFHLENBQUM7UUFBQSxPQUFNQyxlQUFNLENBQUNDLFlBQVksQ0FBQ0gsUUFBUSxDQUFDO01BQUEsRUFBQztJQUM5RDtFQUFDO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQVVNLFNBQUFNLE1BQU1DLE9BQWdCO01BQzNCLE9BQU8sSUFBSSxDQUFDWixPQUFPLENBQUNhLEtBQUssQ0FBQ0QsT0FBTyxDQUFDO0lBQ3BDO0VBQUM7RUFBQSxPQUFBbkIsZUFBQTtBQUFBO0FBQUFELE9BQUEsQ0FBQUMsZUFBQSxHQUFBQSxlQUFBO0FBTUcsU0FBVXFCLG1CQUFtQkEsQ0FBQSxFQUF5QztFQUFBLElBQXhDcEIsT0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBc0MsRUFBRTtFQUMxRSxPQUFPLElBQUlGLGVBQWUsQ0FBQ0MsT0FBTyxDQUFDO0FBQ3JDO0FBS00sU0FBVXFCLDBCQUEwQkEsQ0FBQUMsSUFBQSxFQUl6QztFQUFBLElBSENDLFlBQVksR0FBQUQsSUFBQSxDQUFaQyxZQUFZO0VBSVosSUFBSUEsWUFBWSxJQUFJUixlQUFNLENBQUNTLGlCQUFpQixFQUFFLEVBQUU7SUFDOUMsT0FBT0osbUJBQW1COztFQUU1QixPQUFPLElBQUk7QUFDYiJ9