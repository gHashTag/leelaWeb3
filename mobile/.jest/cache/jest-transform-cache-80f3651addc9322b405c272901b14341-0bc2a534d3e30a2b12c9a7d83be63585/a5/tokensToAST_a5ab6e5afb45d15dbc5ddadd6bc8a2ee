e9c13242e157f56a4bb2a003222b198c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = tokensToAST;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _getUniqueID = _interopRequireDefault(require("./getUniqueID"));
var _getTokenTypeByToken = _interopRequireDefault(require("./getTokenTypeByToken"));
function createNode(token, tokenIndex) {
  var type = (0, _getTokenTypeByToken.default)(token);
  var content = token.content;
  var attributes = {};
  if (token.attrs) {
    attributes = token.attrs.reduce(function (prev, curr) {
      var _curr = (0, _slicedToArray2.default)(curr, 2),
        name = _curr[0],
        value = _curr[1];
      return Object.assign({}, prev, (0, _defineProperty2.default)({}, name, value));
    }, {});
  }
  return {
    type: type,
    sourceType: token.type,
    sourceInfo: token.info,
    sourceMeta: token.meta,
    block: token.block,
    markup: token.markup,
    key: (0, _getUniqueID.default)() + '_' + type,
    content: content,
    tokenIndex: tokenIndex,
    index: 0,
    attributes: attributes,
    children: tokensToAST(token.children)
  };
}
function tokensToAST(tokens) {
  var stack = [];
  var children = [];
  if (!tokens || tokens.length === 0) {
    return [];
  }
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    var astNode = createNode(token, i);
    if (!(astNode.type === 'text' && astNode.children.length === 0 && astNode.content === '')) {
      astNode.index = children.length;
      if (token.nesting === 1) {
        children.push(astNode);
        stack.push(children);
        children = astNode.children;
      } else if (token.nesting === -1) {
        children = stack.pop();
      } else if (token.nesting === 0) {
        children.push(astNode);
      }
    }
  }
  return children;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0VW5pcXVlSUQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nZXRUb2tlblR5cGVCeVRva2VuIiwiY3JlYXRlTm9kZSIsInRva2VuIiwidG9rZW5JbmRleCIsInR5cGUiLCJnZXRUb2tlblR5cGVCeVRva2VuIiwiY29udGVudCIsImF0dHJpYnV0ZXMiLCJhdHRycyIsInJlZHVjZSIsInByZXYiLCJjdXJyIiwiX2N1cnIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwibmFtZSIsInZhbHVlIiwiT2JqZWN0IiwiYXNzaWduIiwiX2RlZmluZVByb3BlcnR5MiIsInNvdXJjZVR5cGUiLCJzb3VyY2VJbmZvIiwiaW5mbyIsInNvdXJjZU1ldGEiLCJtZXRhIiwiYmxvY2siLCJtYXJrdXAiLCJrZXkiLCJnZXRVbmlxdWVJRCIsImluZGV4IiwiY2hpbGRyZW4iLCJ0b2tlbnNUb0FTVCIsInRva2VucyIsInN0YWNrIiwibGVuZ3RoIiwiaSIsImFzdE5vZGUiLCJuZXN0aW5nIiwicHVzaCIsInBvcCJdLCJzb3VyY2VzIjpbInRva2Vuc1RvQVNULmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRVbmlxdWVJRCBmcm9tICcuL2dldFVuaXF1ZUlEJztcbmltcG9ydCBnZXRUb2tlblR5cGVCeVRva2VuIGZyb20gJy4vZ2V0VG9rZW5UeXBlQnlUb2tlbic7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7e3R5cGU6IHN0cmluZywgdGFnOnN0cmluZywgY29udGVudDogc3RyaW5nLCBjaGlsZHJlbjogKiwgYXR0cnM6IEFycmF5LCBtZXRhLCBpbmZvLCBibG9jazogYm9vbGVhbn19IHRva2VuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9rZW5JbmRleFxuICogQHJldHVybiB7e3R5cGU6IHN0cmluZywgY29udGVudCwgdG9rZW5JbmRleDogKiwgaW5kZXg6IG51bWJlciwgYXR0cmlidXRlczoge30sIGNoaWxkcmVuOiAqfX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTm9kZSh0b2tlbiwgdG9rZW5JbmRleCkge1xuICBjb25zdCB0eXBlID0gZ2V0VG9rZW5UeXBlQnlUb2tlbih0b2tlbik7XG4gIGNvbnN0IGNvbnRlbnQgPSB0b2tlbi5jb250ZW50O1xuXG4gIGxldCBhdHRyaWJ1dGVzID0ge307XG5cbiAgaWYgKHRva2VuLmF0dHJzKSB7XG4gICAgYXR0cmlidXRlcyA9IHRva2VuLmF0dHJzLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgICAgY29uc3QgW25hbWUsIHZhbHVlXSA9IGN1cnI7XG4gICAgICByZXR1cm4gey4uLnByZXYsIFtuYW1lXTogdmFsdWV9O1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICBzb3VyY2VUeXBlOiB0b2tlbi50eXBlLFxuICAgIHNvdXJjZUluZm86IHRva2VuLmluZm8sXG4gICAgc291cmNlTWV0YTogdG9rZW4ubWV0YSxcbiAgICBibG9jazogdG9rZW4uYmxvY2ssXG4gICAgbWFya3VwOiB0b2tlbi5tYXJrdXAsXG4gICAga2V5OiBnZXRVbmlxdWVJRCgpICsgJ18nICsgdHlwZSxcbiAgICBjb250ZW50LFxuICAgIHRva2VuSW5kZXgsXG4gICAgaW5kZXg6IDAsXG4gICAgYXR0cmlidXRlcyxcbiAgICBjaGlsZHJlbjogdG9rZW5zVG9BU1QodG9rZW4uY2hpbGRyZW4pLFxuICB9O1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0FycmF5PHt0eXBlOiBzdHJpbmcsIHRhZzpzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZywgY2hpbGRyZW46ICosIGF0dHJzOiBBcnJheX0+fXRva2Vuc1xuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRva2Vuc1RvQVNUKHRva2Vucykge1xuICBsZXQgc3RhY2sgPSBbXTtcbiAgbGV0IGNoaWxkcmVuID0gW107XG5cbiAgaWYgKCF0b2tlbnMgfHwgdG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgY29uc3QgYXN0Tm9kZSA9IGNyZWF0ZU5vZGUodG9rZW4sIGkpO1xuXG4gICAgaWYgKFxuICAgICAgIShcbiAgICAgICAgYXN0Tm9kZS50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgYXN0Tm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgYXN0Tm9kZS5jb250ZW50ID09PSAnJ1xuICAgICAgKVxuICAgICkge1xuICAgICAgYXN0Tm9kZS5pbmRleCA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgICAgaWYgKHRva2VuLm5lc3RpbmcgPT09IDEpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChhc3ROb2RlKTtcbiAgICAgICAgc3RhY2sucHVzaChjaGlsZHJlbik7XG4gICAgICAgIGNoaWxkcmVuID0gYXN0Tm9kZS5jaGlsZHJlbjtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4ubmVzdGluZyA9PT0gLTEpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBzdGFjay5wb3AoKTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4ubmVzdGluZyA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGFzdE5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjaGlsZHJlbjtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFlBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLG9CQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFRQSxTQUFTRSxVQUFVQSxDQUFDQyxLQUFLLEVBQUVDLFVBQVUsRUFBRTtFQUNyQyxJQUFNQyxJQUFJLEdBQUcsSUFBQUMsNEJBQW1CLEVBQUNILEtBQUssQ0FBQztFQUN2QyxJQUFNSSxPQUFPLEdBQUdKLEtBQUssQ0FBQ0ksT0FBTztFQUU3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