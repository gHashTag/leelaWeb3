121f954b81848a39d30148d9690c7705
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AstRenderer", {
  enumerable: true,
  get: function get() {
    return _AstRenderer.default;
  }
});
Object.defineProperty(exports, "FitImage", {
  enumerable: true,
  get: function get() {
    return _reactNativeFitImage.default;
  }
});
Object.defineProperty(exports, "MarkdownIt", {
  enumerable: true,
  get: function get() {
    return _markdownIt.default;
  }
});
exports.default = void 0;
Object.defineProperty(exports, "getUniqueID", {
  enumerable: true,
  get: function get() {
    return _getUniqueID.default;
  }
});
Object.defineProperty(exports, "hasParents", {
  enumerable: true,
  get: function get() {
    return _hasParents.default;
  }
});
Object.defineProperty(exports, "openUrl", {
  enumerable: true,
  get: function get() {
    return _openUrl.default;
  }
});
Object.defineProperty(exports, "parser", {
  enumerable: true,
  get: function get() {
    return _parser.default;
  }
});
Object.defineProperty(exports, "removeTextStyleProps", {
  enumerable: true,
  get: function get() {
    return _removeTextStyleProps.default;
  }
});
Object.defineProperty(exports, "renderRules", {
  enumerable: true,
  get: function get() {
    return _renderRules.default;
  }
});
Object.defineProperty(exports, "stringToTokens", {
  enumerable: true,
  get: function get() {
    return _stringToTokens.stringToTokens;
  }
});
Object.defineProperty(exports, "styles", {
  enumerable: true,
  get: function get() {
    return _styles.styles;
  }
});
Object.defineProperty(exports, "textStyleProps", {
  enumerable: true,
  get: function get() {
    return _textStyleProps.default;
  }
});
Object.defineProperty(exports, "tokensToAST", {
  enumerable: true,
  get: function get() {
    return _tokensToAST.default;
  }
});
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _parser = _interopRequireDefault(require("./lib/parser"));
var _getUniqueID = _interopRequireDefault(require("./lib/util/getUniqueID"));
var _hasParents = _interopRequireDefault(require("./lib/util/hasParents"));
var _openUrl = _interopRequireDefault(require("./lib/util/openUrl"));
var _tokensToAST = _interopRequireDefault(require("./lib/util/tokensToAST"));
var _renderRules = _interopRequireDefault(require("./lib/renderRules"));
var _AstRenderer = _interopRequireDefault(require("./lib/AstRenderer"));
var _markdownIt = _interopRequireDefault(require("markdown-it"));
var _removeTextStyleProps = _interopRequireDefault(require("./lib/util/removeTextStyleProps"));
var _styles = require("./lib/styles");
var _stringToTokens = require("./lib/util/stringToTokens");
var _reactNativeFitImage = _interopRequireDefault(require("react-native-fit-image"));
var _textStyleProps = _interopRequireDefault(require("./lib/data/textStyleProps"));
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/node_modules/react-native-markdown-display/src/index.js";
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var getStyle = function getStyle(mergeStyle, style) {
  var useStyles = {};
  if (mergeStyle === true && style !== null) {
    Object.keys(style).forEach(function (value) {
      useStyles[value] = Object.assign({}, _reactNative.StyleSheet.flatten(style[value]));
    });
    Object.keys(_styles.styles).forEach(function (value) {
      useStyles[value] = Object.assign({}, _styles.styles[value], _reactNative.StyleSheet.flatten(style[value]));
    });
  } else {
    useStyles = Object.assign({}, _styles.styles);
    if (style !== null) {
      Object.keys(style).forEach(function (value) {
        useStyles[value] = Object.assign({}, _reactNative.StyleSheet.flatten(style[value]));
      });
    }
  }
  Object.keys(useStyles).forEach(function (value) {
    useStyles['_VIEW_SAFE_' + value] = (0, _removeTextStyleProps.default)(useStyles[value]);
  });
  return _reactNative.StyleSheet.create(useStyles);
};
var getRenderer = function getRenderer(renderer, rules, style, mergeStyle, onLinkPress, maxTopLevelChildren, topLevelMaxExceededItem, allowedImageHandlers, defaultImageHandler, debugPrintTree) {
  if (renderer && rules) {
    console.warn('react-native-markdown-display you are using renderer and rules at the same time. This is not possible, props.rules is ignored');
  }
  if (renderer && style) {
    console.warn('react-native-markdown-display you are using renderer and style at the same time. This is not possible, props.style is ignored');
  }
  if (renderer) {
    if (!(typeof renderer === 'function') || renderer instanceof _AstRenderer.default) {
      return renderer;
    } else {
      throw new Error('Provided renderer is not compatible with function or AstRenderer. please change');
    }
  } else {
    var useStyles = getStyle(mergeStyle, style);
    return new _AstRenderer.default(Object.assign({}, _renderRules.default, rules || {}), useStyles, onLinkPress, maxTopLevelChildren, topLevelMaxExceededItem, allowedImageHandlers, defaultImageHandler, debugPrintTree);
  }
};
var Markdown = _react.default.memo(function (_ref) {
  var children = _ref.children,
    _ref$renderer = _ref.renderer,
    renderer = _ref$renderer === void 0 ? null : _ref$renderer,
    _ref$rules = _ref.rules,
    rules = _ref$rules === void 0 ? null : _ref$rules,
    _ref$style = _ref.style,
    style = _ref$style === void 0 ? null : _ref$style,
    _ref$mergeStyle = _ref.mergeStyle,
    mergeStyle = _ref$mergeStyle === void 0 ? true : _ref$mergeStyle,
    _ref$markdownit = _ref.markdownit,
    markdownit = _ref$markdownit === void 0 ? (0, _markdownIt.default)({
      typographer: true
    }) : _ref$markdownit,
    onLinkPress = _ref.onLinkPress,
    _ref$maxTopLevelChild = _ref.maxTopLevelChildren,
    maxTopLevelChildren = _ref$maxTopLevelChild === void 0 ? null : _ref$maxTopLevelChild,
    _ref$topLevelMaxExcee = _ref.topLevelMaxExceededItem,
    topLevelMaxExceededItem = _ref$topLevelMaxExcee === void 0 ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
      children: "..."
    }, "dotdotdot") : _ref$topLevelMaxExcee,
    _ref$allowedImageHand = _ref.allowedImageHandlers,
    allowedImageHandlers = _ref$allowedImageHand === void 0 ? ['data:image/png;base64', 'data:image/gif;base64', 'data:image/jpeg;base64', 'https://', 'http://'] : _ref$allowedImageHand,
    _ref$defaultImageHand = _ref.defaultImageHandler,
    defaultImageHandler = _ref$defaultImageHand === void 0 ? 'https://' : _ref$defaultImageHand,
    _ref$debugPrintTree = _ref.debugPrintTree,
    debugPrintTree = _ref$debugPrintTree === void 0 ? false : _ref$debugPrintTree;
  var momoizedRenderer = (0, _react.useMemo)(function () {
    return getRenderer(renderer, rules, style, mergeStyle, onLinkPress, maxTopLevelChildren, topLevelMaxExceededItem, allowedImageHandlers, defaultImageHandler, debugPrintTree);
  }, [maxTopLevelChildren, onLinkPress, renderer, rules, style, mergeStyle, topLevelMaxExceededItem, allowedImageHandlers, defaultImageHandler, debugPrintTree]);
  var momoizedParser = (0, _react.useMemo)(function () {
    return markdownit;
  }, [markdownit]);
  return (0, _parser.default)(children, momoizedRenderer.render, momoizedParser);
});
Markdown.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.array]).isRequired,
  renderer: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.instanceOf(_AstRenderer.default)]),
  onLinkPress: _propTypes.default.func,
  maxTopLevelChildren: _propTypes.default.number,
  topLevelMaxExceededItem: _propTypes.default.any,
  rules: function rules(props, propName, componentName) {
    var invalidProps = [];
    var prop = props[propName];
    if (!prop) {
      return;
    }
    if (typeof prop === 'object') {
      invalidProps = Object.keys(prop).filter(function (key) {
        return typeof prop[key] !== 'function';
      });
    }
    if (typeof prop !== 'object') {
      return new Error(`Invalid prop \`${propName}\` supplied to \`${componentName}\`. Must be of shape {[index:string]:function} `);
    } else if (invalidProps.length > 0) {
      return new Error(`Invalid prop \`${propName}\` supplied to \`${componentName}\`. These ` + `props are not of type function \`${invalidProps.join(', ')}\` `);
    }
  },
  markdownit: _propTypes.default.instanceOf(_markdownIt.default),
  style: _propTypes.default.any,
  mergeStyle: _propTypes.default.bool,
  allowedImageHandlers: _propTypes.default.arrayOf(_propTypes.default.string),
  defaultImageHandler: _propTypes.default.string,
  debugPrintTree: _propTypes.default.bool
};
var _default = Markdown;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,