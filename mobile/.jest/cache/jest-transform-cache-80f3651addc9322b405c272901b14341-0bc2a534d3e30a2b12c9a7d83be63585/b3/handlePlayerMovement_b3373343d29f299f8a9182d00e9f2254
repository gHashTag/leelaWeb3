ec2828b8f7d6e4fce7fe5a4df6cfed42
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handlePlayerMovement = void 0;
var i18next_1 = __importDefault(require("i18next"));
var MAX_ROLL = 6;
var TOTAL_PLANS = 72;
var WIN_PLAN = 68;
var handleToMove = function handleToMove(name, updatedPlayer, newPlan, to, roll) {
  var updatedMessage = i18next_1.default.t(name, {
    currentPlayer: updatedPlayer.id,
    from: newPlan,
    to: to,
    roll: roll
  });
  return Object.assign({}, updatedPlayer, {
    message: updatedMessage,
    plan: to
  });
};
var handlePlayerMovement = function handlePlayerMovement(updatedPlayer, roll) {
  if (!updatedPlayer.isStart) {
    if (roll !== MAX_ROLL) {
      var startMessage = i18next_1.default.t('sixToBegin');
      return Object.assign({}, updatedPlayer, {
        message: startMessage
      });
    } else {
      var updatedMessage = i18next_1.default.t('moveAfterSix', {
        currentPlayer: updatedPlayer.id
      });
      return Object.assign({}, updatedPlayer, {
        plan: MAX_ROLL,
        isStart: true,
        consecutiveSixes: 1,
        message: updatedMessage
      });
    }
  }
  var newPlan = updatedPlayer.plan + roll;
  if (newPlan > TOTAL_PLANS) {
    var _updatedMessage = i18next_1.default.t('stay', {
      currentPlayer: updatedPlayer.id,
      roll: roll
    });
    return Object.assign({}, updatedPlayer, {
      message: _updatedMessage
    });
  } else if (newPlan === 12) {
    return handleToMove('snakes', updatedPlayer, newPlan, 8, roll);
  } else if (newPlan === 16) {
    return handleToMove('snakes', updatedPlayer, newPlan, 4, roll);
  } else if (newPlan === 24) {
    return handleToMove('snakes', updatedPlayer, newPlan, 7, roll);
  } else if (newPlan === 29) {
    return handleToMove('snakes', updatedPlayer, newPlan, 6, roll);
  } else if (newPlan === 44) {
    return handleToMove('snakes', updatedPlayer, newPlan, 9, roll);
  } else if (newPlan === 52) {
    return handleToMove('snakes', updatedPlayer, newPlan, 35, roll);
  } else if (newPlan === 55) {
    return handleToMove('snakes', updatedPlayer, newPlan, 3, roll);
  } else if (newPlan === 61) {
    return handleToMove('snakes', updatedPlayer, newPlan, 13, roll);
  } else if (newPlan === 63) {
    return handleToMove('snakes', updatedPlayer, newPlan, 2, roll);
  } else if (newPlan === 72) {
    return handleToMove('snakes', updatedPlayer, newPlan, 51, roll);
  } else if (newPlan === 10) {
    return handleToMove('arrows', updatedPlayer, newPlan, 23, roll);
  } else if (newPlan === 17) {
    return handleToMove('arrows', updatedPlayer, newPlan, 69, roll);
  } else if (newPlan === 20) {
    return handleToMove('arrows', updatedPlayer, newPlan, 32, roll);
  } else if (newPlan === 22) {
    return handleToMove('arrows', updatedPlayer, newPlan, 60, roll);
  } else if (newPlan === 27) {
    return handleToMove('arrows', updatedPlayer, newPlan, 41, roll);
  } else if (newPlan === 28) {
    return handleToMove('arrows', updatedPlayer, newPlan, 50, roll);
  } else if (newPlan === 37) {
    return handleToMove('arrows', updatedPlayer, newPlan, 66, roll);
  } else if (newPlan === 45) {
    return handleToMove('arrows', updatedPlayer, newPlan, 67, roll);
  } else if (newPlan === 46) {
    return handleToMove('arrows', updatedPlayer, newPlan, 62, roll);
  } else if (newPlan === 54 || newPlan === WIN_PLAN) {
    var _updatedMessage2 = i18next_1.default.t('finish', {
      currentPlayer: updatedPlayer.id
    });
    return Object.assign({}, updatedPlayer, {
      plan: newPlan,
      previousPlan: newPlan,
      isFinished: true,
      isStart: false,
      message: _updatedMessage2
    });
  } else {
    var _updatedMessage3 = i18next_1.default.t('moveMessage', {
      currentPlayer: updatedPlayer.id,
      roll: roll,
      from: updatedPlayer.plan,
      to: newPlan
    });
    return Object.assign({}, updatedPlayer, {
      plan: newPlan,
      message: _updatedMessage3
    });
  }
};
exports.handlePlayerMovement = handlePlayerMovement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,