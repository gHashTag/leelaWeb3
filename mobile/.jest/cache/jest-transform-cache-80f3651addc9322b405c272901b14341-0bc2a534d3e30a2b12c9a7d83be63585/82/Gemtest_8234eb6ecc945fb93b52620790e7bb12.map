{"file":"/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx","mappings":";;;;;AAAA,kDAAyB;AACzB,gEAA+D;AAC/D,yBAAsB;AACtB,qCAA8B;AAE9B,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACtE,MAAM,EAAC,WAAW,EAAC,GAAG,IAAA,qBAAM,EAAC,CAAC,MAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,EAAG,CAAC,CAAA;QACzE,MAAM,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,CAAA;QACzC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAK,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC,qDAAqD;IACvG,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,iEAAiE,EAAE,GAAG,EAAE;QAC3E,MAAM,EAAC,WAAW,EAAC,GAAG,IAAA,qBAAM,EAAC,CAAC,MAAG,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,EAAG,CAAC,CAAA;QAC1E,MAAM,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,CAAA;QACzC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAK,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC,qDAAqD;IACvG,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACzD,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;QAC7B,MAAM,EAAC,WAAW,EAAC,GAAG,IAAA,qBAAM,EAAC,CAAC,MAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,EAAG,CAAC,CAAA;QAC5E,MAAM,YAAY,GAAG,WAAW,CAAC,eAAe,CAAC,CAAA;QACjD,wBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;QAC7B,MAAM,CAAC,WAAW,CAAC,CAAC,gBAAgB,EAAE,CAAA;IACxC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx"],"sourcesContent":["import React from 'react'\nimport {render, fireEvent} from '@testing-library/react-native'\nimport {Gem} from './'\nimport {ICONS} from './images'\n\ndescribe('Gem Component', () => {\n  test('should render the correct image based on playerNumber prop', () => {\n    const {getByTestId} = render(<Gem playerNumber={3} onPress={() => {}} />)\n    const gemImage = getByTestId('gem-image')\n    expect(gemImage.props.source).toEqual(ICONS[2]) // Check the correct image based on playerNumber prop\n  })\n\n  test('should render the default image if playerNumber prop is invalid', () => {\n    const {getByTestId} = render(<Gem playerNumber={10} onPress={() => {}} />)\n    const gemImage = getByTestId('gem-image')\n    expect(gemImage.props.source).toEqual(ICONS[0]) // Check the default image if playerNumber is invalid\n  })\n\n  test('should call the onPress function when pressed', () => {\n    const onPressMock = jest.fn()\n    const {getByTestId} = render(<Gem playerNumber={5} onPress={onPressMock} />)\n    const gemContainer = getByTestId('gem-container')\n    fireEvent.press(gemContainer)\n    expect(onPressMock).toHaveBeenCalled()\n  })\n})\n"],"version":3}