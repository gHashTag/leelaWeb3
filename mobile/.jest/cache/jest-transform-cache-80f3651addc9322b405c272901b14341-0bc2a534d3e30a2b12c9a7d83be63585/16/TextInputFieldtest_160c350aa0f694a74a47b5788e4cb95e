bf6d76f1d1ac607e7d81ad8c22d707c9
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var TextInputField_1 = require("./TextInputField");
test('renders TextInputField correctly', function () {
  var placeholder = 'Enter text';
  var value = 'Hello, world!';
  var onBlur = jest.fn();
  var onChangeText = jest.fn();
  var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(TextInputField_1.TextInputField, {
      placeholder: placeholder,
      value: value,
      onBlur: onBlur,
      onChangeText: onChangeText
    })),
    getByPlaceholderText = _ref.getByPlaceholderText;
  var input = getByPlaceholderText(placeholder);
  expect(input).toBeDefined();
  expect(input.props.value).toBe(value);
  var newText = 'New text';
  react_native_1.fireEvent.changeText(input, newText);
  expect(onChangeText).toHaveBeenCalledWith(newText);
  (0, react_native_1.fireEvent)(input, 'blur');
  expect(onBlur).toHaveBeenCalled();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiVGV4dElucHV0RmllbGRfMSIsInRlc3QiLCJwbGFjZWhvbGRlciIsInZhbHVlIiwib25CbHVyIiwiamVzdCIsImZuIiwib25DaGFuZ2VUZXh0IiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiVGV4dElucHV0RmllbGQiLCJnZXRCeVBsYWNlaG9sZGVyVGV4dCIsImlucHV0IiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJwcm9wcyIsInRvQmUiLCJuZXdUZXh0IiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvVGV4dElucHV0RmllbGQvVGV4dElucHV0RmllbGQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuXG5pbXBvcnQgeyBUZXh0SW5wdXRGaWVsZCB9IGZyb20gJy4vVGV4dElucHV0RmllbGQnXG5cbnRlc3QoJ3JlbmRlcnMgVGV4dElucHV0RmllbGQgY29ycmVjdGx5JywgKCkgPT4ge1xuICBjb25zdCBwbGFjZWhvbGRlciA9ICdFbnRlciB0ZXh0J1xuICBjb25zdCB2YWx1ZSA9ICdIZWxsbywgd29ybGQhJ1xuICBjb25zdCBvbkJsdXIgPSBqZXN0LmZuKClcbiAgY29uc3Qgb25DaGFuZ2VUZXh0ID0gamVzdC5mbigpXG5cbiAgY29uc3QgeyBnZXRCeVBsYWNlaG9sZGVyVGV4dCB9ID0gcmVuZGVyKFxuICAgIDxUZXh0SW5wdXRGaWVsZFxuICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICBvbkNoYW5nZVRleHQ9e29uQ2hhbmdlVGV4dH1cbiAgICAvPixcbiAgKVxuXG4gIGNvbnN0IGlucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQocGxhY2Vob2xkZXIpXG5cbiAgZXhwZWN0KGlucHV0KS50b0JlRGVmaW5lZCgpXG4gIGV4cGVjdChpbnB1dC5wcm9wcy52YWx1ZSkudG9CZSh2YWx1ZSlcblxuICAvLyBTaW11bGF0ZSB0eXBpbmcgaW4gdGhlIGlucHV0IGZpZWxkXG4gIGNvbnN0IG5ld1RleHQgPSAnTmV3IHRleHQnXG4gIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGlucHV0LCBuZXdUZXh0KVxuICBleHBlY3Qob25DaGFuZ2VUZXh0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChuZXdUZXh0KVxuXG4gIC8vIFNpbXVsYXRlIGJsdXIgZXZlbnRcbiAgZmlyZUV2ZW50KGlucHV0LCAnYmx1cicpXG4gIGV4cGVjdChvbkJsdXIpLnRvSGF2ZUJlZW5DYWxsZWQoKVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsZ0JBQUEsR0FBQUYsT0FBQTtBQUVBRyxJQUFJLENBQUMsa0NBQWtDLEVBQUUsWUFBSztFQUM1QyxJQUFNQyxXQUFXLEdBQUcsWUFBWTtFQUNoQyxJQUFNQyxLQUFLLEdBQUcsZUFBZTtFQUM3QixJQUFNQyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0VBQ3hCLElBQU1DLFlBQVksR0FBR0YsSUFBSSxDQUFDQyxFQUFFLEVBQUU7RUFFOUIsSUFBQUUsSUFBQSxHQUFpQyxJQUFBVCxjQUFBLENBQUFVLE1BQU0sRUFDckMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNYLGdCQUFBLENBQUFZLGNBQWM7TUFDYlYsV0FBVyxFQUFFQSxXQUFZO01BQ3pCQyxLQUFLLEVBQUVBLEtBQU07TUFDYkMsTUFBTSxFQUFFQSxNQUFPO01BQ2ZHLFlBQVksRUFBRUE7SUFBYSxFQUMzQixDQUNIO0lBUE9NLG9CQUFvQixHQUFBTCxJQUFBLENBQXBCSyxvQkFBb0I7RUFTNUIsSUFBTUMsS0FBSyxHQUFHRCxvQkFBb0IsQ0FBQ1gsV0FBVyxDQUFDO0VBRS9DYSxNQUFNLENBQUNELEtBQUssQ0FBQyxDQUFDRSxXQUFXLEVBQUU7RUFDM0JELE1BQU0sQ0FBQ0QsS0FBSyxDQUFDRyxLQUFLLENBQUNkLEtBQUssQ0FBQyxDQUFDZSxJQUFJLENBQUNmLEtBQUssQ0FBQztFQUdyQyxJQUFNZ0IsT0FBTyxHQUFHLFVBQVU7RUFDMUJwQixjQUFBLENBQUFxQixTQUFTLENBQUNDLFVBQVUsQ0FBQ1AsS0FBSyxFQUFFSyxPQUFPLENBQUM7RUFDcENKLE1BQU0sQ0FBQ1IsWUFBWSxDQUFDLENBQUNlLG9CQUFvQixDQUFDSCxPQUFPLENBQUM7RUFHbEQsSUFBQXBCLGNBQUEsQ0FBQXFCLFNBQVMsRUFBQ04sS0FBSyxFQUFFLE1BQU0sQ0FBQztFQUN4QkMsTUFBTSxDQUFDWCxNQUFNLENBQUMsQ0FBQ21CLGdCQUFnQixFQUFFO0FBQ25DLENBQUMsQ0FBQyJ9