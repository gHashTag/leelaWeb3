8212a2174a93ad456d28bad1caa77f97
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var CommentBubbleLeft_1 = require("./CommentBubbleLeft");
describe('CommentBubbleLeft Component', function () {
  var mockPost = {
    id: 123,
    createTime: 1628779200000,
    liked: ['user456'],
    comments: [],
    ownerId: 'user123',
    text: 'Test comment text',
    plan: 1,
    accept: true
  };
  var mockFullName = 'John Doe';
  var mockAvatar = 'avatar-url';
  var mockDate = '2023-08-12';
  var mockHandleProfile = jest.fn();
  var mockOnPress = jest.fn();
  it('renders correctly', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(CommentBubbleLeft_1.CommentBubbleLeft, {
        post: mockPost,
        fullName: mockFullName,
        avatar: mockAvatar,
        date: mockDate,
        handleProfile: mockHandleProfile,
        onPress: mockOnPress
      })),
      getByTestId = _ref.getByTestId,
      getByText = _ref.getByText;
    var commentBubbleContainer = getByTestId('comment-bubble-left-container');
    var commentText = getByText('Test comment text');
    var fullName = getByText('John Doe');
    var date = getByText('2023-08-12');
    expect(commentBubbleContainer).toBeTruthy();
    expect(commentText).toBeTruthy();
    expect(fullName).toBeTruthy();
    expect(date).toBeTruthy();
    react_native_1.fireEvent.press(commentBubbleContainer);
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiQ29tbWVudEJ1YmJsZUxlZnRfMSIsImRlc2NyaWJlIiwibW9ja1Bvc3QiLCJpZCIsImNyZWF0ZVRpbWUiLCJsaWtlZCIsImNvbW1lbnRzIiwib3duZXJJZCIsInRleHQiLCJwbGFuIiwiYWNjZXB0IiwibW9ja0Z1bGxOYW1lIiwibW9ja0F2YXRhciIsIm1vY2tEYXRlIiwibW9ja0hhbmRsZVByb2ZpbGUiLCJqZXN0IiwiZm4iLCJtb2NrT25QcmVzcyIsIml0IiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiQ29tbWVudEJ1YmJsZUxlZnQiLCJwb3N0IiwiZnVsbE5hbWUiLCJhdmF0YXIiLCJkYXRlIiwiaGFuZGxlUHJvZmlsZSIsIm9uUHJlc3MiLCJnZXRCeVRlc3RJZCIsImdldEJ5VGV4dCIsImNvbW1lbnRCdWJibGVDb250YWluZXIiLCJjb21tZW50VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvQ29tbWVudEJ1YmJsZUxlZnQvQ29tbWVudEJ1YmJsZUxlZnQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuXG5pbXBvcnQgeyBDb21tZW50QnViYmxlTGVmdCB9IGZyb20gJy4vQ29tbWVudEJ1YmJsZUxlZnQnXG5cbmRlc2NyaWJlKCdDb21tZW50QnViYmxlTGVmdCBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tQb3N0ID0ge1xuICAgIGlkOiAxMjMsIC8vIEFkZCBpZCBwcm9wZXJ0eVxuICAgIGNyZWF0ZVRpbWU6IDE2Mjg3NzkyMDAwMDAsXG4gICAgbGlrZWQ6IFsndXNlcjQ1NiddLFxuICAgIGNvbW1lbnRzOiBbXSwgLy8gQWRkIGNvbW1lbnRzIHByb3BlcnR5XG4gICAgb3duZXJJZDogJ3VzZXIxMjMnLCAvLyBBZGQgb3duZXJJZCBwcm9wZXJ0eVxuICAgIHRleHQ6ICdUZXN0IGNvbW1lbnQgdGV4dCcsXG4gICAgcGxhbjogMSxcbiAgICBhY2NlcHQ6IHRydWUsXG4gIH1cbiAgY29uc3QgbW9ja0Z1bGxOYW1lID0gJ0pvaG4gRG9lJ1xuICBjb25zdCBtb2NrQXZhdGFyID0gJ2F2YXRhci11cmwnXG4gIGNvbnN0IG1vY2tEYXRlID0gJzIwMjMtMDgtMTInXG4gIGNvbnN0IG1vY2tIYW5kbGVQcm9maWxlID0gamVzdC5mbigpXG4gIGNvbnN0IG1vY2tPblByZXNzID0gamVzdC5mbigpXG5cbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPENvbW1lbnRCdWJibGVMZWZ0XG4gICAgICAgIHBvc3Q9e21vY2tQb3N0fVxuICAgICAgICBmdWxsTmFtZT17bW9ja0Z1bGxOYW1lfVxuICAgICAgICBhdmF0YXI9e21vY2tBdmF0YXJ9XG4gICAgICAgIGRhdGU9e21vY2tEYXRlfVxuICAgICAgICBoYW5kbGVQcm9maWxlPXttb2NrSGFuZGxlUHJvZmlsZX1cbiAgICAgICAgb25QcmVzcz17bW9ja09uUHJlc3N9XG4gICAgICAvPixcbiAgICApXG5cbiAgICBjb25zdCBjb21tZW50QnViYmxlQ29udGFpbmVyID0gZ2V0QnlUZXN0SWQoJ2NvbW1lbnQtYnViYmxlLWxlZnQtY29udGFpbmVyJylcbiAgICBjb25zdCBjb21tZW50VGV4dCA9IGdldEJ5VGV4dCgnVGVzdCBjb21tZW50IHRleHQnKVxuICAgIGNvbnN0IGZ1bGxOYW1lID0gZ2V0QnlUZXh0KCdKb2huIERvZScpXG4gICAgY29uc3QgZGF0ZSA9IGdldEJ5VGV4dCgnMjAyMy0wOC0xMicpXG5cbiAgICAvLyBDaGVjayBpZiB0aGUgY29tcG9uZW50IHJlbmRlcnNcbiAgICBleHBlY3QoY29tbWVudEJ1YmJsZUNvbnRhaW5lcikudG9CZVRydXRoeSgpXG5cbiAgICAvLyBDaGVjayBpZiB0aGUgcG9zdCB0ZXh0IHJlbmRlcnNcbiAgICBleHBlY3QoY29tbWVudFRleHQpLnRvQmVUcnV0aHkoKVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGZ1bGwgbmFtZSByZW5kZXJzXG4gICAgZXhwZWN0KGZ1bGxOYW1lKS50b0JlVHJ1dGh5KClcblxuICAgIC8vIENoZWNrIGlmIHRoZSBkYXRlIHJlbmRlcnNcbiAgICBleHBlY3QoZGF0ZSkudG9CZVRydXRoeSgpXG5cbiAgICAvLyBTaW11bGF0ZSBwcmVzcyBvbiB0aGUgY29tcG9uZW50XG4gICAgZmlyZUV2ZW50LnByZXNzKGNvbW1lbnRCdWJibGVDb250YWluZXIpXG5cbiAgICAvLyBDaGVjayBpZiB0aGUgb25QcmVzcyBjYWxsYmFjayB3YXMgY2FsbGVkXG4gICAgZXhwZWN0KG1vY2tPblByZXNzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLG1CQUFBLEdBQUFGLE9BQUE7QUFFQUcsUUFBUSxDQUFDLDZCQUE2QixFQUFFLFlBQUs7RUFDM0MsSUFBTUMsUUFBUSxHQUFHO0lBQ2ZDLEVBQUUsRUFBRSxHQUFHO0lBQ1BDLFVBQVUsRUFBRSxhQUFhO0lBQ3pCQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUM7SUFDbEJDLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLE9BQU8sRUFBRSxTQUFTO0lBQ2xCQyxJQUFJLEVBQUUsbUJBQW1CO0lBQ3pCQyxJQUFJLEVBQUUsQ0FBQztJQUNQQyxNQUFNLEVBQUU7R0FDVDtFQUNELElBQU1DLFlBQVksR0FBRyxVQUFVO0VBQy9CLElBQU1DLFVBQVUsR0FBRyxZQUFZO0VBQy9CLElBQU1DLFFBQVEsR0FBRyxZQUFZO0VBQzdCLElBQU1DLGlCQUFpQixHQUFHQyxJQUFJLENBQUNDLEVBQUUsRUFBRTtFQUNuQyxJQUFNQyxXQUFXLEdBQUdGLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0VBRTdCRSxFQUFFLENBQUMsbUJBQW1CLEVBQUUsWUFBSztJQUMzQixJQUFBQyxJQUFBLEdBQW1DLElBQUFwQixjQUFBLENBQUFxQixNQUFNLEVBQ3ZDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDdEIsbUJBQUEsQ0FBQXVCLGlCQUFpQjtRQUNoQkMsSUFBSSxFQUFFdEIsUUFBUztRQUNmdUIsUUFBUSxFQUFFZCxZQUFhO1FBQ3ZCZSxNQUFNLEVBQUVkLFVBQVc7UUFDbkJlLElBQUksRUFBRWQsUUFBUztRQUNmZSxhQUFhLEVBQUVkLGlCQUFrQjtRQUNqQ2UsT0FBTyxFQUFFWjtNQUFZLEVBQ3JCLENBQ0g7TUFUT2EsV0FBVyxHQUFBWCxJQUFBLENBQVhXLFdBQVc7TUFBRUMsU0FBUyxHQUFBWixJQUFBLENBQVRZLFNBQVM7SUFXOUIsSUFBTUMsc0JBQXNCLEdBQUdGLFdBQVcsQ0FBQywrQkFBK0IsQ0FBQztJQUMzRSxJQUFNRyxXQUFXLEdBQUdGLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztJQUNsRCxJQUFNTixRQUFRLEdBQUdNLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDdEMsSUFBTUosSUFBSSxHQUFHSSxTQUFTLENBQUMsWUFBWSxDQUFDO0lBR3BDRyxNQUFNLENBQUNGLHNCQUFzQixDQUFDLENBQUNHLFVBQVUsRUFBRTtJQUczQ0QsTUFBTSxDQUFDRCxXQUFXLENBQUMsQ0FBQ0UsVUFBVSxFQUFFO0lBR2hDRCxNQUFNLENBQUNULFFBQVEsQ0FBQyxDQUFDVSxVQUFVLEVBQUU7SUFHN0JELE1BQU0sQ0FBQ1AsSUFBSSxDQUFDLENBQUNRLFVBQVUsRUFBRTtJQUd6QnBDLGNBQUEsQ0FBQXFDLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDTCxzQkFBc0IsQ0FBQztJQUd2Q0UsTUFBTSxDQUFDakIsV0FBVyxDQUFDLENBQUNxQixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=