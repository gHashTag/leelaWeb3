{"version":3,"names":["_utils","require","_worldwide","_routingInstrumentation","_utils2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","defaultOptions","routeChangeTimeoutMs","ReactNavigationInstrumentation","_InternalRoutingInstr","_inherits2","_super","_this","options","length","undefined","_classCallCheck2","name","instrumentationName","_navigationContainer","_maxRecentRouteLen","_initialStateHandled","_recentRouteKeys","_pushRecentRouteKey","key","push","slice","_options","Object","assign","_createClass2","value","registerRoutingInstrumentation","listener","beforeNavigate","onConfirmRoute","_get2","_onDispatch","_onStateChange","registerNavigationContainer","navigationContainerRef","RN_GLOBAL_OBJ","__sentry_rn_v5_registered","current","addListener","bind","_latestTransaction","logger","log","warn","_discardLatestTransaction","_clearStateChangeTimeout","onRouteWillChange","getBlankTransactionContext","_stateChangeTimeout","setTimeout","previousRoute","_latestRoute","route","getCurrentRoute","originalContext","toContext","routeHasBeenSeen","includes","data","params","_a","hasBeenSeen","_b","updatedContext","tags","finalContext","_prepareFinalContext","updateWithContext","isCustomName","setName","customTransactionSource","defaultTransactionSource","_c","_onConfirmRoute","_beforeNavigate","error","sampled","finish","clearTimeout","InternalRoutingInstrumentation","exports","ReactNavigationV5Instrumentation","BLANK_TRANSACTION_CONTEXT","op"],"sources":["../../../src/js/tracing/reactnavigation.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { Transaction as TransactionType, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { RN_GLOBAL_OBJ } from '../utils/worldwide';\nimport type { OnConfirmRoute, TransactionCreator } from './routingInstrumentation';\nimport { InternalRoutingInstrumentation } from './routingInstrumentation';\nimport type { BeforeNavigate, ReactNavigationTransactionContext, RouteChangeContextData } from './types';\nimport { customTransactionSource, defaultTransactionSource, getBlankTransactionContext } from './utils';\n\nexport interface NavigationRoute {\n  name: string;\n  key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  params?: Record<string, any>;\n}\n\ninterface NavigationContainer {\n  addListener: (type: string, listener: () => void) => void;\n  getCurrentRoute: () => NavigationRoute;\n}\n\ninterface ReactNavigationOptions {\n  /**\n   * How long the instrumentation will wait for the route to mount after a change has been initiated,\n   * before the transaction is discarded.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  routeChangeTimeoutMs: number;\n}\n\nconst defaultOptions: ReactNavigationOptions = {\n  routeChangeTimeoutMs: 1000,\n};\n\n/**\n * Instrumentation for React-Navigation V5 and above. See docs or sample app for usage.\n *\n * How this works:\n * - `_onDispatch` is called every time a dispatch happens and sets an IdleTransaction on the scope without any route context.\n * - `_onStateChange` is then called AFTER the state change happens due to a dispatch and sets the route context onto the active transaction.\n * - If `_onStateChange` isn't called within `STATE_CHANGE_TIMEOUT_DURATION` of the dispatch, then the transaction is not sampled and finished.\n */\nexport class ReactNavigationInstrumentation extends InternalRoutingInstrumentation {\n  public static instrumentationName: string = 'react-navigation-v5';\n\n  public readonly name: string = ReactNavigationInstrumentation.instrumentationName;\n\n  private _navigationContainer: NavigationContainer | null = null;\n\n  private readonly _maxRecentRouteLen: number = 200;\n\n  private _latestRoute?: NavigationRoute;\n  private _latestTransaction?: TransactionType;\n  private _initialStateHandled: boolean = false;\n  private _stateChangeTimeout?: number | undefined;\n  private _recentRouteKeys: string[] = [];\n\n  private _options: ReactNavigationOptions;\n\n  public constructor(options: Partial<ReactNavigationOptions> = {}) {\n    super();\n\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    };\n  }\n\n  /**\n   * Extends by calling _handleInitialState at the end.\n   */\n  public registerRoutingInstrumentation(\n    listener: TransactionCreator,\n    beforeNavigate: BeforeNavigate,\n    onConfirmRoute: OnConfirmRoute,\n  ): void {\n    super.registerRoutingInstrumentation(listener, beforeNavigate, onConfirmRoute);\n\n    // We create an initial state here to ensure a transaction gets created before the first route mounts.\n    if (!this._initialStateHandled) {\n      this._onDispatch();\n      if (this._navigationContainer) {\n        // Navigation container already registered, just populate with route state\n        this._onStateChange();\n\n        this._initialStateHandled = true;\n      }\n    }\n  }\n\n  /**\n   * Pass the ref to the navigation container to register it to the instrumentation\n   * @param navigationContainerRef Ref to a `NavigationContainer`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public registerNavigationContainer(navigationContainerRef: any): void {\n    /* We prevent duplicate routing instrumentation to be initialized on fast refreshes\n\n      Explanation: If the user triggers a fast refresh on the file that the instrumentation is\n      initialized in, it will initialize a new instance and will cause undefined behavior.\n     */\n    if (!RN_GLOBAL_OBJ.__sentry_rn_v5_registered) {\n      if ('current' in navigationContainerRef) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        this._navigationContainer = navigationContainerRef.current;\n      } else {\n        this._navigationContainer = navigationContainerRef;\n      }\n\n      if (this._navigationContainer) {\n        this._navigationContainer.addListener(\n          '__unsafe_action__', // This action is emitted on every dispatch\n          this._onDispatch.bind(this),\n        );\n        this._navigationContainer.addListener(\n          'state', // This action is emitted on every state change\n          this._onStateChange.bind(this),\n        );\n\n        if (!this._initialStateHandled) {\n          if (this._latestTransaction) {\n            // If registerRoutingInstrumentation was called first _onDispatch has already been called\n            this._onStateChange();\n\n            this._initialStateHandled = true;\n          } else {\n            logger.log(\n              '[ReactNavigationInstrumentation] Navigation container registered, but integration has not been setup yet.',\n            );\n          }\n        }\n\n        RN_GLOBAL_OBJ.__sentry_rn_v5_registered = true;\n      } else {\n        logger.warn('[ReactNavigationInstrumentation] Received invalid navigation container ref!');\n      }\n    } else {\n      logger.log(\n        '[ReactNavigationInstrumentation] Instrumentation already exists, but register has been called again, doing nothing.',\n      );\n    }\n  }\n\n  /**\n   * To be called on every React-Navigation action dispatch.\n   * It does not name the transaction or populate it with route information. Instead, it waits for the state to fully change\n   * and gets the route information from there, @see _onStateChange\n   */\n  private _onDispatch(): void {\n    if (this._latestTransaction) {\n      logger.log(\n        '[ReactNavigationInstrumentation] A transaction was detected that turned out to be a noop, discarding.',\n      );\n      this._discardLatestTransaction();\n      this._clearStateChangeTimeout();\n    }\n\n    this._latestTransaction = this.onRouteWillChange(\n      getBlankTransactionContext(ReactNavigationInstrumentation.instrumentationName),\n    );\n\n    this._stateChangeTimeout = setTimeout(\n      this._discardLatestTransaction.bind(this),\n      this._options.routeChangeTimeoutMs,\n    );\n  }\n\n  /**\n   * To be called AFTER the state has been changed to populate the transaction with the current route.\n   */\n  private _onStateChange(): void {\n    // Use the getCurrentRoute method to be accurate.\n    const previousRoute = this._latestRoute;\n\n    if (!this._navigationContainer) {\n      logger.warn(\n        '[ReactNavigationInstrumentation] Missing navigation container ref. Route transactions will not be sent.',\n      );\n\n      return;\n    }\n\n    const route = this._navigationContainer.getCurrentRoute();\n\n    if (route) {\n      if (this._latestTransaction) {\n        if (!previousRoute || previousRoute.key !== route.key) {\n          const originalContext = this._latestTransaction.toContext() as typeof BLANK_TRANSACTION_CONTEXT;\n          const routeHasBeenSeen = this._recentRouteKeys.includes(route.key);\n\n          const data: RouteChangeContextData = {\n            ...originalContext.data,\n            route: {\n              name: route.name,\n              key: route.key,\n              params: route.params ?? {},\n              hasBeenSeen: routeHasBeenSeen,\n            },\n            previousRoute: previousRoute\n              ? {\n                  name: previousRoute.name,\n                  key: previousRoute.key,\n                  params: previousRoute.params ?? {},\n                }\n              : null,\n          };\n\n          const updatedContext: ReactNavigationTransactionContext = {\n            ...originalContext,\n            name: route.name,\n            tags: {\n              ...originalContext.tags,\n              'routing.route.name': route.name,\n            },\n            data,\n          };\n\n          const finalContext = this._prepareFinalContext(updatedContext);\n          this._latestTransaction.updateWithContext(finalContext);\n\n          const isCustomName = updatedContext.name !== finalContext.name;\n          this._latestTransaction.setName(\n            finalContext.name,\n            isCustomName ? customTransactionSource : defaultTransactionSource,\n          );\n\n          this._onConfirmRoute?.(finalContext);\n        }\n\n        this._pushRecentRouteKey(route.key);\n        this._latestRoute = route;\n\n        // Clear the latest transaction as it has been handled.\n        this._latestTransaction = undefined;\n      }\n    }\n  }\n\n  /** Creates final transaction context before confirmation */\n  private _prepareFinalContext(updatedContext: TransactionContext): TransactionContext {\n    let finalContext = this._beforeNavigate?.({ ...updatedContext });\n\n    // This block is to catch users not returning a transaction context\n    if (!finalContext) {\n      logger.error(\n        `[ReactNavigationInstrumentation] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`,\n      );\n\n      finalContext = {\n        ...updatedContext,\n        sampled: false,\n      };\n    }\n\n    // Note: finalContext.sampled will be false at this point only if the user sets it to be so in beforeNavigate.\n    if (finalContext.sampled === false) {\n      logger.log(\n        `[ReactNavigationInstrumentation] Will not send transaction \"${finalContext.name}\" due to beforeNavigate.`,\n      );\n    } else {\n      // Clear the timeout so the transaction does not get cancelled.\n      this._clearStateChangeTimeout();\n    }\n\n    return finalContext;\n  }\n\n  /** Pushes a recent route key, and removes earlier routes when there is greater than the max length */\n  private _pushRecentRouteKey = (key: string): void => {\n    this._recentRouteKeys.push(key);\n\n    if (this._recentRouteKeys.length > this._maxRecentRouteLen) {\n      this._recentRouteKeys = this._recentRouteKeys.slice(this._recentRouteKeys.length - this._maxRecentRouteLen);\n    }\n  };\n\n  /** Cancels the latest transaction so it does not get sent to Sentry. */\n  private _discardLatestTransaction(): void {\n    if (this._latestTransaction) {\n      this._latestTransaction.sampled = false;\n      this._latestTransaction.finish();\n      this._latestTransaction = undefined;\n    }\n  }\n\n  /**\n   *\n   */\n  private _clearStateChangeTimeout(): void {\n    if (typeof this._stateChangeTimeout !== 'undefined') {\n      clearTimeout(this._stateChangeTimeout);\n      this._stateChangeTimeout = undefined;\n    }\n  }\n}\n\n/**\n * Backwards compatibility alias for ReactNavigationInstrumentation\n * @deprecated Use ReactNavigationInstrumentation\n */\nexport const ReactNavigationV5Instrumentation = ReactNavigationInstrumentation;\n\nexport const BLANK_TRANSACTION_CONTEXT = {\n  name: 'Route Change',\n  op: 'navigation',\n  tags: {\n    'routing.instrumentation': ReactNavigationInstrumentation.instrumentationName,\n  },\n  data: {},\n};\n"],"mappings":"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"}