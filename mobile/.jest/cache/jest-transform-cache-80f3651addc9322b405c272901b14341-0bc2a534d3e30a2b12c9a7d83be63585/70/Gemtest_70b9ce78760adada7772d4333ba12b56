2068fe70a6fb676616914fb160ea6ca5
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
var __1 = require("../");
var playerWithNumber = {
  id: 1,
  plan: 68,
  avatar: ''
};
describe('Gem Component', function () {
  test('Gem component snapshot', function () {
    var component = react_test_renderer_1.default.create((0, _jsxRuntime.jsx)(__1.Gem, {
      player: playerWithNumber,
      planNumber: 68,
      onPress: function onPress() {}
    }));
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
  test('should have the correct testID prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: function onPress() {}
      })),
      getByTestId = _ref.getByTestId;
    var gemNumber = getByTestId('gem-number');
    expect(gemNumber).toBeDefined();
  });
  test('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: onPressMock
      })),
      getByTestId = _ref2.getByTestId;
    var gemContainer = getByTestId('gem-container');
    react_native_1.fireEvent.press(gemContainer);
    expect(onPressMock).toHaveBeenCalled();
  });
  test('should render number for player with plan number 68', function () {
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        player: playerWithNumber,
        planNumber: 68
      })),
      queryByTestId = _ref3.queryByTestId;
    var numberGem = queryByTestId('gem-number');
    expect(numberGem).toBeNull();
    var imageGem = queryByTestId('player-gem-image');
    expect(imageGem).toBeFalsy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwicmVhY3RfdGVzdF9yZW5kZXJlcl8xIiwiX18xIiwicGxheWVyV2l0aE51bWJlciIsImlkIiwicGxhbiIsImF2YXRhciIsImRlc2NyaWJlIiwidGVzdCIsImNvbXBvbmVudCIsImRlZmF1bHQiLCJjcmVhdGUiLCJfanN4UnVudGltZSIsImpzeCIsIkdlbSIsInBsYXllciIsInBsYW5OdW1iZXIiLCJvblByZXNzIiwidHJlZSIsInRvSlNPTiIsImV4cGVjdCIsInRvTWF0Y2hTbmFwc2hvdCIsIl9yZWYiLCJyZW5kZXIiLCJnZXRCeVRlc3RJZCIsImdlbU51bWJlciIsInRvQmVEZWZpbmVkIiwib25QcmVzc01vY2siLCJqZXN0IiwiZm4iLCJfcmVmMiIsImdlbUNvbnRhaW5lciIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZWYzIiwicXVlcnlCeVRlc3RJZCIsIm51bWJlckdlbSIsInRvQmVOdWxsIiwiaW1hZ2VHZW0iLCJ0b0JlRmFsc3kiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL0dlbS9HZW0udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbXBvbmVudHMvR2VtL0dlbS50ZXN0LnRzeFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHJlbmRlcmVyIGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInXG5cbmltcG9ydCB7IEdlbSB9IGZyb20gJy4uLydcblxuY29uc3QgcGxheWVyV2l0aE51bWJlciA9IHtcbiAgaWQ6IDEsXG4gIHBsYW46IDY4LFxuICBhdmF0YXI6ICcnLFxufVxuXG5kZXNjcmliZSgnR2VtIENvbXBvbmVudCcsICgpID0+IHtcbiAgdGVzdCgnR2VtIGNvbXBvbmVudCBzbmFwc2hvdCcsICgpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnQgPSByZW5kZXJlci5jcmVhdGUoXG4gICAgICA8R2VtIHBsYXllcj17cGxheWVyV2l0aE51bWJlcn0gcGxhbk51bWJlcj17Njh9IG9uUHJlc3M9eygpID0+IHt9fSAvPixcbiAgICApXG5cbiAgICBjb25zdCB0cmVlID0gY29tcG9uZW50LnRvSlNPTigpXG4gICAgZXhwZWN0KHRyZWUpLnRvTWF0Y2hTbmFwc2hvdCgpXG4gIH0pXG5cbiAgdGVzdCgnc2hvdWxkIGhhdmUgdGhlIGNvcnJlY3QgdGVzdElEIHByb3AnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxHZW0gcGxhbk51bWJlcj17NX0gb25QcmVzcz17KCkgPT4ge319IC8+KVxuICAgIGNvbnN0IGdlbU51bWJlciA9IGdldEJ5VGVzdElkKCdnZW0tbnVtYmVyJylcbiAgICBleHBlY3QoZ2VtTnVtYmVyKS50b0JlRGVmaW5lZCgpXG4gIH0pXG5cbiAgdGVzdCgnc2hvdWxkIGNhbGwgdGhlIG9uUHJlc3MgZnVuY3Rpb24gd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uUHJlc3NNb2NrID0gamVzdC5mbigpXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxHZW0gcGxhbk51bWJlcj17NX0gb25QcmVzcz17b25QcmVzc01vY2t9IC8+KVxuICAgIGNvbnN0IGdlbUNvbnRhaW5lciA9IGdldEJ5VGVzdElkKCdnZW0tY29udGFpbmVyJylcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2VtQ29udGFpbmVyKVxuICAgIGV4cGVjdChvblByZXNzTW9jaykudG9IYXZlQmVlbkNhbGxlZCgpXG4gIH0pXG5cbiAgdGVzdCgnc2hvdWxkIHJlbmRlciBudW1iZXIgZm9yIHBsYXllciB3aXRoIHBsYW4gbnVtYmVyIDY4JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEdlbSBwbGF5ZXI9e3BsYXllcldpdGhOdW1iZXJ9IHBsYW5OdW1iZXI9ezY4fSAvPixcbiAgICApXG5cbiAgICBjb25zdCBudW1iZXJHZW0gPSBxdWVyeUJ5VGVzdElkKCdnZW0tbnVtYmVyJylcbiAgICBleHBlY3QobnVtYmVyR2VtKS50b0JlTnVsbCgpXG5cbiAgICBjb25zdCBpbWFnZUdlbSA9IHF1ZXJ5QnlUZXN0SWQoJ3BsYXllci1nZW0taW1hZ2UnKVxuICAgIGV4cGVjdChpbWFnZUdlbSkudG9CZUZhbHN5KClcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLHFCQUFBLEdBQUFILGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLEdBQUEsR0FBQUgsT0FBQTtBQUVBLElBQU1JLGdCQUFnQixHQUFHO0VBQ3ZCQyxFQUFFLEVBQUUsQ0FBQztFQUNMQyxJQUFJLEVBQUUsRUFBRTtFQUNSQyxNQUFNLEVBQUU7Q0FDVDtBQUVEQyxRQUFRLENBQUMsZUFBZSxFQUFFLFlBQUs7RUFDN0JDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxZQUFLO0lBQ2xDLElBQU1DLFNBQVMsR0FBR1IscUJBQUEsQ0FBQVMsT0FBUSxDQUFDQyxNQUFNLENBQy9CLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDWCxHQUFBLENBQUFZLEdBQUc7TUFBQ0MsTUFBTSxFQUFFWixnQkFBaUI7TUFBQ2EsVUFBVSxFQUFFLEVBQUc7TUFBQ0MsT0FBTyxFQUFFLFNBQUFBLFFBQUEsRUFBSyxDQUFFO0lBQUUsRUFBRyxDQUNyRTtJQUVELElBQU1DLElBQUksR0FBR1QsU0FBUyxDQUFDVSxNQUFNLEVBQUU7SUFDL0JDLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDLENBQUNHLGVBQWUsRUFBRTtFQUNoQyxDQUFDLENBQUM7RUFFRmIsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLFlBQUs7SUFDL0MsSUFBQWMsSUFBQSxHQUF3QixJQUFBdEIsY0FBQSxDQUFBdUIsTUFBTSxFQUFDLElBQUFYLFdBQUEsQ0FBQUMsR0FBQSxFQUFDWCxHQUFBLENBQUFZLEdBQUc7UUFBQ0UsVUFBVSxFQUFFLENBQUU7UUFBQ0MsT0FBTyxFQUFFLFNBQUFBLFFBQUEsRUFBSyxDQUFFO01BQUUsRUFBRyxDQUFDO01BQWpFTyxXQUFXLEdBQUFGLElBQUEsQ0FBWEUsV0FBVztJQUNuQixJQUFNQyxTQUFTLEdBQUdELFdBQVcsQ0FBQyxZQUFZLENBQUM7SUFDM0NKLE1BQU0sQ0FBQ0ssU0FBUyxDQUFDLENBQUNDLFdBQVcsRUFBRTtFQUNqQyxDQUFDLENBQUM7RUFFRmxCLElBQUksQ0FBQywrQ0FBK0MsRUFBRSxZQUFLO0lBQ3pELElBQU1tQixXQUFXLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQzdCLElBQUFDLEtBQUEsR0FBd0IsSUFBQTlCLGNBQUEsQ0FBQXVCLE1BQU0sRUFBQyxJQUFBWCxXQUFBLENBQUFDLEdBQUEsRUFBQ1gsR0FBQSxDQUFBWSxHQUFHO1FBQUNFLFVBQVUsRUFBRSxDQUFFO1FBQUNDLE9BQU8sRUFBRVU7TUFBWSxFQUFHLENBQUM7TUFBcEVILFdBQVcsR0FBQU0sS0FBQSxDQUFYTixXQUFXO0lBQ25CLElBQU1PLFlBQVksR0FBR1AsV0FBVyxDQUFDLGVBQWUsQ0FBQztJQUNqRHhCLGNBQUEsQ0FBQWdDLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDRixZQUFZLENBQUM7SUFDN0JYLE1BQU0sQ0FBQ08sV0FBVyxDQUFDLENBQUNPLGdCQUFnQixFQUFFO0VBQ3hDLENBQUMsQ0FBQztFQUVGMUIsSUFBSSxDQUFDLHFEQUFxRCxFQUFFLFlBQUs7SUFDL0QsSUFBQTJCLEtBQUEsR0FBMEIsSUFBQW5DLGNBQUEsQ0FBQXVCLE1BQU0sRUFDOUIsSUFBQVgsV0FBQSxDQUFBQyxHQUFBLEVBQUNYLEdBQUEsQ0FBQVksR0FBRztRQUFDQyxNQUFNLEVBQUVaLGdCQUFpQjtRQUFDYSxVQUFVLEVBQUU7TUFBRyxFQUFHLENBQ2xEO01BRk9vQixhQUFhLEdBQUFELEtBQUEsQ0FBYkMsYUFBYTtJQUlyQixJQUFNQyxTQUFTLEdBQUdELGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDN0NoQixNQUFNLENBQUNpQixTQUFTLENBQUMsQ0FBQ0MsUUFBUSxFQUFFO0lBRTVCLElBQU1DLFFBQVEsR0FBR0gsYUFBYSxDQUFDLGtCQUFrQixDQUFDO0lBQ2xEaEIsTUFBTSxDQUFDbUIsUUFBUSxDQUFDLENBQUNDLFNBQVMsRUFBRTtFQUM5QixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==