c30de04d182b6dcaaa7bc847ccd1a6fc
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var playerWithNumber = {
  id: 1,
  plan: 68,
  avatar: ''
};
var playerWithStringAvatar = {
  id: 2,
  plan: 72,
  avatar: 'https://example.com/avatar.jpg'
};
var playerWithNumberAvatar = {
  id: 3,
  plan: 34,
  avatar: 106
};
describe('Gem Component', function () {
  test('should have the correct testID prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: function onPress() {}
      })),
      getByTestId = _ref.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(gemImage).toBeDefined();
  });
  test('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: onPressMock
      })),
      getByTestId = _ref2.getByTestId;
    var gemContainer = getByTestId('gem-container');
    react_native_1.fireEvent.press(gemContainer);
    expect(onPressMock).toHaveBeenCalled();
  });
  test('should render number for player with plan number 68', function () {
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        player: playerWithNumber,
        planNumber: 68
      })),
      getByTestId = _ref3.getByTestId,
      queryByTestId = _ref3.queryByTestId;
    var numberGem = getByTestId('gem-number');
    expect(numberGem).toBeTruthy();
    var imageGem = queryByTestId('gem-image');
    expect(imageGem).toBeFalsy();
  });
  test('should render image for player with string avatar', function () {
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        player: playerWithStringAvatar,
        planNumber: 72
      })),
      queryByTestId = _ref4.queryByTestId;
    var imageGem = queryByTestId('gem-image');
    expect(imageGem).toBeTruthy();
    var numberGem = queryByTestId('gem-number');
    expect(numberGem).toBeFalsy();
  });
  test('should render number for player with plan number 68', function () {
    var _ref5 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        player: playerWithNumber,
        planNumber: 68
      })),
      getByTestId = _ref5.getByTestId,
      queryByTestId = _ref5.queryByTestId;
    var numberGem = getByTestId('gem-number');
    expect(numberGem).toBeTruthy();
    var imageGem = queryByTestId('gem-image');
    expect(imageGem).toBeFalsy();
  });
  test('should render image for player with string avatar', function () {
    var _ref6 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        player: playerWithStringAvatar,
        planNumber: 72
      })),
      queryByTestId = _ref6.queryByTestId;
    var imageGem = queryByTestId('gem-image');
    expect(imageGem).toBeTruthy();
    var numberGem = queryByTestId('gem-number');
    expect(numberGem).toBeFalsy();
  });
  test('should render image for player with number avatar', function () {
    var _ref7 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        player: playerWithNumberAvatar,
        planNumber: 34
      })),
      queryByTestId = _ref7.queryByTestId;
    var imageGem = queryByTestId('gem-image');
    expect(imageGem).toBeTruthy();
    var numberGem = queryByTestId('gem-number');
    expect(numberGem).toBeFalsy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,