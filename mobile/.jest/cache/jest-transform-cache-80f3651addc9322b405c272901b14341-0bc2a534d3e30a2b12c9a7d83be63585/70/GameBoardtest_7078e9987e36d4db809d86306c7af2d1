3f3dde68d3882805828872b3b9c1a213
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
test('should render the correct number of Gem components based on the players prop', function () {
  var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getAllByTestId = _ref.getAllByTestId;
  var gemComponents = getAllByTestId('gem-container');
  var playerGemImages = getAllByTestId('player-gem-image');
  expect(playerGemImages.length).toEqual(2);
  expect(gemComponents.length).toEqual(72);
});
test('should render player avatars', function () {
  var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getByTestId = _ref2.getByTestId;
  players.forEach(function (player) {
    var gemImage = getByTestId(`gem-${player.id}`);
    expect(gemImage).toBeTruthy();
  });
});
test('should render the correct number of Gem components based on the players prop', function () {
  var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getAllByTestId = _ref3.getAllByTestId;
  var gemComponents = getAllByTestId(/^gem-\d+$/);
  expect(gemComponents.length).toEqual(63);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsInRlc3QiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHYW1lQm9hcmQiLCJnZXRBbGxCeVRlc3RJZCIsImdlbUNvbXBvbmVudHMiLCJwbGF5ZXJHZW1JbWFnZXMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0VxdWFsIiwiX3JlZjIiLCJnZXRCeVRlc3RJZCIsImZvckVhY2giLCJwbGF5ZXIiLCJnZW1JbWFnZSIsInRvQmVUcnV0aHkiLCJfcmVmMyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvR2FtZUJvYXJkL0dhbWVCb2FyZC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAndHlwZXMnXG5cbmltcG9ydCB7IEdhbWVCb2FyZCB9IGZyb20gJy4uLydcblxuY29uc3QgcGxheWVyczogUGxheWVyW10gPSBbXG4gIHtcbiAgICBpZDogMixcbiAgICBwbGFuOiA3MixcbiAgICBhdmF0YXI6IDEwNixcbiAgfSxcbiAge1xuICAgIGlkOiA0LFxuICAgIHBsYW46IDM0LFxuICAgIGF2YXRhcjpcbiAgICAgICdodHRwczovL2JhZmtyZWlmdHJtZm1pbWx2bzI2eGF4ZnZ0MnlwbmpqYWF2cTVtZ25ramxqczZtY3pmZWtpaTRjbXRxLmlwZnMubmZ0c3RvcmFnZS5saW5rLycsXG4gIH0sXG5dXG5cbnRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuICBjb25zdCBnZW1Db21wb25lbnRzID0gZ2V0QWxsQnlUZXN0SWQoJ2dlbS1jb250YWluZXInKVxuICBjb25zdCBwbGF5ZXJHZW1JbWFnZXMgPSBnZXRBbGxCeVRlc3RJZCgncGxheWVyLWdlbS1pbWFnZScpXG4gIGV4cGVjdChwbGF5ZXJHZW1JbWFnZXMubGVuZ3RoKS50b0VxdWFsKDIpIC8vINCf0YDQvtCy0LXRgNC60LAg0L3QsCAyINC40LPRgNC+0LrQsFxuICBleHBlY3QoZ2VtQ29tcG9uZW50cy5sZW5ndGgpLnRvRXF1YWwoNzIpIC8vINCf0YDQvtCy0LXRgNC60LAg0L3QsCDQvtCx0YnQtdC1INC60L7Qu9C40YfQtdGB0YLQstC+INC60L7QvNC/0L7QvdC10L3RgtC+0LIgR2VtXG59KVxuXG50ZXN0KCdzaG91bGQgcmVuZGVyIHBsYXllciBhdmF0YXJzJywgKCkgPT4ge1xuICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPilcblxuICBwbGF5ZXJzLmZvckVhY2goKHBsYXllcikgPT4ge1xuICAgIGNvbnN0IGdlbUltYWdlID0gZ2V0QnlUZXN0SWQoYGdlbS0ke3BsYXllci5pZH1gKVxuICAgIGV4cGVjdChnZW1JbWFnZSkudG9CZVRydXRoeSgpXG4gIH0pXG59KVxuXG4vLyB0ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBjb3JyZWN0IG51bWJlciBvZiBHZW0gY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgcGxheWVycyBwcm9wJywgKCkgPT4ge1xuLy8gICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPilcblxuLy8gICBjb25zdCBnZW1Db21wb25lbnRzID0gZ2V0QWxsQnlUZXN0SWQoL15nZW0tXFxkKyQvKVxuLy8gICBleHBlY3QoZ2VtQ29tcG9uZW50cy5sZW5ndGgpLnRvRXF1YWwoNzIpIC8vINCe0LHRidC10LUg0LrQvtC70LjRh9C10YHRgtCy0L4gR2VtINC60L7QvNC/0L7QvdC10L3RgtC+0LIg0LHQtdC3INC/0YPRgdGC0YvRhSDRj9GH0LXQtdC6XG4vLyB9KVxuXG50ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBjb3JyZWN0IG51bWJlciBvZiBHZW0gY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgcGxheWVycyBwcm9wJywgKCkgPT4ge1xuICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoPEdhbWVCb2FyZCBwbGF5ZXJzPXtwbGF5ZXJzfSAvPilcbiAgY29uc3QgZ2VtQ29tcG9uZW50cyA9IGdldEFsbEJ5VGVzdElkKC9eZ2VtLVxcZCskLylcbiAgZXhwZWN0KGdlbUNvbXBvbmVudHMubGVuZ3RoKS50b0VxdWFsKDYzKSAvLyDQntCx0YnQtdC1INC60L7Qu9C40YfQtdGB0YLQstC+IEdlbSDQutC+0LzQv9C+0L3QtdC90YLQvtCyINCx0LXQtyDQv9GD0YHRgtGL0YUg0Y/Rh9C10LXQulxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBR0EsSUFBQUUsR0FBQSxHQUFBRixPQUFBO0FBRUEsSUFBTUcsT0FBTyxHQUFhLENBQ3hCO0VBQ0VDLEVBQUUsRUFBRSxDQUFDO0VBQ0xDLElBQUksRUFBRSxFQUFFO0VBQ1JDLE1BQU0sRUFBRTtDQUNULEVBQ0Q7RUFDRUYsRUFBRSxFQUFFLENBQUM7RUFDTEMsSUFBSSxFQUFFLEVBQUU7RUFDUkMsTUFBTSxFQUNKO0NBQ0gsQ0FDRjtBQUVEQyxJQUFJLENBQUMsOEVBQThFLEVBQUUsWUFBSztFQUN4RixJQUFBQyxJQUFBLEdBQTJCLElBQUFQLGNBQUEsQ0FBQVEsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVCxHQUFBLENBQUFVLFNBQVM7TUFBQ1QsT0FBTyxFQUFFQTtJQUFRLEVBQUcsQ0FBQztJQUExRFUsY0FBYyxHQUFBTCxJQUFBLENBQWRLLGNBQWM7RUFDdEIsSUFBTUMsYUFBYSxHQUFHRCxjQUFjLENBQUMsZUFBZSxDQUFDO0VBQ3JELElBQU1FLGVBQWUsR0FBR0YsY0FBYyxDQUFDLGtCQUFrQixDQUFDO0VBQzFERyxNQUFNLENBQUNELGVBQWUsQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUM7RUFDekNGLE1BQU0sQ0FBQ0YsYUFBYSxDQUFDRyxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLEVBQUUsQ0FBQztBQUMxQyxDQUFDLENBQUM7QUFFRlgsSUFBSSxDQUFDLDhCQUE4QixFQUFFLFlBQUs7RUFDeEMsSUFBQVksS0FBQSxHQUF3QixJQUFBbEIsY0FBQSxDQUFBUSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNULEdBQUEsQ0FBQVUsU0FBUztNQUFDVCxPQUFPLEVBQUVBO0lBQVEsRUFBRyxDQUFDO0lBQXZEaUIsV0FBVyxHQUFBRCxLQUFBLENBQVhDLFdBQVc7RUFFbkJqQixPQUFPLENBQUNrQixPQUFPLENBQUMsVUFBQ0MsTUFBTSxFQUFJO0lBQ3pCLElBQU1DLFFBQVEsR0FBR0gsV0FBVyxDQUFDLE9BQU9FLE1BQU0sQ0FBQ2xCLEVBQUUsRUFBRSxDQUFDO0lBQ2hEWSxNQUFNLENBQUNPLFFBQVEsQ0FBQyxDQUFDQyxVQUFVLEVBQUU7RUFDL0IsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBU0ZqQixJQUFJLENBQUMsOEVBQThFLEVBQUUsWUFBSztFQUN4RixJQUFBa0IsS0FBQSxHQUEyQixJQUFBeEIsY0FBQSxDQUFBUSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNULEdBQUEsQ0FBQVUsU0FBUztNQUFDVCxPQUFPLEVBQUVBO0lBQVEsRUFBRyxDQUFDO0lBQTFEVSxjQUFjLEdBQUFZLEtBQUEsQ0FBZFosY0FBYztFQUN0QixJQUFNQyxhQUFhLEdBQUdELGNBQWMsQ0FBQyxXQUFXLENBQUM7RUFDakRHLE1BQU0sQ0FBQ0YsYUFBYSxDQUFDRyxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLEVBQUUsQ0FBQztBQUMxQyxDQUFDLENBQUMifQ==