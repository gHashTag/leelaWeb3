116dea95ac68dd50d88c14bc87f85169
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShadowFlexType = exports.ShadowARTType = exports.OuterShadowType = exports.NeomorphType = exports.NeomorphFlexType = exports.InnerShadowType = void 0;
var _reactNative = require("react-native");
var _propTypes = require("prop-types");
var ShadowARTType = {
  width: _propTypes.number.isRequired,
  height: _propTypes.number.isRequired,
  borderRadius: _propTypes.number,
  shadowRadius: _propTypes.number,
  shadowOffset: (0, _propTypes.shape)({
    x: _propTypes.number,
    y: _propTypes.number
  }),
  shadowOpacity: _propTypes.number,
  shadowColor: _propTypes.string,
  backgroundColor: _propTypes.string
};
exports.ShadowARTType = ShadowARTType;
var InnerShadowType = Object.assign({}, _reactNative.ViewPropTypes, {
  children: _propTypes.node,
  style: (0, _propTypes.shape)(Object.assign({}, _reactNative.ViewPropTypes.style, {
    width: _propTypes.number,
    height: _propTypes.number
  }))
});
exports.InnerShadowType = InnerShadowType;
var OuterShadowType = Object.assign({}, InnerShadowType, {
  inner: _propTypes.bool,
  useArt: _propTypes.bool
});
exports.OuterShadowType = OuterShadowType;
var NeomorphType = Object.assign({}, OuterShadowType, {
  darkShadowColor: _propTypes.string,
  lightShadowColor: _propTypes.string,
  swapShadows: _propTypes.bool
});
exports.NeomorphType = NeomorphType;
var NeomorphFlexType = Object.assign({}, NeomorphType, {
  style: _reactNative.ViewPropTypes.style
});
exports.NeomorphFlexType = NeomorphFlexType;
var ShadowFlexType = Object.assign({}, OuterShadowType, {
  style: _reactNative.ViewPropTypes.style
});
exports.ShadowFlexType = ShadowFlexType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3Byb3BUeXBlcyIsIlNoYWRvd0FSVFR5cGUiLCJ3aWR0aCIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJzaGFkb3dSYWRpdXMiLCJzaGFkb3dPZmZzZXQiLCJzaGFwZSIsIngiLCJ5Iiwic2hhZG93T3BhY2l0eSIsInNoYWRvd0NvbG9yIiwic3RyaW5nIiwiYmFja2dyb3VuZENvbG9yIiwiZXhwb3J0cyIsIklubmVyU2hhZG93VHlwZSIsIk9iamVjdCIsImFzc2lnbiIsIlZpZXdQcm9wVHlwZXMiLCJjaGlsZHJlbiIsIm5vZGUiLCJzdHlsZSIsIk91dGVyU2hhZG93VHlwZSIsImlubmVyIiwiYm9vbCIsInVzZUFydCIsIk5lb21vcnBoVHlwZSIsImRhcmtTaGFkb3dDb2xvciIsImxpZ2h0U2hhZG93Q29sb3IiLCJzd2FwU2hhZG93cyIsIk5lb21vcnBoRmxleFR5cGUiLCJTaGFkb3dGbGV4VHlwZSJdLCJzb3VyY2VzIjpbInR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdQcm9wVHlwZXMgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgbnVtYmVyLCBzaGFwZSwgc3RyaW5nLCBub2RlLCBib29sIH0gZnJvbSAncHJvcC10eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBTaGFkb3dBUlRUeXBlID0ge1xuICB3aWR0aDogbnVtYmVyLmlzUmVxdWlyZWQsXG4gIGhlaWdodDogbnVtYmVyLmlzUmVxdWlyZWQsXG4gIGJvcmRlclJhZGl1czogbnVtYmVyLFxuICBzaGFkb3dSYWRpdXM6IG51bWJlcixcbiAgc2hhZG93T2Zmc2V0OiBzaGFwZSh7XG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgfSksXG4gIHNoYWRvd09wYWNpdHk6IG51bWJlcixcbiAgc2hhZG93Q29sb3I6IHN0cmluZyxcbiAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmcsXG59O1xuXG5leHBvcnQgY29uc3QgSW5uZXJTaGFkb3dUeXBlID0ge1xuICAuLi5WaWV3UHJvcFR5cGVzLFxuICBjaGlsZHJlbjogbm9kZSxcbiAgc3R5bGU6IHNoYXBlKHtcbiAgICAuLi5WaWV3UHJvcFR5cGVzLnN0eWxlLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gIH0pLFxufTtcblxuZXhwb3J0IGNvbnN0IE91dGVyU2hhZG93VHlwZSA9IHtcbiAgLi4uSW5uZXJTaGFkb3dUeXBlLFxuICBpbm5lcjogYm9vbCxcbiAgdXNlQXJ0OiBib29sLFxufTtcblxuZXhwb3J0IGNvbnN0IE5lb21vcnBoVHlwZSA9IHtcbiAgLi4uT3V0ZXJTaGFkb3dUeXBlLFxuICBkYXJrU2hhZG93Q29sb3I6IHN0cmluZyxcbiAgbGlnaHRTaGFkb3dDb2xvcjogc3RyaW5nLFxuICBzd2FwU2hhZG93czogYm9vbCxcbn07XG5cbmV4cG9ydCBjb25zdCBOZW9tb3JwaEZsZXhUeXBlID0ge1xuICAuLi5OZW9tb3JwaFR5cGUsXG4gIHN0eWxlOiBWaWV3UHJvcFR5cGVzLnN0eWxlLFxufTtcblxuZXhwb3J0IGNvbnN0IFNoYWRvd0ZsZXhUeXBlID0ge1xuICAuLi5PdXRlclNoYWRvd1R5cGUsXG4gIHN0eWxlOiBWaWV3UHJvcFR5cGVzLnN0eWxlLFxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUQsT0FBQTtBQUVPLElBQU1FLGFBQWEsR0FBRztFQUMzQkMsS0FBSyxFQUFFQyxpQkFBTSxDQUFDQyxVQUFVO0VBQ3hCQyxNQUFNLEVBQUVGLGlCQUFNLENBQUNDLFVBQVU7RUFDekJFLFlBQVksRUFBRUgsaUJBQU07RUFDcEJJLFlBQVksRUFBRUosaUJBQU07RUFDcEJLLFlBQVksRUFBRSxJQUFBQyxnQkFBSyxFQUFDO0lBQ2xCQyxDQUFDLEVBQUVQLGlCQUFNO0lBQ1RRLENBQUMsRUFBRVI7RUFDTCxDQUFDLENBQUM7RUFDRlMsYUFBYSxFQUFFVCxpQkFBTTtFQUNyQlUsV0FBVyxFQUFFQyxpQkFBTTtFQUNuQkMsZUFBZSxFQUFFRDtBQUNuQixDQUFDO0FBQUNFLE9BQUEsQ0FBQWYsYUFBQSxHQUFBQSxhQUFBO0FBRUssSUFBTWdCLGVBQWUsR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ3ZCQywwQkFBYTtFQUNoQkMsUUFBUSxFQUFFQyxlQUFJO0VBQ2RDLEtBQUssRUFBRSxJQUFBZCxnQkFBSyxFQUFBUyxNQUFBLENBQUFDLE1BQUEsS0FDUEMsMEJBQWEsQ0FBQ0csS0FBSztJQUN0QnJCLEtBQUssRUFBRUMsaUJBQU07SUFDYkUsTUFBTSxFQUFFRjtFQUFNLEVBQ2Y7QUFBQyxFQUNIO0FBQUNhLE9BQUEsQ0FBQUMsZUFBQSxHQUFBQSxlQUFBO0FBRUssSUFBTU8sZUFBZSxHQUFBTixNQUFBLENBQUFDLE1BQUEsS0FDdkJGLGVBQWU7RUFDbEJRLEtBQUssRUFBRUMsZUFBSTtFQUNYQyxNQUFNLEVBQUVEO0FBQUksRUFDYjtBQUFDVixPQUFBLENBQUFRLGVBQUEsR0FBQUEsZUFBQTtBQUVLLElBQU1JLFlBQVksR0FBQVYsTUFBQSxDQUFBQyxNQUFBLEtBQ3BCSyxlQUFlO0VBQ2xCSyxlQUFlLEVBQUVmLGlCQUFNO0VBQ3ZCZ0IsZ0JBQWdCLEVBQUVoQixpQkFBTTtFQUN4QmlCLFdBQVcsRUFBRUw7QUFBSSxFQUNsQjtBQUFDVixPQUFBLENBQUFZLFlBQUEsR0FBQUEsWUFBQTtBQUVLLElBQU1JLGdCQUFnQixHQUFBZCxNQUFBLENBQUFDLE1BQUEsS0FDeEJTLFlBQVk7RUFDZkwsS0FBSyxFQUFFSCwwQkFBYSxDQUFDRztBQUFLLEVBQzNCO0FBQUNQLE9BQUEsQ0FBQWdCLGdCQUFBLEdBQUFBLGdCQUFBO0FBRUssSUFBTUMsY0FBYyxHQUFBZixNQUFBLENBQUFDLE1BQUEsS0FDdEJLLGVBQWU7RUFDbEJELEtBQUssRUFBRUgsMEJBQWEsQ0FBQ0c7QUFBSyxFQUMzQjtBQUFDUCxPQUFBLENBQUFpQixjQUFBLEdBQUFBLGNBQUEifQ==