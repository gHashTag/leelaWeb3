d1fa10e6fe4173a70e2b2db2341de82f
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return mockAsyncStorage;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_hooks_1 = require("@testing-library/react-hooks");
var i18next_1 = __importDefault(require("i18next"));
var mock_async_storage_1 = __importDefault(require("mock-async-storage"));
var images_1 = require("./images");
var useLeelaGame_1 = require("./useLeelaGame");
var mockAsyncStorage = new mock_async_storage_1.default();
describe('useLeelaGame', function () {
  beforeEach(function () {
    mockAsyncStorage.clear();
  });
  it('should initialize state correctly', (0, _asyncToGenerator2.default)(function* () {
    var initialState = {
      currentPlayer: {
        id: 1,
        plan: 68,
        previousPlan: 68,
        isStart: false,
        isFinished: false,
        consecutiveSixes: 0,
        message: i18next_1.default.t('sixToBegin'),
        positionBeforeThreeSixes: 0,
        avatar: images_1.GEM_ICONS[1]
      },
      lastRoll: 1,
      rollHistory: [],
      planHistory: [68]
    };
    mockAsyncStorage.setItem('leelaGameState', JSON.stringify(initialState));
    mockAsyncStorage.setItem.mockReturnValueOnce(JSON.stringify(initialState));
    var _ref2 = (0, react_hooks_1.renderHook)(function () {
        return (0, useLeelaGame_1.useLeelaGame)();
      }),
      result = _ref2.result,
      waitForNextUpdate = _ref2.waitForNextUpdate;
    (0, react_hooks_1.act)(function () {
      result.current.rollDice();
    });
    yield waitForNextUpdate();
    expect(result.current.currentPlayer).toMatchObject(initialState.currentPlayer);
    expect(result.current.rollHistory).toEqual(initialState.rollHistory);
    expect(result.current.planHistory).toEqual(initialState.planHistory);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJtb2NrQXN5bmNTdG9yYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVxdWlyZSIsImplc3QiLCJyZWFjdF9ob29rc18xIiwiaTE4bmV4dF8xIiwiX19pbXBvcnREZWZhdWx0IiwibW9ja19hc3luY19zdG9yYWdlXzEiLCJpbWFnZXNfMSIsInVzZUxlZWxhR2FtZV8xIiwiZGVmYXVsdCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyIiwiaXQiLCJpbml0aWFsU3RhdGUiLCJjdXJyZW50UGxheWVyIiwiaWQiLCJwbGFuIiwicHJldmlvdXNQbGFuIiwiaXNTdGFydCIsImlzRmluaXNoZWQiLCJjb25zZWN1dGl2ZVNpeGVzIiwibWVzc2FnZSIsInQiLCJwb3NpdGlvbkJlZm9yZVRocmVlU2l4ZXMiLCJhdmF0YXIiLCJHRU1fSUNPTlMiLCJsYXN0Um9sbCIsInJvbGxIaXN0b3J5IiwicGxhbkhpc3RvcnkiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vY2tSZXR1cm5WYWx1ZU9uY2UiLCJfcmVmMiIsInJlbmRlckhvb2siLCJ1c2VMZWVsYUdhbWUiLCJyZXN1bHQiLCJ3YWl0Rm9yTmV4dFVwZGF0ZSIsImFjdCIsImN1cnJlbnQiLCJyb2xsRGljZSIsImV4cGVjdCIsInRvTWF0Y2hPYmplY3QiLCJ0b0VxdWFsIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvaG9va3MvdXNlTGVlbGFHYW1lL3VzZUxlZWxhR2FtZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXJIb29rLCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LWhvb2tzJ1xuaW1wb3J0IGkxOG5leHQgZnJvbSAnaTE4bmV4dCdcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBNb2NrQXN5bmNTdG9yYWdlIGZyb20gJ21vY2stYXN5bmMtc3RvcmFnZSdcblxuaW1wb3J0IHsgR0VNX0lDT05TIH0gZnJvbSAnLi9pbWFnZXMnXG5pbXBvcnQgeyB1c2VMZWVsYUdhbWUgfSBmcm9tICcuL3VzZUxlZWxhR2FtZSdcblxuY29uc3QgbW9ja0FzeW5jU3RvcmFnZSA9IG5ldyBNb2NrQXN5bmNTdG9yYWdlKClcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnLCAoKSA9PiBtb2NrQXN5bmNTdG9yYWdlKVxuXG5kZXNjcmliZSgndXNlTGVlbGFHYW1lJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrQXN5bmNTdG9yYWdlLmNsZWFyKClcbiAgfSlcblxuICBpdCgnc2hvdWxkIGluaXRpYWxpemUgc3RhdGUgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICAgIGN1cnJlbnRQbGF5ZXI6IHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIHBsYW46IDY4LFxuICAgICAgICBwcmV2aW91c1BsYW46IDY4LFxuICAgICAgICBpc1N0YXJ0OiBmYWxzZSxcbiAgICAgICAgaXNGaW5pc2hlZDogZmFsc2UsXG4gICAgICAgIGNvbnNlY3V0aXZlU2l4ZXM6IDAsXG4gICAgICAgIG1lc3NhZ2U6IGkxOG5leHQudCgnc2l4VG9CZWdpbicpLFxuICAgICAgICBwb3NpdGlvbkJlZm9yZVRocmVlU2l4ZXM6IDAsXG4gICAgICAgIGF2YXRhcjogR0VNX0lDT05TWzFdLFxuICAgICAgfSxcbiAgICAgIGxhc3RSb2xsOiAxLFxuICAgICAgcm9sbEhpc3Rvcnk6IFtdLFxuICAgICAgcGxhbkhpc3Rvcnk6IFs2OF0sXG4gICAgfVxuXG4gICAgLy8gTW9jayBBc3luY1N0b3JhZ2UuZ2V0SXRlbVxuICAgIG1vY2tBc3luY1N0b3JhZ2Uuc2V0SXRlbSgnbGVlbGFHYW1lU3RhdGUnLCBKU09OLnN0cmluZ2lmeShpbml0aWFsU3RhdGUpKVxuICAgIG1vY2tBc3luY1N0b3JhZ2Uuc2V0SXRlbS5tb2NrUmV0dXJuVmFsdWVPbmNlKEpTT04uc3RyaW5naWZ5KGluaXRpYWxTdGF0ZSkpIC8vXG5cbiAgICBjb25zdCB7IHJlc3VsdCwgd2FpdEZvck5leHRVcGRhdGUgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGVlbGFHYW1lKCkpXG5cbiAgICAvLyBDYWxsIHRoZSBmdW5jdGlvbiB0aGF0IHRyaWdnZXJzIHN0YXRlIGNoYW5nZVxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5yb2xsRGljZSgpXG4gICAgfSlcblxuICAgIC8vIFdhaXQgZm9yIHRoZSBuZXh0IHVwZGF0ZVxuICAgIGF3YWl0IHdhaXRGb3JOZXh0VXBkYXRlKClcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50UGxheWVyKS50b01hdGNoT2JqZWN0KFxuICAgICAgaW5pdGlhbFN0YXRlLmN1cnJlbnRQbGF5ZXIsXG4gICAgKVxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5yb2xsSGlzdG9yeSkudG9FcXVhbChpbml0aWFsU3RhdGUucm9sbEhpc3RvcnkpXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnBsYW5IaXN0b3J5KS50b0VxdWFsKGluaXRpYWxTdGF0ZS5wbGFuSGlzdG9yeSlcbiAgfSlcblxuICAvLyBUZXN0IG90aGVyIHNjZW5hcmlvcyBzaW1pbGFybHlcbn0pXG4iXSwibWFwcGluZ3MiOiI7O0FBU0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTUMsZ0JBQWdCO0FBQUEsRUFBQztBQUFBLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQUosWUFBQTtFQUFBLElBQUFNLFFBQUEsR0FBQUYsT0FBQTtJQUFBRyxJQUFBLEdBQUFELFFBQUEsQ0FBQUMsSUFBQTtFQUFBUCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxP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