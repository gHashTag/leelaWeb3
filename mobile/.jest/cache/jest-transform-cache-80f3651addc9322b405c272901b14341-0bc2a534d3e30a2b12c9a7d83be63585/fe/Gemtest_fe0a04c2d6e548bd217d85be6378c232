b9f6b0d3ef88d1e1c007c816c66c2ca8
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var images_1 = require("./images");
describe('Gem Component', function () {
  test('should render the correct image based on planNumber prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 3,
        onPress: function onPress() {}
      })),
      getByTestId = _ref.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(gemImage.props.source).toEqual(images_1.ICONS[3 - 1]);
  });
  test('should render the default image if player prop is missing', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 10,
        onPress: function onPress() {}
      })),
      getByTestId = _ref2.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(gemImage.props.source).toEqual(images_1.ICONS[0]);
  });
  test('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: onPressMock
      })),
      getByTestId = _ref3.getByTestId;
    var gemContainer = getByTestId('gem-container');
    react_native_1.fireEvent.press(gemContainer);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwiaW1hZ2VzXzEiLCJkZXNjcmliZSIsInRlc3QiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHZW0iLCJwbGFuTnVtYmVyIiwib25QcmVzcyIsImdldEJ5VGVzdElkIiwiZ2VtSW1hZ2UiLCJleHBlY3QiLCJwcm9wcyIsInNvdXJjZSIsInRvRXF1YWwiLCJJQ09OUyIsIl9yZWYyIiwib25QcmVzc01vY2siLCJqZXN0IiwiZm4iLCJfcmVmMyIsImdlbUNvbnRhaW5lciIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvR2VtL0dlbS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7R2VtfSBmcm9tICcuLi8nXG5pbXBvcnQge0lDT05TfSBmcm9tICcuL2ltYWdlcydcblxuZGVzY3JpYmUoJ0dlbSBDb21wb25lbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgaW1hZ2UgYmFzZWQgb24gcGxhbk51bWJlciBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEdlbSBwbGFuTnVtYmVyPXszfSBvblByZXNzPXsoKSA9PiB7fX0gLz4pXG4gICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRlc3RJZCgnZ2VtLWltYWdlJylcbiAgICBleHBlY3QoZ2VtSW1hZ2UucHJvcHMuc291cmNlKS50b0VxdWFsKElDT05TWzMgLSAxXSkgLy8gQ2hlY2sgdGhlIGNvcnJlY3QgaW1hZ2UgYmFzZWQgb24gcGxhbk51bWJlciBwcm9wXG4gIH0pXG5cbiAgdGVzdCgnc2hvdWxkIHJlbmRlciB0aGUgZGVmYXVsdCBpbWFnZSBpZiBwbGF5ZXIgcHJvcCBpcyBtaXNzaW5nJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEdlbSBwbGFuTnVtYmVyPXsxMH0gb25QcmVzcz17KCkgPT4ge319IC8+KVxuICAgIGNvbnN0IGdlbUltYWdlID0gZ2V0QnlUZXN0SWQoJ2dlbS1pbWFnZScpXG4gICAgZXhwZWN0KGdlbUltYWdlLnByb3BzLnNvdXJjZSkudG9FcXVhbChJQ09OU1swXSkgLy8gQ2hlY2sgdGhlIGRlZmF1bHQgaW1hZ2UgaWYgcGxheWVyIHByb3AgaXMgbWlzc2luZ1xuICB9KVxuXG4gIHRlc3QoJ3Nob3VsZCBjYWxsIHRoZSBvblByZXNzIGZ1bmN0aW9uIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBvblByZXNzTW9jayA9IGplc3QuZm4oKVxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEdlbSBwbGFuTnVtYmVyPXs1fSBvblByZXNzPXtvblByZXNzTW9ja30gLz4pXG4gICAgY29uc3QgZ2VtQ29udGFpbmVyID0gZ2V0QnlUZXN0SWQoJ2dlbS1jb250YWluZXInKVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZW1Db250YWluZXIpXG4gICAgZXhwZWN0KG9uUHJlc3NNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLEdBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUgsT0FBQTtBQUVBSSxRQUFRLENBQUMsZUFBZSxFQUFFLFlBQUs7RUFDN0JDLElBQUksQ0FBQywwREFBMEQsRUFBRSxZQUFLO0lBQ3BFLElBQUFDLElBQUEsR0FBc0IsSUFBQUwsY0FBQSxDQUFBTSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNQLEdBQUEsQ0FBQVEsR0FBRztRQUFDQyxVQUFVLEVBQUUsQ0FBRTtRQUFDQyxPQUFPLEVBQUUsU0FBQUEsUUFBQSxFQUFLLENBQUU7TUFBRSxFQUFHLENBQUM7TUFBaEVDLFdBQVcsR0FBQVAsSUFBQSxDQUFYTyxXQUFXO0lBQ2xCLElBQU1DLFFBQVEsR0FBR0QsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUN6Q0UsTUFBTSxDQUFDRCxRQUFRLENBQUNFLEtBQUssQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQ2YsUUFBQSxDQUFBZ0IsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNyRCxDQUFDLENBQUM7RUFFRmQsSUFBSSxDQUFDLDJEQUEyRCxFQUFFLFlBQUs7SUFDckUsSUFBQWUsS0FBQSxHQUFzQixJQUFBbkIsY0FBQSxDQUFBTSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNQLEdBQUEsQ0FBQVEsR0FBRztRQUFDQyxVQUFVLEVBQUUsRUFBRztRQUFDQyxPQUFPLEVBQUUsU0FBQUEsUUFBQSxFQUFLLENBQUU7TUFBRSxFQUFHLENBQUM7TUFBakVDLFdBQVcsR0FBQU8sS0FBQSxDQUFYUCxXQUFXO0lBQ2xCLElBQU1DLFFBQVEsR0FBR0QsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUN6Q0UsTUFBTSxDQUFDRCxRQUFRLENBQUNFLEtBQUssQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQ2YsUUFBQSxDQUFBZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2pELENBQUMsQ0FBQztFQUVGZCxJQUFJLENBQUMsK0NBQStDLEVBQUUsWUFBSztJQUN6RCxJQUFNZ0IsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsRUFBRTtJQUM3QixJQUFBQyxLQUFBLEdBQXNCLElBQUF2QixjQUFBLENBQUFNLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1AsR0FBQSxDQUFBUSxHQUFHO1FBQUNDLFVBQVUsRUFBRSxDQUFFO1FBQUNDLE9BQU8sRUFBRVM7TUFBWSxFQUFHLENBQUM7TUFBbkVSLFdBQVcsR0FBQVcsS0FBQSxDQUFYWCxXQUFXO0lBQ2xCLElBQU1ZLFlBQVksR0FBR1osV0FBVyxDQUFDLGVBQWUsQ0FBQztJQUNqRFosY0FBQSxDQUFBeUIsU0FBUyxDQUFDQyxLQUFLLENBQUNGLFlBQVksQ0FBQztJQUM3QlYsTUFBTSxDQUFDTSxXQUFXLENBQUMsQ0FBQ08sZ0JBQWdCLEVBQUU7RUFDeEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=