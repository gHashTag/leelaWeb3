b65b43462598be014c11e8b38abfb87e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeviceContext = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _tslib = require("tslib");
var _utils = require("@sentry/utils");
var _reactNative = require("react-native");
var _breadcrumb = require("../breadcrumb");
var _wrapper = require("../wrapper");
var DeviceContext = function () {
  function DeviceContext() {
    (0, _classCallCheck2.default)(this, DeviceContext);
    this.name = DeviceContext.id;
  }
  (0, _createClass2.default)(DeviceContext, [{
    key: "setupOnce",
    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {
      var _this = this;
      addGlobalEventProcessor(function (event) {
        return (0, _tslib.__awaiter)(_this, void 0, void 0, function* () {
          var _a;
          var self = getCurrentHub().getIntegration(DeviceContext);
          if (!self) {
            return event;
          }
          var native = null;
          try {
            native = yield _wrapper.NATIVE.fetchNativeDeviceContexts();
          } catch (e) {
            _utils.logger.log(`Failed to get device context from native: ${e}`);
          }
          if (!native) {
            return event;
          }
          var nativeUser = native.user;
          if (!event.user && nativeUser) {
            event.user = nativeUser;
          }
          var nativeContexts = native.contexts;
          if (_reactNative.AppState.currentState !== 'unknown') {
            nativeContexts = nativeContexts || {};
            nativeContexts.app = Object.assign(Object.assign({}, nativeContexts.app), {
              in_foreground: _reactNative.AppState.currentState === 'active'
            });
          }
          if (nativeContexts) {
            event.contexts = Object.assign(Object.assign({}, nativeContexts), event.contexts);
          }
          var nativeTags = native.tags;
          if (nativeTags) {
            event.tags = Object.assign(Object.assign({}, nativeTags), event.tags);
          }
          var nativeExtra = native.extra;
          if (nativeExtra) {
            event.extra = Object.assign(Object.assign({}, nativeExtra), event.extra);
          }
          var nativeFingerprint = native.fingerprint;
          if (nativeFingerprint) {
            event.fingerprint = ((_a = event.fingerprint) !== null && _a !== void 0 ? _a : []).concat(nativeFingerprint.filter(function (item) {
              var _a;
              return ((_a = event.fingerprint) !== null && _a !== void 0 ? _a : []).indexOf(item) < 0;
            }));
          }
          var nativeLevel = typeof native['level'] === 'string' ? (0, _utils.severityLevelFromString)(native['level']) : undefined;
          if (!event.level && nativeLevel) {
            event.level = nativeLevel;
          }
          var nativeEnvironment = native['environment'];
          if (!event.environment && nativeEnvironment) {
            event.environment = nativeEnvironment;
          }
          var nativeBreadcrumbs = Array.isArray(native['breadcrumbs']) ? native['breadcrumbs'].map(_breadcrumb.breadcrumbFromObject) : undefined;
          if (nativeBreadcrumbs) {
            event.breadcrumbs = nativeBreadcrumbs;
          }
          return event;
        });
      });
    }
  }]);
  return DeviceContext;
}();
exports.DeviceContext = DeviceContext;
DeviceContext.id = 'DeviceContext';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,