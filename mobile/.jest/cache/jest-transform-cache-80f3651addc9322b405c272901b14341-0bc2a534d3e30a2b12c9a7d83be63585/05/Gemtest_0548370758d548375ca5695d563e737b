296e8acb81f4261a8ce423663580dfe9
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var images_1 = require("./images");
console.log(images_1.ICONS);
describe('Gem Component', function () {
  test('should render the correct image based on planNumber prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 3,
        onPress: function onPress() {}
      })),
      getByTestId = _ref.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(true).toBe(true);
  });
  test('should render the default image if player prop is missing', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 10,
        onPress: function onPress() {}
      })),
      getByTestId = _ref2.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(true).toBe(true);
  });
  test('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: onPressMock
      })),
      getByTestId = _ref3.getByTestId;
    var gemContainer = getByTestId('gem-container');
    react_native_1.fireEvent.press(gemContainer);
    expect(onPressMock).toHaveBeenCalled();
  });
  test('should render with a visible number if player prop is missing and planNumber is not 68', function () {
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 10,
        onPress: function onPress() {}
      })),
      getByTestId = _ref4.getByTestId;
    var gemNumber = getByTestId('gem-number');
    expect(gemNumber.props.title).toBe('10');
  });
  test('should render without a visible number if player prop is missing and planNumber is 68', function () {
    var _ref5 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 68,
        onPress: function onPress() {}
      })),
      queryByTestId = _ref5.queryByTestId;
    var gemNumber = queryByTestId('gem-number');
    expect(gemNumber).toBeNull();
  });
  test('should render with the player image if player prop is provided', function () {
    var player = {
      id: 1,
      uri: '../../../src/components/Gem/images/two.png'
    };
    var _ref6 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 3,
        player: player,
        onPress: function onPress() {}
      })),
      getByTestId = _ref6.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(true).toBe(true);
  });
  test('should render with the default image if the provided player URI is invalid', function () {
    var player = {
      id: 1,
      uri: 'invalid-uri'
    };
    var _ref7 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 3,
        player: player,
        onPress: function onPress() {}
      })),
      getByTestId = _ref7.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(true).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,