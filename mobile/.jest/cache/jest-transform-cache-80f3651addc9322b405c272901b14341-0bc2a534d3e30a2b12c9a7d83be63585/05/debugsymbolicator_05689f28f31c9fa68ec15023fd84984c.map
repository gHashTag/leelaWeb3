{"version":3,"names":["_core","require","_utils","INTERNAL_CALLSITES_REGEX","RegExp","join","DebugSymbolicator","_classCallCheck2","default","name","id","_createClass2","key","value","setupOnce","_this","addGlobalEventProcessor","event","hint","__awaiter","self","getCurrentHub","getIntegration","undefined","originalException","reactError","parseErrorStack","stack","e","_symbolicate","platform","symbolicateStackTrace","prettyStack","newStack","stackWithoutInternalCallsites","filter","frame","file","match","symbolicatedFrames","_convertReactNativeFramesToSentryFrames","_replaceFramesInEvent","logger","error","Error","warn","message","frames","getDevServer","_oO","Promise","all","map","_this2","inApp","column","lineNumber","includes","newFrame","colno","filename","function","methodName","in_app","lineno","addressAtPos","indexOf","substr","trim","_addSourceContext","exception","values","stacktrace","reverse","response","segments","_b","_a","split","idx","Object","prototype","hasOwnProperty","call","fetch","url","slice","method","ok","content","text","lines","addContextToFrame","exports"],"sources":["../../../src/js/integrations/debugsymbolicator.ts"],"sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport type { Event, EventHint, Integration, StackFrame } from '@sentry/types';\nimport { addContextToFrame, logger } from '@sentry/utils';\n\nconst INTERNAL_CALLSITES_REGEX = new RegExp(['ReactNativeRenderer-dev\\\\.js$', 'MessageQueue\\\\.js$'].join('|'));\n\ninterface GetDevServer {\n  (): { url: string };\n}\n\n/**\n * React Native Stack Frame\n */\ninterface ReactNativeFrame {\n  // arguments: []\n  column: number;\n  file: string;\n  lineNumber: number;\n  methodName: string;\n}\n\n/**\n * React Native Error\n */\nexport type ReactNativeError = Error & {\n  framesToPop?: number;\n  jsEngine?: string;\n  preventSymbolication?: boolean;\n  componentStack?: string;\n};\n\n/** Tries to symbolicate the JS stack trace on the device. */\nexport class DebugSymbolicator implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'DebugSymbolicator';\n  /**\n   * @inheritDoc\n   */\n  public name: string = DebugSymbolicator.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(DebugSymbolicator);\n\n      if (!self || hint === undefined || hint.originalException === undefined) {\n        return event;\n      }\n\n      const reactError = hint.originalException as ReactNativeError;\n\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const parseErrorStack = require('react-native/Libraries/Core/Devtools/parseErrorStack');\n\n      let stack;\n      try {\n        stack = parseErrorStack(reactError);\n      } catch (e) {\n        // In RN 0.64 `parseErrorStack` now only takes a string\n        stack = parseErrorStack(reactError.stack);\n      }\n\n      await self._symbolicate(event, stack);\n\n      event.platform = 'node'; // Setting platform node makes sure we do not show source maps errors\n\n      return event;\n    });\n  }\n\n  /**\n   * Symbolicates the stack on the device talking to local dev server.\n   * Mutates the passed event.\n   */\n  private async _symbolicate(event: Event, stack: string | undefined): Promise<void> {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const symbolicateStackTrace = require('react-native/Libraries/Core/Devtools/symbolicateStackTrace');\n      const prettyStack = await symbolicateStackTrace(stack);\n\n      if (prettyStack) {\n        let newStack = prettyStack;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (prettyStack.stack) {\n          // This has been changed in an react-native version so stack is contained in here\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          newStack = prettyStack.stack;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const stackWithoutInternalCallsites = newStack.filter(\n          (frame: { file?: string }) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            frame.file && frame.file.match(INTERNAL_CALLSITES_REGEX) === null,\n        );\n\n        const symbolicatedFrames = await this._convertReactNativeFramesToSentryFrames(stackWithoutInternalCallsites);\n        this._replaceFramesInEvent(event, symbolicatedFrames);\n      } else {\n        logger.error('The stack is null');\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.warn(`Unable to symbolicate stack trace: ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Converts ReactNativeFrames to frames in the Sentry format\n   * @param frames ReactNativeFrame[]\n   */\n  private async _convertReactNativeFramesToSentryFrames(frames: ReactNativeFrame[]): Promise<StackFrame[]> {\n    let getDevServer: GetDevServer;\n    try {\n      getDevServer = require('react-native/Libraries/Core/Devtools/getDevServer');\n    } catch (_oO) {\n      // We can't load devserver URL\n    }\n    // Below you will find lines marked with :HACK to prevent showing errors in the sentry ui\n    // But since this is a debug only feature: This is Fine (TM)\n    return Promise.all(\n      frames.map(async (frame: ReactNativeFrame): Promise<StackFrame> => {\n        let inApp = !!frame.column && !!frame.lineNumber;\n        inApp =\n          inApp &&\n          frame.file !== undefined &&\n          !frame.file.includes('node_modules') &&\n          !frame.file.includes('native code');\n\n        const newFrame: StackFrame = {\n          colno: frame.column,\n          filename: frame.file,\n          function: frame.methodName,\n          in_app: inApp,\n          lineno: inApp ? frame.lineNumber : undefined, // :HACK\n          platform: inApp ? 'javascript' : 'node', // :HACK\n        };\n\n        // The upstream `react-native@0.61` delegates parsing of stacks to `stacktrace-parser`, which is buggy and\n        // leaves a trailing `(address at` in the function name.\n        // `react-native@0.62` seems to have custom logic to parse hermes frames specially.\n        // Anyway, all we do here is throw away the bogus suffix.\n        if (newFrame.function) {\n          const addressAtPos = newFrame.function.indexOf('(address at');\n          if (addressAtPos >= 0) {\n            newFrame.function = newFrame.function.substr(0, addressAtPos).trim();\n          }\n        }\n\n        if (inApp) {\n          await this._addSourceContext(newFrame, getDevServer);\n        }\n\n        return newFrame;\n      }),\n    );\n  }\n\n  /**\n   * Replaces the frames in the exception of a error.\n   * @param event Event\n   * @param frames StackFrame[]\n   */\n  private _replaceFramesInEvent(event: Event, frames: StackFrame[]): void {\n    if (\n      event.exception &&\n      event.exception.values &&\n      event.exception.values[0] &&\n      event.exception.values[0].stacktrace\n    ) {\n      event.exception.values[0].stacktrace.frames = frames.reverse();\n    }\n  }\n\n  /**\n   * This tries to add source context for in_app Frames\n   *\n   * @param frame StackFrame\n   * @param getDevServer function from RN to get DevServer URL\n   */\n  private async _addSourceContext(frame: StackFrame, getDevServer?: GetDevServer): Promise<void> {\n    let response;\n\n    const segments = frame.filename?.split('/') ?? [];\n\n    if (getDevServer) {\n      for (const idx in segments) {\n        if (Object.prototype.hasOwnProperty.call(segments, idx)) {\n          response = await fetch(`${getDevServer().url}${segments.slice(-idx).join('/')}`, {\n            method: 'GET',\n          });\n\n          if (response.ok) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (response && response.ok) {\n      const content = await response.text();\n      const lines = content.split('\\n');\n\n      addContextToFrame(lines, frame);\n    }\n  }\n}\n"],"mappings":"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"}