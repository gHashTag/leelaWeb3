1a518e1249f8c60d67518079a0a565bf
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var images_1 = require("./images");
console.log(images_1.ICONS);
describe('Gem Component', function () {
  test('should render the correct image based on planNumber prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 3,
        onPress: function onPress() {}
      })),
      getByTestId = _ref.getByTestId;
    var gemImage = getByTestId('gem-image');
    expect(gemImage.props.source).toEqual({
      uri: images_1.ICONS[3]
    });
  });
  test('should render the default image if player prop is missing', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 10,
        onPress: function onPress() {}
      })),
      getByTestId = _ref2.getByTestId;
    var gemImage = getByTestId('gem-image');
    console.log('gemImage.props.source', gemImage.props.source);
    expect(gemImage.props.source).toEqual({
      uri: images_1.ICONS[0]
    });
  });
  test('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.Gem, {
        planNumber: 5,
        onPress: onPressMock
      })),
      getByTestId = _ref3.getByTestId;
    var gemContainer = getByTestId('gem-container');
    react_native_1.fireEvent.press(gemContainer);
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwiaW1hZ2VzXzEiLCJjb25zb2xlIiwibG9nIiwiSUNPTlMiLCJkZXNjcmliZSIsInRlc3QiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHZW0iLCJwbGFuTnVtYmVyIiwib25QcmVzcyIsImdldEJ5VGVzdElkIiwiZ2VtSW1hZ2UiLCJleHBlY3QiLCJwcm9wcyIsInNvdXJjZSIsInRvRXF1YWwiLCJ1cmkiLCJfcmVmMiIsIm9uUHJlc3NNb2NrIiwiamVzdCIsImZuIiwiX3JlZjMiLCJnZW1Db250YWluZXIiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWQiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL0dlbS9HZW0udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbXBvbmVudHMvR2VtL0dlbS50ZXN0LnRzeFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQge0dlbX0gZnJvbSAnLi4vJ1xuaW1wb3J0IHtJQ09OU30gZnJvbSAnLi9pbWFnZXMnXG5cbmNvbnNvbGUubG9nKElDT05TKVxuXG5kZXNjcmliZSgnR2VtIENvbXBvbmVudCcsICgpID0+IHtcbiAgdGVzdCgnc2hvdWxkIHJlbmRlciB0aGUgY29ycmVjdCBpbWFnZSBiYXNlZCBvbiBwbGFuTnVtYmVyIHByb3AnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8R2VtIHBsYW5OdW1iZXI9ezN9IG9uUHJlc3M9eygpID0+IHt9fSAvPilcbiAgICBjb25zdCBnZW1JbWFnZSA9IGdldEJ5VGVzdElkKCdnZW0taW1hZ2UnKVxuICAgIGV4cGVjdChnZW1JbWFnZS5wcm9wcy5zb3VyY2UpLnRvRXF1YWwoe3VyaTogSUNPTlNbM119KSAvLyBDaGVjayB0aGUgY29ycmVjdCBpbWFnZSBiYXNlZCBvbiBwbGFuTnVtYmVyIHByb3BcbiAgfSlcblxuICB0ZXN0KCdzaG91bGQgcmVuZGVyIHRoZSBkZWZhdWx0IGltYWdlIGlmIHBsYXllciBwcm9wIGlzIG1pc3NpbmcnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8R2VtIHBsYW5OdW1iZXI9ezEwfSBvblByZXNzPXsoKSA9PiB7fX0gLz4pXG4gICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRlc3RJZCgnZ2VtLWltYWdlJylcbiAgICBjb25zb2xlLmxvZygnZ2VtSW1hZ2UucHJvcHMuc291cmNlJywgZ2VtSW1hZ2UucHJvcHMuc291cmNlKVxuICAgIGV4cGVjdChnZW1JbWFnZS5wcm9wcy5zb3VyY2UpLnRvRXF1YWwoe3VyaTogSUNPTlNbMF19KSAvLyBDaGVjayB0aGUgZGVmYXVsdCBpbWFnZSBpZiBwbGF5ZXIgcHJvcCBpcyBtaXNzaW5nXG4gIH0pXG5cbiAgdGVzdCgnc2hvdWxkIGNhbGwgdGhlIG9uUHJlc3MgZnVuY3Rpb24gd2hlbiBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uUHJlc3NNb2NrID0gamVzdC5mbigpXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8R2VtIHBsYW5OdW1iZXI9ezV9IG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPilcbiAgICBjb25zdCBnZW1Db250YWluZXIgPSBnZXRCeVRlc3RJZCgnZ2VtLWNvbnRhaW5lcicpXG4gICAgZmlyZUV2ZW50LnByZXNzKGdlbUNvbnRhaW5lcilcbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FB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