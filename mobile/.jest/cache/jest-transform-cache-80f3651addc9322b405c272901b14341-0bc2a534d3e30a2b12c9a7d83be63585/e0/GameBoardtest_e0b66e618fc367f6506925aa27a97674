d23a50f83bf061d593aaecb5733d6cd1
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
describe('GameBoard Component', function () {
  test('should render the correct number of Gem components based on the players prop', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
        players: players
      })),
      getAllByTestId = _ref.getAllByTestId;
    var gemComponents = getAllByTestId('gem-container');
    var playerGemImages = getAllByTestId('player-gem-image');
    expect(playerGemImages.length).toEqual(2);
    expect(gemComponents.length).toEqual(72);
  });
  test('should render plan numbers for empty spaces', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
        players: players
      })),
      getAllByTestId = _ref2.getAllByTestId,
      getByText = _ref2.getByText;
    var emptyPlanNumbers = [68, 69, 70, 71, 72];
    emptyPlanNumbers.forEach(function (planNumber) {
      var gemImage = getByText(planNumber.toString());
      expect(gemImage).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsImRlc2NyaWJlIiwidGVzdCIsIl9yZWYiLCJyZW5kZXIiLCJfanN4UnVudGltZSIsImpzeCIsIkdhbWVCb2FyZCIsImdldEFsbEJ5VGVzdElkIiwiZ2VtQ29tcG9uZW50cyIsInBsYXllckdlbUltYWdlcyIsImV4cGVjdCIsImxlbmd0aCIsInRvRXF1YWwiLCJfcmVmMiIsImdldEJ5VGV4dCIsImVtcHR5UGxhbk51bWJlcnMiLCJmb3JFYWNoIiwicGxhbk51bWJlciIsImdlbUltYWdlIiwidG9TdHJpbmciLCJ0b0JlVHJ1dGh5Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9HYW1lQm9hcmQvR2FtZUJvYXJkLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICd0eXBlcydcblxuaW1wb3J0IHsgR2FtZUJvYXJkIH0gZnJvbSAnLi4vJ1xuXG5jb25zdCBwbGF5ZXJzOiBQbGF5ZXJbXSA9IFtcbiAge1xuICAgIGlkOiAyLFxuICAgIHBsYW46IDcyLFxuICAgIGF2YXRhcjogMTA2LFxuICB9LFxuICB7XG4gICAgaWQ6IDQsXG4gICAgcGxhbjogMzQsXG4gICAgYXZhdGFyOlxuICAgICAgJ2h0dHBzOi8vYmFma3JlaWZ0cm1mbWltbHZvMjZ4YXhmdnQyeXBuamphYXZxNW1nbmtqbGpzNm1jemZla2lpNGNtdHEuaXBmcy5uZnRzdG9yYWdlLmxpbmsvJyxcbiAgfSxcbl1cblxuZGVzY3JpYmUoJ0dhbWVCb2FyZCBDb21wb25lbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG4gICAgY29uc3QgZ2VtQ29tcG9uZW50cyA9IGdldEFsbEJ5VGVzdElkKCdnZW0tY29udGFpbmVyJylcbiAgICBjb25zdCBwbGF5ZXJHZW1JbWFnZXMgPSBnZXRBbGxCeVRlc3RJZCgncGxheWVyLWdlbS1pbWFnZScpXG4gICAgZXhwZWN0KHBsYXllckdlbUltYWdlcy5sZW5ndGgpLnRvRXF1YWwoMikgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwIDIg0LjQs9GA0L7QutCwXG4gICAgZXhwZWN0KGdlbUNvbXBvbmVudHMubGVuZ3RoKS50b0VxdWFsKDcyKSAvLyDQn9GA0L7QstC10YDQutCwINC90LAg0L7QsdGJ0LXQtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQutC+0LzQv9C+0L3QtdC90YLQvtCyIEdlbVxuICB9KVxuXG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgcGxhbiBudW1iZXJzIGZvciBlbXB0eSBzcGFjZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+LFxuICAgIClcbiAgICBjb25zdCBlbXB0eVBsYW5OdW1iZXJzID0gWzY4LCA2OSwgNzAsIDcxLCA3Ml1cbiAgICBlbXB0eVBsYW5OdW1iZXJzLmZvckVhY2goKHBsYW5OdW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IGdlbUltYWdlID0gZ2V0QnlUZXh0KHBsYW5OdW1iZXIudG9TdHJpbmcoKSlcbiAgICAgIGV4cGVjdChnZW1JbWFnZSkudG9CZVRydXRoeSgpXG4gICAgfSlcbiAgfSlcbn0pXG5cbi8vIHRlc3QoJ3Nob3VsZCByZW5kZXIgcGxheWVyIGF2YXRhcnMnLCAoKSA9PiB7XG4vLyAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuXG4vLyAgIHBsYXllcnMuZm9yRWFjaCgocGxheWVyKSA9PiB7XG4vLyAgICAgY29uc3QgZ2VtSW1hZ2UgPSBnZXRCeVRlc3RJZChgZ2VtLSR7cGxheWVyLmlkfWApXG4vLyAgICAgZXhwZWN0KGdlbUltYWdlKS50b0JlVHJ1dGh5KClcbi8vICAgfSlcbi8vIH0pXG5cbi8vIHRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4vLyAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuXG4vLyAgIGNvbnN0IGdlbUNvbXBvbmVudHMgPSBnZXRBbGxCeVRlc3RJZCgvXmdlbS1cXGQrJC8pXG4vLyAgIGV4cGVjdChnZW1Db21wb25lbnRzLmxlbmd0aCkudG9FcXVhbCg3MikgLy8g0J7QsdGJ0LXQtSDQutC+0LvQuNGH0LXRgdGC0LLQviBHZW0g0LrQvtC80L/QvtC90LXQvdGC0L7QsiDQsdC10Lcg0L/Rg9GB0YLRi9GFINGP0YfQtdC10Lpcbi8vIH0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUdBLElBQUFFLEdBQUEsR0FBQUYsT0FBQTtBQUVBLElBQU1HLE9BQU8sR0FBYSxDQUN4QjtFQUNFQyxFQUFFLEVBQUUsQ0FBQztFQUNMQyxJQUFJLEVBQUUsRUFBRTtFQUNSQyxNQUFNLEVBQUU7Q0FDVCxFQUNEO0VBQ0VGLEVBQUUsRUFBRSxDQUFDO0VBQ0xDLElBQUksRUFBRSxFQUFFO0VBQ1JDLE1BQU0sRUFDSjtDQUNILENBQ0Y7QUFFREMsUUFBUSxDQUFDLHFCQUFxQixFQUFFLFlBQUs7RUFDbkNDLElBQUksQ0FBQyw4RUFBOEUsRUFBRSxZQUFLO0lBQ3hGLElBQUFDLElBQUEsR0FBMkIsSUFBQVIsY0FBQSxDQUFBUyxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNWLEdBQUEsQ0FBQVcsU0FBUztRQUFDVixPQUFPLEVBQUVBO01BQVEsRUFBRyxDQUFDO01BQTFEVyxjQUFjLEdBQUFMLElBQUEsQ0FBZEssY0FBYztJQUN0QixJQUFNQyxhQUFhLEdBQUdELGNBQWMsQ0FBQyxlQUFlLENBQUM7SUFDckQsSUFBTUUsZUFBZSxHQUFHRixjQUFjLENBQUMsa0JBQWtCLENBQUM7SUFDMURHLE1BQU0sQ0FBQ0QsZUFBZSxDQUFDRSxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6Q0YsTUFBTSxDQUFDRixhQUFhLENBQUNHLE1BQU0sQ0FBQyxDQUFDQyxPQUFPLENBQUMsRUFBRSxDQUFDO0VBQzFDLENBQUMsQ0FBQztFQUVGWCxJQUFJLENBQUMsNkNBQTZDLEVBQUUsWUFBSztJQUN2RCxJQUFBWSxLQUFBLEdBQXNDLElBQUFuQixjQUFBLENBQUFTLE1BQU0sRUFDMUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNWLEdBQUEsQ0FBQVcsU0FBUztRQUFDVixPQUFPLEVBQUVBO01BQVEsRUFBRyxDQUNoQztNQUZPVyxjQUFjLEdBQUFNLEtBQUEsQ0FBZE4sY0FBYztNQUFFTyxTQUFTLEdBQUFELEtBQUEsQ0FBVEMsU0FBUztJQUdqQyxJQUFNQyxnQkFBZ0IsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDN0NBLGdCQUFnQixDQUFDQyxPQUFPLENBQUMsVUFBQ0MsVUFBVSxFQUFJO01BQ3RDLElBQU1DLFFBQVEsR0FBR0osU0FBUyxDQUFDRyxVQUFVLENBQUNFLFFBQVEsRUFBRSxDQUFDO01BQ2pEVCxNQUFNLENBQUNRLFFBQVEsQ0FBQyxDQUFDRSxVQUFVLEVBQUU7SUFDL0IsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=