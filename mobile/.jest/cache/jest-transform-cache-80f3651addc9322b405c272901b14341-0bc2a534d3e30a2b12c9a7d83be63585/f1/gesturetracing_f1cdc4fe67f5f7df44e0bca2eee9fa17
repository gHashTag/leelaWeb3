60887a29318dcb4a1ad2543aa519d665
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GESTURE_POSTFIX_LENGTH = exports.DEFAULT_BREADCRUMB_TYPE = exports.DEFAULT_BREADCRUMB_CATEGORY = exports.ACTION_GESTURE_FALLBACK = void 0;
exports.sentryTraceGesture = sentryTraceGesture;
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var _ops = require("./ops");
var _reactnativetracing = require("./reactnativetracing");
var DEFAULT_BREADCRUMB_CATEGORY = 'gesture';
exports.DEFAULT_BREADCRUMB_CATEGORY = DEFAULT_BREADCRUMB_CATEGORY;
var DEFAULT_BREADCRUMB_TYPE = 'user';
exports.DEFAULT_BREADCRUMB_TYPE = DEFAULT_BREADCRUMB_TYPE;
var GESTURE_POSTFIX_LENGTH = 'GestureHandler'.length;
exports.GESTURE_POSTFIX_LENGTH = GESTURE_POSTFIX_LENGTH;
var ACTION_GESTURE_FALLBACK = 'gesture';
exports.ACTION_GESTURE_FALLBACK = ACTION_GESTURE_FALLBACK;
function sentryTraceGesture(label, gesture) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _a;
  var gestureCandidate = gesture;
  if (!gestureCandidate) {
    _utils.logger.warn('[GestureTracing] Gesture can not be undefined');
    return gesture;
  }
  if (!gestureCandidate.handlers) {
    _utils.logger.warn('[GestureTracing] Can not wrap gesture without handlers. If you want to wrap a gesture composition wrap individual gestures.');
    return gesture;
  }
  if (!label) {
    _utils.logger.warn('[GestureTracing] Can not wrap gesture without name.');
    return gesture;
  }
  var hub = ((_a = options.getCurrentHub) === null || _a === void 0 ? void 0 : _a.call(options)) || (0, _core.getCurrentHub)();
  var name = gestureCandidate.handlerName.length > GESTURE_POSTFIX_LENGTH ? gestureCandidate.handlerName.substring(0, gestureCandidate.handlerName.length - GESTURE_POSTFIX_LENGTH).toLowerCase() : ACTION_GESTURE_FALLBACK;
  var originalOnBegin = gestureCandidate.handlers.onBegin;
  gesture.handlers.onBegin = function (event) {
    var _a, _b;
    (_b = (_a = hub.getClient()) === null || _a === void 0 ? void 0 : _a.getIntegration(_reactnativetracing.ReactNativeTracing)) === null || _b === void 0 ? void 0 : _b.startUserInteractionTransaction({
      elementId: label,
      op: `${_ops.UI_ACTION}.${name}`
    });
    addGestureBreadcrumb(`Gesture ${label} begin.`, {
      event: event,
      hub: hub,
      name: name
    });
    if (originalOnBegin) {
      originalOnBegin(event);
    }
  };
  var originalOnEnd = gestureCandidate.handlers.onEnd;
  gesture.handlers.onEnd = function (event) {
    addGestureBreadcrumb(`Gesture ${label} end.`, {
      event: event,
      hub: hub,
      name: name
    });
    if (originalOnEnd) {
      originalOnEnd(event);
    }
  };
  return gesture;
}
function addGestureBreadcrumb(message, options) {
  var event = options.event,
    hub = options.hub,
    name = options.name;
  var crumb = {
    message: message,
    level: 'info',
    type: DEFAULT_BREADCRUMB_TYPE,
    category: DEFAULT_BREADCRUMB_CATEGORY
  };
  if (event) {
    var data = {
      gesture: name
    };
    for (var key of Object.keys(GestureEventKeys)) {
      var eventKey = GestureEventKeys[key];
      if (eventKey in event) {
        data[eventKey] = event[eventKey];
      }
    }
    crumb.data = data;
  }
  hub.addBreadcrumb(crumb);
  _utils.logger.log(`[GestureTracing] ${crumb.message}`);
}
var GestureEventKeys = {
  NUMBER_OF_POINTERS: 'numberOfPointers',
  NUMBER_OF_TOUCHES: 'numberOfTouches',
  FORCE: 'force',
  FORCE_CHANGE: 'forceChange',
  ROTATION: 'rotation',
  ROTATION_CHANGE: 'rotationChange',
  SCALE: 'scale',
  SCALE_CHANGE: 'scaleChange',
  DURATION: 'duration',
  VELOCITY: 'velocity',
  VELOCITY_X: 'velocityX',
  VELOCITY_Y: 'velocityY'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,