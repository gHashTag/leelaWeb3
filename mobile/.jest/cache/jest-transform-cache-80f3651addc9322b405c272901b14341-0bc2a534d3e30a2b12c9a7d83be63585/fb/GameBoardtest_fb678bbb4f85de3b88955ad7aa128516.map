{"version":3,"names":["react_1","__importDefault","require","react_native_1","react_native_2","__1","players","id","plan","avatar","describe","test","_asyncToGenerator2","default","_ref2","render","_jsxRuntime","jsx","GameBoard","queryByTestId","waitFor","forEach","player","playerGemImage","expect","toBeTruthy","_playerGemImage$findB","_playerGemImage$findB2","_playerGemImage$findB3","findByType","Image","props","source","uri","toEqual","_ref4","_playerGemImage$props","_playerGemImage$props2"],"sources":["/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx"],"sourcesContent":["import React from 'react'\n\nimport { Image } from 'react-native'\n\nimport { render, waitFor } from '@testing-library/react-native'\nimport { Player } from 'types'\n\nimport { GameBoard } from '../'\n\nconst players: Player[] = [\n  {\n    id: 2,\n    plan: 72,\n    avatar: 106,\n  },\n  {\n    id: 4,\n    plan: 34,\n    avatar:\n      'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/',\n  },\n]\n\ndescribe('GameBoard Component', () => {\n  test('should render correct player avatars', async () => {\n    const { queryByTestId } = render(<GameBoard players={players} />)\n\n    await waitFor(() => {\n      players.forEach((player) => {\n        const playerGemImage = queryByTestId(`gem-${player.id}`)\n        expect(playerGemImage).toBeTruthy()\n\n        if (typeof player.avatar === 'string') {\n          expect(playerGemImage?.findByType(Image)?.props?.source?.uri).toEqual(\n            player.avatar,\n          )\n        }\n      })\n    })\n  })\n  // test('should render the correct number of Gem components based on the players prop', () => {\n  //   const { getAllByTestId } = render(<GameBoard players={players} />)\n  //   const gemComponents = getAllByTestId('gem-container')\n  //   const playerGemImages = getAllByTestId('player-gem-image')\n  //   expect(playerGemImages.length).toEqual(2) // Проверка на 2 игрока\n  //   expect(gemComponents.length).toEqual(72) // Проверка на общее количество компонентов Gem\n  // })\n\n  test('should render correct player avatars', async () => {\n    const { queryByTestId } = render(<GameBoard players={players} />)\n\n    await waitFor(() => {\n      players.forEach((player) => {\n        const playerGemImage = queryByTestId(`gem-${player.id}`)\n        expect(playerGemImage).toBeTruthy()\n        if (typeof player.avatar === 'string') {\n          expect(playerGemImage?.props?.source?.uri).toEqual(player.avatar)\n        }\n      })\n    })\n  })\n})\n\n// test('should render player avatars', () => {\n//   const { getByTestId } = render(<GameBoard players={players} />)\n\n//   players.forEach((player) => {\n//     const gemImage = getByTestId(`gem-${player.id}`)\n//     expect(gemImage).toBeTruthy()\n//   })\n// })\n\n// test('should render the correct number of Gem components based on the players prop', () => {\n//   const { getAllByTestId } = render(<GameBoard players={players} />)\n\n//   const gemComponents = getAllByTestId(/^gem-\\d+$/)\n//   expect(gemComponents.length).toEqual(72) // Общее количество Gem компонентов без пустых ячеек\n// })\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AAEA,IAAAE,cAAA,GAAAF,OAAA;AAGA,IAAAG,GAAA,GAAAH,OAAA;AAEA,IAAMI,OAAO,GAAa,CACxB;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE;CACT,EACD;EACEF,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,EAAE;EACRC,MAAM,EACJ;CACH,CACF;AAEDC,QAAQ,CAAC,qBAAqB,EAAE,YAAK;EACnCC,IAAI,CAAC,sCAAsC,MAAAC,kBAAA,CAAAC,OAAA,EAAE,aAAW;IACtD,IAAAC,KAAA,GAA0B,IAAAV,cAAA,CAAAW,MAAM,EAAC,IAAAC,WAAA,CAAAC,GAAA,EAACZ,GAAA,CAAAa,SAAS;QAACZ,OAAO,EAAEA;MAAQ,EAAG,CAAC;MAAzDa,aAAa,GAAAL,KAAA,CAAbK,aAAa;IAErB,MAAM,IAAAf,cAAA,CAAAgB,OAAO,EAAC,YAAK;MACjBd,OAAO,CAACe,OAAO,CAAC,UAACC,MAAM,EAAI;QACzB,IAAMC,cAAc,GAAGJ,aAAa,CAAC,OAAOG,MAAM,CAACf,EAAE,EAAE,CAAC;QACxDiB,MAAM,CAACD,cAAc,CAAC,CAACE,UAAU,EAAE;QAEnC,IAAI,OAAOH,MAAM,CAACb,MAAM,KAAK,QAAQ,EAAE;UAAA,IAAAiB,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;UACrCJ,MAAM,CAACD,cAAc,qBAAAG,qBAAA,GAAdH,cAAc,CAAEM,UAAU,CAAC1B,cAAA,CAAA2B,KAAK,CAAC,sBAAAH,sBAAA,GAAjCD,qBAAA,CAAmCK,KAAK,sBAAAH,sBAAA,GAAxCD,sBAAA,CAA0CK,MAAM,qBAAhDJ,sBAAA,CAAkDK,GAAG,CAAC,CAACC,OAAO,CACnEZ,MAAM,CAACb,MAAM,CACd;;MAEL,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAC;EASFE,IAAI,CAAC,sCAAsC,MAAAC,kBAAA,CAAAC,OAAA,EAAE,aAAW;IACtD,IAAAsB,KAAA,GAA0B,IAAA/B,cAAA,CAAAW,MAAM,EAAC,IAAAC,WAAA,CAAAC,GAAA,EAACZ,GAAA,CAAAa,SAAS;QAACZ,OAAO,EAAEA;MAAQ,EAAG,CAAC;MAAzDa,aAAa,GAAAgB,KAAA,CAAbhB,aAAa;IAErB,MAAM,IAAAf,cAAA,CAAAgB,OAAO,EAAC,YAAK;MACjBd,OAAO,CAACe,OAAO,CAAC,UAACC,MAAM,EAAI;QACzB,IAAMC,cAAc,GAAGJ,aAAa,CAAC,OAAOG,MAAM,CAACf,EAAE,EAAE,CAAC;QACxDiB,MAAM,CAACD,cAAc,CAAC,CAACE,UAAU,EAAE;QACnC,IAAI,OAAOH,MAAM,CAACb,MAAM,KAAK,QAAQ,EAAE;UAAA,IAAA2B,qBAAA,EAAAC,sBAAA;UACrCb,MAAM,CAACD,cAAc,qBAAAa,qBAAA,GAAdb,cAAc,CAAEQ,KAAK,sBAAAM,sBAAA,GAArBD,qBAAA,CAAuBJ,MAAM,qBAA7BK,sBAAA,CAA+BJ,GAAG,CAAC,CAACC,OAAO,CAACZ,MAAM,CAACb,MAAM,CAAC;;MAErE,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAC;AACJ,CAAC,CAAC"}