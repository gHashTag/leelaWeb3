{"version":3,"names":["_utils","require","_wrapper","_utils2","MARGIN_OF_ERROR_SECONDS","NativeFramesInstrumentation","addGlobalEventProcessor","doesExist","_this","_classCallCheck2","default","_finishFrames","Map","_framesListeners","logger","log","event","_processEvent","_createClass2","key","value","onTransactionStart","transaction","_this2","NATIVE","fetchNativeFrames","then","framesMetrics","setData","undefined","error","instrumentChildSpanFinish","_","endTimestamp","_onSpanFinish","onTransactionFinish","_fetchFramesForTransaction","_this3","timestamp","timestampInSeconds","nativeFrames","_lastSpanFinishFrames","_getFramesMeasurements","traceId","finalEndTimestamp","startFrames","has","_prepareMeasurements","Promise","resolve","timeout","setTimeout","_this4","delete","set","clearTimeout","finalFinishFrames","finish","get","Math","abs","measurements","frames_total","totalFrames","unit","frames_frozen","frozenFrames","frames_slow","slowFrames","data","__startFrames","finishFrames","_a","_this5","_cancelFinishFrames","op","name","type","contexts","trace","traceContext","trace_id","JSON","stringify","Object","assign","_b","exports"],"sources":["../../../src/js/tracing/nativeframes.ts"],"sourcesContent":["import type { Span, Transaction } from '@sentry/core';\nimport type { Event, EventProcessor, Measurements, MeasurementUnit } from '@sentry/types';\nimport { logger, timestampInSeconds } from '@sentry/utils';\n\nimport type { NativeFramesResponse } from '../NativeRNSentry';\nimport { NATIVE } from '../wrapper';\nimport { instrumentChildSpanFinish } from './utils';\n\nexport interface FramesMeasurements extends Measurements {\n  frames_total: { value: number; unit: MeasurementUnit };\n  frames_slow: { value: number; unit: MeasurementUnit };\n  frames_frozen: { value: number; unit: MeasurementUnit };\n}\n\n/**\n * A margin of error of 50ms is allowed for the async native bridge call.\n * Anything larger would reduce the accuracy of our frames measurements.\n */\nconst MARGIN_OF_ERROR_SECONDS = 0.05;\n\n/**\n * Instrumentation to add native slow/frozen frames measurements onto transactions.\n */\nexport class NativeFramesInstrumentation {\n  /** The native frames at the transaction finish time, keyed by traceId. */\n  private _finishFrames: Map<string, { timestamp: number; nativeFrames: NativeFramesResponse | null }> = new Map();\n  /** The listeners for each native frames response, keyed by traceId */\n  private _framesListeners: Map<string, () => void> = new Map();\n  /** The native frames at the finish time of the most recent span. */\n  private _lastSpanFinishFrames?: {\n    timestamp: number;\n    nativeFrames: NativeFramesResponse;\n  };\n\n  public constructor(addGlobalEventProcessor: (e: EventProcessor) => void, doesExist: () => boolean) {\n    logger.log('[ReactNativeTracing] Native frames instrumentation initialized.');\n\n    addGlobalEventProcessor(event => this._processEvent(event, doesExist));\n  }\n\n  /**\n   * To be called when a transaction is started.\n   * Logs the native frames at this start point and instruments child span finishes.\n   */\n  public onTransactionStart(transaction: Transaction): void {\n    void NATIVE.fetchNativeFrames()\n      .then(framesMetrics => {\n        if (framesMetrics) {\n          transaction.setData('__startFrames', framesMetrics);\n        }\n      })\n      .then(undefined, error => {\n        logger.error(`[ReactNativeTracing] Error while fetching native frames: ${error}`);\n      });\n\n    instrumentChildSpanFinish(transaction, (_: Span, endTimestamp?: number) => {\n      if (!endTimestamp) {\n        this._onSpanFinish();\n      }\n    });\n  }\n\n  /**\n   * To be called when a transaction is finished\n   */\n  public onTransactionFinish(transaction: Transaction): void {\n    void this._fetchFramesForTransaction(transaction);\n  }\n\n  /**\n   * Called on a span finish to fetch native frames to support transactions with trimEnd.\n   * Only to be called when a span does not have an end timestamp.\n   */\n  private _onSpanFinish(): void {\n    const timestamp = timestampInSeconds();\n\n    void NATIVE.fetchNativeFrames()\n      .then(nativeFrames => {\n        if (nativeFrames) {\n          this._lastSpanFinishFrames = {\n            timestamp,\n            nativeFrames,\n          };\n        }\n      })\n      .then(undefined, error => {\n        logger.error(`[ReactNativeTracing] Error while fetching native frames: ${error}`);\n      });\n  }\n\n  /**\n   * Returns the computed frames measurements and awaits for them if they are not ready yet.\n   */\n  private async _getFramesMeasurements(\n    traceId: string,\n    finalEndTimestamp: number,\n    startFrames: NativeFramesResponse,\n  ): Promise<FramesMeasurements | null> {\n    if (this._finishFrames.has(traceId)) {\n      return this._prepareMeasurements(traceId, finalEndTimestamp, startFrames);\n    }\n\n    return new Promise(resolve => {\n      const timeout = setTimeout(() => {\n        this._framesListeners.delete(traceId);\n\n        resolve(null);\n      }, 2000);\n\n      this._framesListeners.set(traceId, () => {\n        resolve(this._prepareMeasurements(traceId, finalEndTimestamp, startFrames));\n\n        clearTimeout(timeout);\n        this._framesListeners.delete(traceId);\n      });\n    });\n  }\n\n  /**\n   * Returns the computed frames measurements given ready data\n   */\n  private _prepareMeasurements(\n    traceId: string,\n    finalEndTimestamp: number, // The actual transaction finish time.\n    startFrames: NativeFramesResponse,\n  ): FramesMeasurements | null {\n    let finalFinishFrames: NativeFramesResponse | undefined;\n\n    const finish = this._finishFrames.get(traceId);\n    if (\n      finish &&\n      finish.nativeFrames &&\n      // Must be in the margin of error of the actual transaction finish time (finalEndTimestamp)\n      Math.abs(finish.timestamp - finalEndTimestamp) < MARGIN_OF_ERROR_SECONDS\n    ) {\n      finalFinishFrames = finish.nativeFrames;\n    } else if (\n      this._lastSpanFinishFrames &&\n      Math.abs(this._lastSpanFinishFrames.timestamp - finalEndTimestamp) < MARGIN_OF_ERROR_SECONDS\n    ) {\n      // Fallback to the last span finish if it is within the margin of error of the actual finish timestamp.\n      // This should be the case for trimEnd.\n      finalFinishFrames = this._lastSpanFinishFrames.nativeFrames;\n    } else {\n      return null;\n    }\n\n    const measurements = {\n      frames_total: {\n        value: finalFinishFrames.totalFrames - startFrames.totalFrames,\n        unit: 'none',\n      },\n      frames_frozen: {\n        value: finalFinishFrames.frozenFrames - startFrames.frozenFrames,\n        unit: 'none',\n      },\n      frames_slow: {\n        value: finalFinishFrames.slowFrames - startFrames.slowFrames,\n        unit: 'none',\n      },\n    };\n\n    return measurements;\n  }\n\n  /**\n   * Fetch finish frames for a transaction at the current time. Calls any awaiting listeners.\n   */\n  private async _fetchFramesForTransaction(transaction: Transaction): Promise<void> {\n    const startFrames = transaction.data.__startFrames as NativeFramesResponse | undefined;\n\n    // This timestamp marks when the finish frames were retrieved. It should be pretty close to the transaction finish.\n    const timestamp = timestampInSeconds();\n    let finishFrames: NativeFramesResponse | null = null;\n    if (startFrames) {\n      finishFrames = await NATIVE.fetchNativeFrames();\n    }\n\n    this._finishFrames.set(transaction.traceId, {\n      nativeFrames: finishFrames,\n      timestamp,\n    });\n\n    this._framesListeners.get(transaction.traceId)?.();\n\n    setTimeout(() => this._cancelFinishFrames(transaction), 2000);\n  }\n\n  /**\n   * On a finish frames failure, we cancel the await.\n   */\n  private _cancelFinishFrames(transaction: Transaction): void {\n    if (this._finishFrames.has(transaction.traceId)) {\n      this._finishFrames.delete(transaction.traceId);\n\n      logger.log(\n        `[NativeFrames] Native frames timed out for ${transaction.op} transaction ${transaction.name}. Not adding native frames measurements.`,\n      );\n    }\n  }\n\n  /**\n   * Adds frames measurements to an event. Called from a valid event processor.\n   * Awaits for finish frames if needed.\n   */\n  private async _processEvent(event: Event, doesExist: () => boolean): Promise<Event> {\n    if (!doesExist()) {\n      return event;\n    }\n\n    if (event.type === 'transaction' && event.transaction && event.contexts && event.contexts.trace) {\n      const traceContext = event.contexts.trace as {\n        data?: { [key: string]: unknown };\n        trace_id: string;\n        name?: string;\n        op?: string;\n      };\n\n      const traceId = traceContext.trace_id;\n\n      if (traceId && traceContext.data?.__startFrames && event.timestamp) {\n        const measurements = await this._getFramesMeasurements(\n          traceId,\n          event.timestamp,\n          traceContext.data.__startFrames as NativeFramesResponse,\n        );\n\n        if (!measurements) {\n          logger.log(\n            `[NativeFrames] Could not fetch native frames for ${traceContext.op} transaction ${event.transaction}. Not adding native frames measurements.`,\n          );\n        } else {\n          logger.log(\n            `[Measurements] Adding measurements to ${traceContext.op} transaction ${\n              event.transaction\n            }: ${JSON.stringify(measurements, undefined, 2)}`,\n          );\n\n          event.measurements = {\n            ...(event.measurements ?? {}),\n            ...measurements,\n          };\n\n          this._finishFrames.delete(traceId);\n        }\n\n        delete traceContext.data.__startFrames;\n      }\n    }\n\n    return event;\n  }\n}\n"],"mappings":"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"}