58a1e00cb288eb95a56b69659d552720
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockProps;
  beforeEach(function () {
    mockProps = {
      count: 1,
      players: 2,
      disabled: false,
      canGo: true,
      isReported: false,
      updateStep: jest.fn(),
      random: jest.fn()
    };
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the random function and updateStep on press when not disabled', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).toHaveBeenCalledTimes(1);
    expect(mockProps.updateStep).toHaveBeenCalledTimes(1);
  });
  it('does not call the random function and updateStep on press when disabled', function () {
    mockProps.disabled = true;
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref3.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).not.toHaveBeenCalled();
    expect(mockProps.updateStep).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIl8xIiwiZGVzY3JpYmUiLCJtb2NrUHJvcHMiLCJiZWZvcmVFYWNoIiwiY291bnQiLCJwbGF5ZXJzIiwiZGlzYWJsZWQiLCJjYW5HbyIsImlzUmVwb3J0ZWQiLCJ1cGRhdGVTdGVwIiwiZm4iLCJyYW5kb20iLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0IiwiX3JlZiIsInJlbmRlciIsImpzeCIsIkRpY2UiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiX3JlZjIiLCJhY3QiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInJ1bkFsbFRpbWVycyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZWYzIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvRGljZS9EaWNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnQsIGFjdH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQge0RpY2UsIERpY2VQcm9wc30gZnJvbSAnLi8nXG5cbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbmltYXRlZC9OYXRpdmVBbmltYXRlZEhlbHBlcicpXG5qZXN0Lm1vY2soJy4vQW5pbWF0ZWQnLCAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCcuL0FuaW1hdGVkJyksXG4gICAgY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQ6IChjb21wb25lbnQ6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFxuICAgIH0sXG4gIH1cbn0pXG5cbmRlc2NyaWJlKCdEaWNlIENvbXBvbmVudCcsICgpID0+IHtcbiAgbGV0IG1vY2tQcm9wczogRGljZVByb3BzXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG1vY2tQcm9wcyA9IHtcbiAgICAgIGNvdW50OiAxLFxuICAgICAgcGxheWVyczogMixcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgIGNhbkdvOiB0cnVlLFxuICAgICAgaXNSZXBvcnRlZDogZmFsc2UsXG4gICAgICB1cGRhdGVTdGVwOiBqZXN0LmZuKCksXG4gICAgICByYW5kb206IGplc3QuZm4oKSxcbiAgICB9XG4gICAgamVzdC51c2VGYWtlVGltZXJzKClcbiAgfSlcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpXG4gIH0pXG5cbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggdGhlIHByb3ZpZGVkIHByb3BzJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gLz4pXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKS50b0JlRGVmaW5lZCgpXG4gIH0pXG5cbiAgaXQoJ2NhbGxzIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBub3QgZGlzYWJsZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpXG4gICAgfSlcblxuICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgICBleHBlY3QobW9ja1Byb3BzLnVwZGF0ZVN0ZXApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICB9KVxuXG4gIGl0KCdkb2VzIG5vdCBjYWxsIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBtb2NrUHJvcHMuZGlzYWJsZWQgPSB0cnVlXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpXG4gICAgfSlcblxuICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOztBQUlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzREFBc0QsQ0FBQztBQUNqRUQsV0FBQSxHQUFLQyxJQUFJLENBQUMsWUFBWSxFQUFFLFlBQUs7RUFDM0IsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLFlBQVksQ0FBQztJQUNuQ0MsdUJBQXVCLEVBQUUsU0FBQUEsd0JBQUNDLFNBQWMsRUFBSTtNQUMxQyxPQUFPQSxTQUFTO0lBQ2xCO0VBQUM7QUFFTCxDQUFDLENBQUM7QUFBQSxJQUFBQyxXQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxLQUFBO0VBQUFDLFlBQUE7QUFBQSxTQUFBWCxZQUFBO0VBQUEsSUFBQVksUUFBQSxHQUFBSCxPQUFBO0lBQUFMLElBQUEsR0FBQVEsUUFBQSxDQUFBUixJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTs7Ozs7Ozs7O0FBWkYsSUFBQVMsT0FBQSxHQUFBQyxlQUFBLENBQUFMLE9BQUE7QUFDQSxJQUFBTSxjQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxFQUFBLEdBQUFQLE9BQUE7QUFZQVEsUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQUs7RUFDOUIsSUFBSUMsU0FBb0I7RUFDeEJDLFVBQVUsQ0FBQyxZQUFLO0lBQ2RELFNBQVMsR0FBRztNQUNWRSxLQUFLLEVBQUUsQ0FBQztNQUNSQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxRQUFRLEVBQUUsS0FBSztNQUNmQyxLQUFLLEVBQUUsSUFBSTtNQUNYQyxVQUFVLEVBQUUsS0FBSztNQUNqQkMsVUFBVSxFQUFFckIsSUFBSSxDQUFDc0IsRUFBRSxFQUFFO01BQ3JCQyxNQUFNLEVBQUV2QixJQUFJLENBQUNzQixFQUFFO0tBQ2hCO0lBQ0R0QixJQUFJLENBQUN3QixhQUFhLEVBQUU7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLFNBQVMsQ0FBQyxZQUFLO0lBQ2J6QixJQUFJLENBQUMwQixhQUFhLEVBQUU7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQywyQ0FBMkMsRUFBRSxZQUFLO0lBQ25ELElBQUFDLElBQUEsR0FBc0IsSUFBQWpCLGNBQUEsQ0FBQWtCLE1BQU0sRUFBQyxJQUFBekIsV0FBQSxDQUFBMEIsR0FBQSxFQUFDbEIsRUFBQSxDQUFBbUIsSUFBSSxFQUFBakMsTUFBQSxDQUFBQyxNQUFBLEtBQUtlLFNBQVMsQ0FBQyxDQUFHLENBQUM7TUFBOUNrQixXQUFXLEdBQUFKLElBQUEsQ0FBWEksV0FBVztJQUNsQkMsTUFBTSxDQUFDRCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDRSxXQUFXLEVBQUU7RUFDckQsQ0FBQyxDQUFDO0VBRUZQLEVBQUUsQ0FBQyxxRUFBcUUsRUFBRSxZQUFLO0lBQzdFLElBQUFRLEtBQUEsR0FBc0IsSUFBQXhCLGNBQUEsQ0FBQWtCLE1BQU0sRUFBQyxJQUFBekIsV0FBQSxDQUFBMEIsR0FBQSxFQUFDbEIsRUFBQSxDQUFBbUIsSUFBSSxFQUFBakMsTUFBQSxDQUFBQyxNQUFBLEtBQUtlLFNBQVMsQ0FBQyxDQUFHLENBQUM7TUFBOUNrQixXQUFXLEdBQUFHLEtBQUEsQ0FBWEgsV0FBVztJQUVsQixJQUFBckIsY0FBQSxDQUFBeUIsR0FBRyxFQUFDLFlBQUs7TUFDUHpCLGNBQUEsQ0FBQTBCLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDTixXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztNQUM5Q2hDLElBQUksQ0FBQ3VDLFlBQVksRUFBRTtJQUNyQixDQUFDLENBQUM7SUFFRk4sTUFBTSxDQUFDbkIsU0FBUyxDQUFDUyxNQUFNLENBQUMsQ0FBQ2lCLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUNqRFAsTUFBTSxDQUFDbkIsU0FBUyxDQUFDTyxVQUFVLENBQUMsQ0FBQ21CLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUN2RCxDQUFDLENBQUM7RUFFRmIsRUFBRSxDQUFDLHlFQUF5RSxFQUFFLFlBQUs7SUFDakZiLFNBQVMsQ0FBQ0ksUUFBUSxHQUFHLElBQUk7SUFDekIsSUFBQXVCLEtBQUEsR0FBc0IsSUFBQTlCLGNBQUEsQ0FBQWtCLE1BQU0sRUFBQyxJQUFBekIsV0FBQSxDQUFBMEIsR0FBQSxFQUFDbEIsRUFBQSxDQUFBbUIsSUFBSSxFQUFBakMsTUFBQSxDQUFBQyxNQUFBLEtBQUtlLFNBQVMsQ0FBQyxDQUFHLENBQUM7TUFBOUNrQixXQUFXLEdBQUFTLEtBQUEsQ0FBWFQsV0FBVztJQUVsQixJQUFBckIsY0FBQSxDQUFBeUIsR0FBRyxFQUFDLFlBQUs7TUFDUHpCLGNBQUEsQ0FBQTBCLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDTixXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztNQUM5Q2hDLElBQUksQ0FBQ3VDLFlBQVksRUFBRTtJQUNyQixDQUFDLENBQUM7SUFFRk4sTUFBTSxDQUFDbkIsU0FBUyxDQUFDUyxNQUFNLENBQUMsQ0FBQ21CLEdBQUcsQ0FBQ0MsZ0JBQWdCLEVBQUU7SUFDL0NWLE1BQU0sQ0FBQ25CLFNBQVMsQ0FBQ08sVUFBVSxDQUFDLENBQUNxQixHQUFHLENBQUNDLGdCQUFnQixFQUFFO0VBQ3JELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9