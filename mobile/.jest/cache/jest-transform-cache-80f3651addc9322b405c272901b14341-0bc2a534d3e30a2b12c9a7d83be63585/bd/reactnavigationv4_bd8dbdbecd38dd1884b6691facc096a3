3a1fd0b322f96809a15cf6bb015e999b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNavigationV4Instrumentation = exports.INITIAL_TRANSACTION_CONTEXT_V4 = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _utils = require("@sentry/utils");
var _worldwide = require("../utils/worldwide");
var _routingInstrumentation = require("./routingInstrumentation");
var _utils2 = require("./utils");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var defaultOptions = {
  routeChangeTimeoutMs: 1000
};
var ReactNavigationV4Instrumentation = function (_InternalRoutingInstr) {
  (0, _inherits2.default)(ReactNavigationV4Instrumentation, _InternalRoutingInstr);
  var _super = _createSuper(ReactNavigationV4Instrumentation);
  function ReactNavigationV4Instrumentation() {
    var _this;
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, ReactNavigationV4Instrumentation);
    _this = _super.call(this);
    _this.name = ReactNavigationV4Instrumentation.instrumentationName;
    _this._appContainer = null;
    _this._maxRecentRouteLen = 200;
    _this._recentRouteKeys = [];
    _this._initialStateHandled = false;
    _this._pushRecentRouteKey = function (key) {
      _this._recentRouteKeys.push(key);
      if (_this._recentRouteKeys.length > _this._maxRecentRouteLen) {
        _this._recentRouteKeys = _this._recentRouteKeys.slice(_this._recentRouteKeys.length - _this._maxRecentRouteLen);
      }
    };
    _this._onBeforeNavigateNotSampled = function (transactionName) {
      _utils.logger.log(`[ReactNavigationV4Instrumentation] Will not send transaction "${transactionName}" due to beforeNavigate.`);
    };
    _this._options = Object.assign(Object.assign({}, defaultOptions), options);
    return _this;
  }
  (0, _createClass2.default)(ReactNavigationV4Instrumentation, [{
    key: "registerRoutingInstrumentation",
    value: function registerRoutingInstrumentation(listener, beforeNavigate, onConfirmRoute) {
      (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNavigationV4Instrumentation.prototype), "registerRoutingInstrumentation", this).call(this, listener, beforeNavigate, onConfirmRoute);
      if (!this._initialStateHandled) {
        this._latestTransaction = this.onRouteWillChange(INITIAL_TRANSACTION_CONTEXT_V4);
        if (this._appContainer) {
          this._updateLatestTransaction();
          this._initialStateHandled = true;
        } else {
          this._stateChangeTimeout = setTimeout(this._discardLatestTransaction.bind(this), this._options.routeChangeTimeoutMs);
        }
      }
    }
  }, {
    key: "registerAppContainer",
    value: function registerAppContainer(appContainerRef) {
      if (!_worldwide.RN_GLOBAL_OBJ.__sentry_rn_v4_registered) {
        if ('current' in appContainerRef) {
          this._appContainer = appContainerRef.current;
        } else {
          this._appContainer = appContainerRef;
        }
        if (this._appContainer) {
          this._patchRouter();
          if (!this._initialStateHandled) {
            if (this._latestTransaction) {
              this._updateLatestTransaction();
            } else {
              _utils.logger.log('[ReactNavigationV4Instrumentation] App container registered, but integration has not been setup yet.');
            }
            this._initialStateHandled = true;
          }
          _worldwide.RN_GLOBAL_OBJ.__sentry_rn_v4_registered = true;
        } else {
          _utils.logger.warn('[ReactNavigationV4Instrumentation] Received invalid app container ref!');
        }
      }
    }
  }, {
    key: "_updateLatestTransaction",
    value: function _updateLatestTransaction() {
      if (this._appContainer && this._latestTransaction) {
        var state = this._appContainer._navigation.state;
        if (typeof this._stateChangeTimeout !== 'undefined') {
          clearTimeout(this._stateChangeTimeout);
          this._stateChangeTimeout = undefined;
        }
        this._onStateChange(state, true);
      }
    }
  }, {
    key: "_patchRouter",
    value: function _patchRouter() {
      var _this2 = this;
      if (this._appContainer) {
        var originalGetStateForAction = this._appContainer._navigation.router.getStateForAction;
        this._appContainer._navigation.router.getStateForAction = function (action, state) {
          var newState = originalGetStateForAction(action, state);
          _this2._onStateChange(newState);
          return newState;
        };
      }
    }
  }, {
    key: "_onStateChange",
    value: function _onStateChange(state) {
      var updateLatestTransaction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var _a;
      if (!state || state === undefined) {
        _utils.logger.warn('[ReactNavigationV4Instrumentation] onStateChange called without a valid state.');
        return;
      }
      var currentRoute = this._getCurrentRouteFromState(state);
      if (!this._prevRoute || currentRoute.key !== this._prevRoute.key) {
        var originalContext = this._getTransactionContext(currentRoute, this._prevRoute);
        var mergedContext = originalContext;
        if (updateLatestTransaction && this._latestTransaction) {
          mergedContext = Object.assign(Object.assign({}, this._latestTransaction.toContext()), originalContext);
        }
        var finalContext = this._prepareFinalContext(mergedContext);
        if (updateLatestTransaction && this._latestTransaction) {
          this._latestTransaction.updateWithContext(finalContext);
          var isCustomName = mergedContext.name !== finalContext.name;
          this._latestTransaction.setName(finalContext.name, isCustomName ? _utils2.customTransactionSource : _utils2.defaultTransactionSource);
        } else {
          this._latestTransaction = this.onRouteWillChange(finalContext);
        }
        (_a = this._onConfirmRoute) === null || _a === void 0 ? void 0 : _a.call(this, finalContext);
        this._pushRecentRouteKey(currentRoute.key);
        this._prevRoute = currentRoute;
      }
    }
  }, {
    key: "_prepareFinalContext",
    value: function _prepareFinalContext(mergedContext) {
      var _a;
      var finalContext = (_a = this._beforeNavigate) === null || _a === void 0 ? void 0 : _a.call(this, Object.assign({}, mergedContext));
      if (!finalContext) {
        _utils.logger.error(`[ReactNavigationV4Instrumentation] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`);
        finalContext = Object.assign(Object.assign({}, mergedContext), {
          sampled: false
        });
      }
      if (finalContext.sampled === false) {
        this._onBeforeNavigateNotSampled(finalContext.name);
      }
      return finalContext;
    }
  }, {
    key: "_getTransactionContext",
    value: function _getTransactionContext(route, previousRoute) {
      var _a, _b;
      var data = {
        route: {
          name: route.routeName,
          key: route.key,
          params: (_a = route.params) !== null && _a !== void 0 ? _a : {},
          hasBeenSeen: this._recentRouteKeys.includes(route.key)
        },
        previousRoute: previousRoute ? {
          name: previousRoute.routeName,
          key: previousRoute.key,
          params: (_b = previousRoute.params) !== null && _b !== void 0 ? _b : {}
        } : null
      };
      return {
        name: route.routeName,
        op: 'navigation',
        tags: {
          'routing.instrumentation': ReactNavigationV4Instrumentation.instrumentationName,
          'routing.route.name': route.routeName
        },
        data: data
      };
    }
  }, {
    key: "_getCurrentRouteFromState",
    value: function _getCurrentRouteFromState(state) {
      var parentRoute = state.routes[state.index];
      if ('index' in parentRoute && 'routes' in parentRoute && typeof parentRoute.index === 'number' && Array.isArray(parentRoute.routes)) {
        return this._getCurrentRouteFromState(parentRoute);
      }
      return parentRoute;
    }
  }, {
    key: "_discardLatestTransaction",
    value: function _discardLatestTransaction() {
      if (this._latestTransaction) {
        this._latestTransaction.sampled = false;
        this._latestTransaction.finish();
        this._latestTransaction = undefined;
      }
    }
  }]);
  return ReactNavigationV4Instrumentation;
}(_routingInstrumentation.InternalRoutingInstrumentation);
exports.ReactNavigationV4Instrumentation = ReactNavigationV4Instrumentation;
ReactNavigationV4Instrumentation.instrumentationName = 'react-navigation-v4';
var INITIAL_TRANSACTION_CONTEXT_V4 = {
  name: 'App Launch',
  op: 'navigation',
  tags: {
    'routing.instrumentation': ReactNavigationV4Instrumentation.instrumentationName
  },
  data: {},
  metadata: {
    source: 'view'
  }
};
exports.INITIAL_TRANSACTION_CONTEXT_V4 = INITIAL_TRANSACTION_CONTEXT_V4;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,