482dd2cbf95a65fc45dc138da54b6f66
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx";
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GameBoard = void 0;
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var components_1 = require("./..");
var cons_1 = require("../../cons");
var react_native_size_matters_1 = require("react-native-size-matters");
var images_1 = require("./images");
var Gem_1 = require("../Gem/Gem");
var marginTop = cons_1.H - cons_1.W > 350 ? 20 : 0;
function GameBoard(_ref) {
  var _this = this;
  var players = _ref.players;
  var scheme = (0, react_native_1.useColorScheme)();
  var imgObj = (0, react_1.useMemo)(function () {
    var _images_1$GameBoardIm;
    var image = (_images_1$GameBoardIm = images_1.GameBoardImage.find(function (x) {
      return x.title === scheme;
    })) == null ? void 0 : _images_1$GameBoardIm.path;
    if (image) {
      var _react_native_1$Image = react_native_1.Image.resolveAssetSource(image),
        width = _react_native_1$Image.width,
        height = _react_native_1$Image.height;
      var aspect = width / height;
      return {
        image: image,
        aspect: aspect
      };
    } else {
      return {
        image: '',
        aspect: 1
      };
    }
  }, [scheme]);
  var getPlayer = function getPlayer(b) {
    var player = players.find(function (pl) {
      return pl.plan === b;
    });
    return player ? {
      id: player.id,
      plan: player.plan,
      avatar: player.avatar
    } : undefined;
  };
  return (0, _jsxRuntime.jsx)(components_1.NeomorphFlexView, {
    viewStyle: styles.container,
    children: (0, _jsxRuntime.jsxs)(react_native_1.View, {
      style: [styles.imageContainer, {
        width: curImageHeight * imgObj.aspect
      }],
      children: [(0, _jsxRuntime.jsx)(react_native_1.Image, {
        source: imgObj.image,
        style: styles.bgImage,
        resizeMode: "cover"
      }), (0, _jsxRuntime.jsx)(react_native_1.View, {
        style: styles.gameBoardContainer,
        children: (0, _jsxRuntime.jsx)(react_native_1.View, {
          style: styles.sub,
          children: rows.map(function (a, i) {
            return (0, _jsxRuntime.jsx)(react_native_1.View, {
              style: styles.row,
              children: a.map(function (b, index) {
                var _getPlayer;
                return (0, _jsxRuntime.jsx)(react_native_1.View, {
                  style: styles.box,
                  testID: `gem-${(_getPlayer = getPlayer(b)) == null ? void 0 : _getPlayer.id}`,
                  children: getPlayer(b) ? (0, _jsxRuntime.jsx)(Gem_1.Gem, {
                    player: getPlayer(b),
                    planNumber: b
                  }) : (0, _jsxRuntime.jsx)(react_native_1.Text, {
                    children: b
                  })
                }, index);
              })
            }, i);
          })
        })
      })]
    })
  });
}
exports.GameBoard = GameBoard;
var imageHeight = (0, react_native_size_matters_1.s)(248) + (0, react_native_size_matters_1.s)(32);
var maxImageHeight = (0, react_native_size_matters_1.ms)(248, 0.5) + (0, react_native_size_matters_1.s)(32);
var imageTopMargin = Math.min((0, react_native_size_matters_1.ms)(27, 0.5), (0, react_native_size_matters_1.s)(27));
var curImageHeight = Math.min(maxImageHeight, imageHeight) + imageTopMargin;
var imageWidth = (0, react_native_size_matters_1.s)(279) + (0, react_native_size_matters_1.s)(18);
var maxImageWidth = (0, react_native_size_matters_1.ms)(279, 0.5) + (0, react_native_size_matters_1.s)(18);
var curImageWidth = imageWidth >= maxImageWidth ? maxImageWidth : imageWidth;
var rows = [[72, 71, 70, 69, 68, 67, 66, 65, 64], [55, 56, 57, 58, 59, 60, 61, 62, 63], [54, 53, 52, 51, 50, 49, 48, 47, 46], [37, 38, 39, 40, 41, 42, 43, 44, 45], [36, 35, 34, 33, 32, 31, 30, 29, 28], [19, 20, 21, 22, 23, 24, 25, 26, 27], [18, 17, 16, 15, 14, 13, 12, 11, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9]];
var styles = react_native_size_matters_1.ScaledSheet.create({
  container: {
    alignItems: 'center',
    paddingHorizontal: (0, react_native_size_matters_1.s)(20),
    paddingVertical: (0, react_native_size_matters_1.s)(6),
    width: '90%'
  },
  sub: {
    marginTop: imageTopMargin
  },
  imageContainer: {
    height: curImageHeight,
    alignSelf: 'center',
    alignItems: 'center',
    bottom: 30
  },
  row: {
    flexDirection: 'row'
  },
  gameBoardContainer: {
    width: curImageWidth,
    height: curImageHeight,
    marginTop: marginTop
  },
  box: {
    width: (0, react_native_size_matters_1.s)(31),
    height: (0, react_native_size_matters_1.s)(31),
    maxHeight: (0, react_native_size_matters_1.ms)(31, 0.5),
    maxWidth: (0, react_native_size_matters_1.ms)(31, 0.5),
    marginVertical: (0, react_native_size_matters_1.s)(2),
    marginHorizontal: (0, react_native_size_matters_1.s)(1),
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: (0, react_native_size_matters_1.s)(31) / 2
  },
  bgImage: {
    width: '95%',
    height: '100%',
    position: 'absolute',
    top: (0, react_native_size_matters_1.mvs)(33, 1.6) - imageTopMargin
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnRTdGFyIiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiY29tcG9uZW50c18xIiwiY29uc18xIiwicmVhY3RfbmF0aXZlX3NpemVfbWF0dGVyc18xIiwiaW1hZ2VzXzEiLCJHZW1fMSIsIm1hcmdpblRvcCIsIkgiLCJXIiwiR2FtZUJvYXJkIiwiX3JlZiIsIl90aGlzIiwicGxheWVycyIsInNjaGVtZSIsInVzZUNvbG9yU2NoZW1lIiwiaW1nT2JqIiwidXNlTWVtbyIsIl9pbWFnZXNfMSRHYW1lQm9hcmRJbSIsImltYWdlIiwiR2FtZUJvYXJkSW1hZ2UiLCJmaW5kIiwieCIsInRpdGxlIiwicGF0aCIsIl9yZWFjdF9uYXRpdmVfMSRJbWFnZSIsIkltYWdlIiwicmVzb2x2ZUFzc2V0U291cmNlIiwid2lkdGgiLCJoZWlnaHQiLCJhc3BlY3QiLCJnZXRQbGF5ZXIiLCJiIiwicGxheWVyIiwicGwiLCJwbGFuIiwiaWQiLCJhdmF0YXIiLCJ1bmRlZmluZWQiLCJfanN4UnVudGltZSIsImpzeCIsIk5lb21vcnBoRmxleFZpZXciLCJ2aWV3U3R5bGUiLCJzdHlsZXMiLCJjb250YWluZXIiLCJjaGlsZHJlbiIsImpzeHMiLCJWaWV3Iiwic3R5bGUiLCJpbWFnZUNvbnRhaW5lciIsImN1ckltYWdlSGVpZ2h0Iiwic291cmNlIiwiYmdJbWFnZSIsInJlc2l6ZU1vZGUiLCJnYW1lQm9hcmRDb250YWluZXIiLCJzdWIiLCJyb3dzIiwibWFwIiwiYSIsImkiLCJyb3ciLCJpbmRleCIsIl9nZXRQbGF5ZXIiLCJib3giLCJ0ZXN0SUQiLCJHZW0iLCJwbGFuTnVtYmVyIiwiVGV4dCIsImV4cG9ydHMiLCJpbWFnZUhlaWdodCIsInMiLCJtYXhJbWFnZUhlaWdodCIsIm1zIiwiaW1hZ2VUb3BNYXJnaW4iLCJNYXRoIiwibWluIiwiaW1hZ2VXaWR0aCIsIm1heEltYWdlV2lkdGgiLCJjdXJJbWFnZVdpZHRoIiwiU2NhbGVkU2hlZXQiLCJjcmVhdGUiLCJhbGlnbkl0ZW1zIiwicGFkZGluZ0hvcml6b250YWwiLCJwYWRkaW5nVmVydGljYWwiLCJhbGlnblNlbGYiLCJib3R0b20iLCJmbGV4RGlyZWN0aW9uIiwibWF4SGVpZ2h0IiwibWF4V2lkdGgiLCJtYXJnaW5WZXJ0aWNhbCIsIm1hcmdpbkhvcml6b250YWwiLCJqdXN0aWZ5Q29udGVudCIsImJvcmRlclJhZGl1cyIsInBvc2l0aW9uIiwidG9wIiwibXZzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9HYW1lQm9hcmQvR2FtZUJvYXJkLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBJbWFnZSwgVGV4dCwgVmlldywgdXNlQ29sb3JTY2hlbWUgfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmltcG9ydCB7IE5lb21vcnBoRmxleFZpZXcgfSBmcm9tICdjb21wb25lbnRzJ1xuaW1wb3J0IHsgSCwgVyB9IGZyb20gJ2NvbnMnXG5pbXBvcnQgeyBTY2FsZWRTaGVldCwgbXMsIG12cywgcyB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1zaXplLW1hdHRlcnMnXG5pbXBvcnQgeyBHYW1lQm9hcmRQcm9wcyB9IGZyb20gJ3R5cGVzJ1xuXG5pbXBvcnQgeyBHYW1lQm9hcmRJbWFnZSB9IGZyb20gJy4vaW1hZ2VzJ1xuXG5pbXBvcnQgeyBHZW0gfSBmcm9tICcuLi9HZW0vR2VtJ1xuXG5jb25zdCBtYXJnaW5Ub3AgPSBIIC0gVyA+IDM1MCA/IDIwIDogMFxuXG5mdW5jdGlvbiBHYW1lQm9hcmQoeyBwbGF5ZXJzIH06IEdhbWVCb2FyZFByb3BzKSB7XG4gIGNvbnN0IHNjaGVtZSA9IHVzZUNvbG9yU2NoZW1lKClcblxuICBjb25zdCBpbWdPYmogPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBpbWFnZSA9IEdhbWVCb2FyZEltYWdlLmZpbmQoKHgpID0+IHtcbiAgICAgIHJldHVybiB4LnRpdGxlID09PSBzY2hlbWVcbiAgICB9KT8ucGF0aFxuICAgIGlmIChpbWFnZSkge1xuICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBJbWFnZS5yZXNvbHZlQXNzZXRTb3VyY2UoaW1hZ2UpXG4gICAgICBjb25zdCBhc3BlY3QgPSB3aWR0aCAvIGhlaWdodFxuICAgICAgcmV0dXJuIHsgaW1hZ2UsIGFzcGVjdCB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7IGltYWdlOiAnJywgYXNwZWN0OiAxIH1cbiAgICB9XG4gIH0sIFtzY2hlbWVdKVxuXG4gIGNvbnN0IGdldFBsYXllciA9IChiOiBudW1iZXIpID0+IHtcbiAgICBjb25zdCBwbGF5ZXIgPSBwbGF5ZXJzLmZpbmQoKHBsKSA9PiBwbC5wbGFuID09PSBiKVxuICAgIHJldHVybiBwbGF5ZXJcbiAgICAgID8ge1xuICAgICAgICAgIGlkOiBwbGF5ZXIuaWQsXG4gICAgICAgICAgcGxhbjogcGxheWVyLnBsYW4sXG4gICAgICAgICAgYXZhdGFyOiBwbGF5ZXIuYXZhdGFyLFxuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgPE5lb21vcnBoRmxleFZpZXcgdmlld1N0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgIDxWaWV3XG4gICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgc3R5bGVzLmltYWdlQ29udGFpbmVyLFxuICAgICAgICAgIHsgd2lkdGg6IGN1ckltYWdlSGVpZ2h0ICogaW1nT2JqLmFzcGVjdCB9LFxuICAgICAgICBdfVxuICAgICAgPlxuICAgICAgICA8SW1hZ2VcbiAgICAgICAgICBzb3VyY2U9e2ltZ09iai5pbWFnZX1cbiAgICAgICAgICBzdHlsZT17c3R5bGVzLmJnSW1hZ2V9XG4gICAgICAgICAgcmVzaXplTW9kZT1cImNvdmVyXCJcbiAgICAgICAgLz5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5nYW1lQm9hcmRDb250YWluZXJ9PlxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuc3VifT5cbiAgICAgICAgICAgIHtyb3dzLm1hcCgoYSwgaSkgPT4gKFxuICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnJvd30ga2V5PXtpfT5cbiAgICAgICAgICAgICAgICB7YS5tYXAoKGIsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICA8Vmlld1xuICAgICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmJveH1cbiAgICAgICAgICAgICAgICAgICAgdGVzdElEPXtgZ2VtLSR7Z2V0UGxheWVyKGIpPy5pZH1gfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7Z2V0UGxheWVyKGIpID8gKFxuICAgICAgICAgICAgICAgICAgICAgIDxHZW0gcGxheWVyPXtnZXRQbGF5ZXIoYil9IHBsYW5OdW1iZXI9e2J9IC8+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgPFRleHQ+e2J9PC9UZXh0PiAvLyDQoNC10L3QtNC10YDQuNC90LMg0L3QvtC80LXRgNCwINC/0LvQsNC90LAg0LTQu9GPINC/0YPRgdGC0L7QuSDRj9GH0LXQudC60LhcbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9WaWV3PlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L1ZpZXc+XG4gICAgPC9OZW9tb3JwaEZsZXhWaWV3PlxuICApXG59XG5cbmNvbnN0IGltYWdlSGVpZ2h0ID0gcygyNDgpICsgcygzMilcbmNvbnN0IG1heEltYWdlSGVpZ2h0ID0gbXMoMjQ4LCAwLjUpICsgcygzMilcbmNvbnN0IGltYWdlVG9wTWFyZ2luID0gTWF0aC5taW4obXMoMjcsIDAuNSksIHMoMjcpKVxuY29uc3QgY3VySW1hZ2VIZWlnaHQgPSBNYXRoLm1pbihtYXhJbWFnZUhlaWdodCwgaW1hZ2VIZWlnaHQpICsgaW1hZ2VUb3BNYXJnaW5cblxuY29uc3QgaW1hZ2VXaWR0aCA9IHMoMjc5KSArIHMoMTgpXG5jb25zdCBtYXhJbWFnZVdpZHRoID0gbXMoMjc5LCAwLjUpICsgcygxOClcbmNvbnN0IGN1ckltYWdlV2lkdGggPSBpbWFnZVdpZHRoID49IG1heEltYWdlV2lkdGggPyBtYXhJbWFnZVdpZHRoIDogaW1hZ2VXaWR0aFxuXG5jb25zdCByb3dzID0gW1xuICBbNzIsIDcxLCA3MCwgNjksIDY4LCA2NywgNjYsIDY1LCA2NF0sXG4gIFs1NSwgNTYsIDU3LCA1OCwgNTksIDYwLCA2MSwgNjIsIDYzXSxcbiAgWzU0LCA1MywgNTIsIDUxLCA1MCwgNDksIDQ4LCA0NywgNDZdLFxuICBbMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NV0sXG4gIFszNiwgMzUsIDM0LCAzMywgMzIsIDMxLCAzMCwgMjksIDI4XSxcbiAgWzE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjddLFxuICBbMTgsIDE3LCAxNiwgMTUsIDE0LCAxMywgMTIsIDExLCAxMF0sXG4gIFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5XSxcbl1cblxuY29uc3Qgc3R5bGVzID0gU2NhbGVkU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgcGFkZGluZ0hvcml6b250YWw6IHMoMjApLFxuICAgIHBhZGRpbmdWZXJ0aWNhbDogcyg2KSxcbiAgICB3aWR0aDogJzkwJScsXG4gIH0sXG4gIHN1Yjoge1xuICAgIG1hcmdpblRvcDogaW1hZ2VUb3BNYXJnaW4sXG4gIH0sXG4gIGltYWdlQ29udGFpbmVyOiB7XG4gICAgaGVpZ2h0OiBjdXJJbWFnZUhlaWdodCxcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGJvdHRvbTogMzAsXG4gIH0sXG4gIHJvdzoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICB9LFxuICBnYW1lQm9hcmRDb250YWluZXI6IHtcbiAgICB3aWR0aDogY3VySW1hZ2VXaWR0aCxcbiAgICBoZWlnaHQ6IGN1ckltYWdlSGVpZ2h0LFxuICAgIG1hcmdpblRvcCxcbiAgfSxcbiAgYm94OiB7XG4gICAgd2lkdGg6IHMoMzEpLFxuICAgIGhlaWdodDogcygzMSksXG4gICAgbWF4SGVpZ2h0OiBtcygzMSwgMC41KSxcbiAgICBtYXhXaWR0aDogbXMoMzEsIDAuNSksXG4gICAgbWFyZ2luVmVydGljYWw6IHMoMiksXG4gICAgbWFyZ2luSG9yaXpvbnRhbDogcygxKSxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYm9yZGVyUmFkaXVzOiBzKDMxKSAvIDIsXG4gIH0sXG4gIGJnSW1hZ2U6IHtcbiAgICB3aWR0aDogJzk1JScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiBtdnMoMzMsIDEuNikgLSBpbWFnZVRvcE1hcmdpbixcbiAgfSxcbn0pXG5cbmV4cG9ydCB7IEdhbWVCb2FyZCB9XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsWUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksMkJBQUEsR0FBQUosT0FBQTtBQUdBLElBQUFLLFFBQUEsR0FBQUwsT0FBQTtBQUVBLElBQUFNLEtBQUEsR0FBQU4sT0FBQTtBQUVBLElBQU1PLFNBQVMsR0FBR0osTUFB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