52a48c360b038435c6295f680ff36cc5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _reactNative = require("react-native");
var _getUniqueID = _interopRequireDefault(require("./util/getUniqueID"));
var _convertAdditionalStyles = _interopRequireDefault(require("./util/convertAdditionalStyles"));
var _textStyleProps = _interopRequireDefault(require("./data/textStyleProps"));
var AstRenderer = (0, _createClass2.default)(function AstRenderer(renderRules, style, onLinkPress, maxTopLevelChildren, topLevelMaxExceededItem, allowedImageHandlers, defaultImageHandler, debugPrintTree) {
  var _this = this;
  (0, _classCallCheck2.default)(this, AstRenderer);
  this.getRenderFunction = function (type) {
    var renderFunction = _this._renderRules[type];
    if (!renderFunction) {
      console.warn(`Warning, unknown render rule encountered: ${type}. 'unknown' render rule used (by default, returns null - nothing rendered)`);
      return _this._renderRules.unknown;
    }
    return renderFunction;
  };
  this.renderNode = function (node, parentNodes) {
    var isRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var renderFunction = _this.getRenderFunction(node.type);
    var parents = (0, _toConsumableArray2.default)(parentNodes);
    if (_this._debugPrintTree === true) {
      var str = '';
      for (var a = 0; a < parents.length; a++) {
        str = str + '-';
      }
      console.log(`${str}${node.type}`);
    }
    parents.unshift(node);
    var children = node.children.map(function (value) {
      return _this.renderNode(value, parents);
    });
    if (node.type === 'link' || node.type === 'blocklink') {
      return renderFunction(node, children, parentNodes, _this._style, _this._onLinkPress);
    }
    if (node.type === 'image') {
      return renderFunction(node, children, parentNodes, _this._style, _this._allowedImageHandlers, _this._defaultImageHandler);
    }
    if (children.length === 0 || node.type === 'list_item') {
      var styleObj = {};
      for (var _a = parentNodes.length - 1; _a > -1; _a--) {
        var refStyle = {};
        if (parentNodes[_a].attributes && parentNodes[_a].attributes.style && typeof parentNodes[_a].attributes.style === 'string') {
          refStyle = (0, _convertAdditionalStyles.default)(parentNodes[_a].attributes.style);
        }
        if (_this._style[parentNodes[_a].type]) {
          refStyle = Object.assign({}, refStyle, _reactNative.StyleSheet.flatten(_this._style[parentNodes[_a].type]));
          if (parentNodes[_a].type === 'list_item') {
            var contentStyle = {};
            if (parentNodes[_a + 1].type === 'bullet_list') {
              contentStyle = _this._style.bullet_list_content;
            } else if (parentNodes[_a + 1].type === 'ordered_list') {
              contentStyle = _this._style.ordered_list_content;
            }
            refStyle = Object.assign({}, refStyle, _reactNative.StyleSheet.flatten(contentStyle));
          }
        }
        var arr = Object.keys(refStyle);
        for (var b = 0; b < arr.length; b++) {
          if (_textStyleProps.default.includes(arr[b])) {
            styleObj[arr[b]] = refStyle[arr[b]];
          }
        }
      }
      return renderFunction(node, children, parentNodes, _this._style, styleObj);
    }
    if (isRoot === true && _this._maxTopLevelChildren && children.length > _this._maxTopLevelChildren) {
      children = children.slice(0, _this._maxTopLevelChildren);
      children.push(_this._topLevelMaxExceededItem);
    }
    return renderFunction(node, children, parentNodes, _this._style);
  };
  this.render = function (nodes) {
    var root = {
      type: 'body',
      key: (0, _getUniqueID.default)(),
      children: nodes
    };
    return _this.renderNode(root, [], true);
  };
  this._renderRules = renderRules;
  this._style = style;
  this._onLinkPress = onLinkPress;
  this._maxTopLevelChildren = maxTopLevelChildren;
  this._topLevelMaxExceededItem = topLevelMaxExceededItem;
  this._allowedImageHandlers = allowedImageHandlers;
  this._defaultImageHandler = defaultImageHandler;
  this._debugPrintTree = debugPrintTree;
});
exports.default = AstRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,