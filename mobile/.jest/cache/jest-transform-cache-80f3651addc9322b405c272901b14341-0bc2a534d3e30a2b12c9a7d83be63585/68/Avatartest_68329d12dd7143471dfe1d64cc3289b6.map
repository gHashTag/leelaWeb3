{"version":3,"names":["react_1","__importDefault","require","react_native_1","Avatar_1","describe","it","_ref","render","_jsxRuntime","jsx","Avatar","plan","size","avatar","testID","getByTestId","expect","toBeTruthy","onPressMock","jest","fn","_ref2","onPress","avatarComponent","fireEvent","press","toHaveBeenCalled","_ref3","isAccept","queryByTestId","toBeNull","_ref4"],"sources":["/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.test.tsx"],"sourcesContent":["import React from 'react'\n\nimport { fireEvent, render } from '@testing-library/react-native'\n\nimport { Avatar } from './Avatar'\n\ndescribe('Avatar Component', () => {\n  it('renders correctly with default props', () => {\n    const { getByTestId } = render(\n      <Avatar\n        plan={5}\n        size=\"medium\"\n        avatar=\"avatar-url\"\n        testID=\"avatar-component\"\n      />,\n    )\n    expect(getByTestId('avatar-component')).toBeTruthy()\n  })\n\n  it('calls onPress function when pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(\n      <Avatar\n        plan={5}\n        size=\"medium\"\n        avatar=\"avatar-url\"\n        onPress={onPressMock}\n        testID=\"avatar-component\"\n      />,\n    )\n    const avatarComponent = getByTestId('avatar-component')\n    fireEvent.press(avatarComponent)\n    expect(onPressMock).toHaveBeenCalled()\n  })\n\n  it('displays time icon when isAccept is false', () => {\n    const { queryByTestId } = render(\n      <Avatar\n        plan={5}\n        size=\"medium\"\n        avatar=\"avatar-url\"\n        isAccept={false}\n        testID=\"avatar-component\"\n      />,\n    )\n    expect(queryByTestId('avatar-title')).toBeNull()\n    expect(queryByTestId('time-icon')).toBeTruthy()\n  })\n\n  it('displays text title when isAccept is true', () => {\n    const { queryByTestId } = render(\n      <Avatar\n        plan={5}\n        size=\"medium\"\n        avatar=\"avatar-url\"\n        isAccept={true}\n        testID=\"avatar-component\"\n      />,\n    )\n    expect(queryByTestId('avatar-title')).toBeTruthy()\n    // expect(queryByTestId('avatar-title')).toHaveTextContent('05')\n  })\n})\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AAEA,IAAAE,QAAA,GAAAF,OAAA;AAEAG,QAAQ,CAAC,kBAAkB,EAAE,YAAK;EAChCC,EAAE,CAAC,sCAAsC,EAAE,YAAK;IAC9C,IAAAC,IAAA,GAAwB,IAAAJ,cAAA,CAAAK,MAAM,EAC5B,IAAAC,WAAA,CAAAC,GAAA,EAACN,QAAA,CAAAO,MAAM;QACLC,IAAI,EAAE,CAAE;QACRC,IAAI,EAAC,QAAQ;QACbC,MAAM,EAAC,YAAY;QACnBC,MAAM,EAAC;MAAkB,EACzB,CACH;MAPOC,WAAW,GAAAT,IAAA,CAAXS,WAAW;IAQnBC,MAAM,CAACD,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAACE,UAAU,EAAE;EACtD,CAAC,CAAC;EAEFZ,EAAE,CAAC,qCAAqC,EAAE,YAAK;IAC7C,IAAMa,WAAW,GAAGC,IAAI,CAACC,EAAE,EAAE;IAC7B,IAAAC,KAAA,GAAwB,IAAAnB,cAAA,CAAAK,MAAM,EAC5B,IAAAC,WAAA,CAAAC,GAAA,EAACN,QAAA,CAAAO,MAAM;QACLC,IAAI,EAAE,CAAE;QACRC,IAAI,EAAC,QAAQ;QACbC,MAAM,EAAC,YAAY;QACnBS,OAAO,EAAEJ,WAAY;QACrBJ,MAAM,EAAC;MAAkB,EACzB,CACH;MAROC,WAAW,GAAAM,KAAA,CAAXN,WAAW;IASnB,IAAMQ,eAAe,GAAGR,WAAW,CAAC,kBAAkB,CAAC;IACvDb,cAAA,CAAAsB,SAAS,CAACC,KAAK,CAACF,eAAe,CAAC;IAChCP,MAAM,CAACE,WAAW,CAAC,CAACQ,gBAAgB,EAAE;EACxC,CAAC,CAAC;EAEFrB,EAAE,CAAC,2CAA2C,EAAE,YAAK;IACnD,IAAAsB,KAAA,GAA0B,IAAAzB,cAAA,CAAAK,MAAM,EAC9B,IAAAC,WAAA,CAAAC,GAAA,EAACN,QAAA,CAAAO,MAAM;QACLC,IAAI,EAAE,CAAE;QACRC,IAAI,EAAC,QAAQ;QACbC,MAAM,EAAC,YAAY;QACnBe,QAAQ,EAAE,KAAM;QAChBd,MAAM,EAAC;MAAkB,EACzB,CACH;MAROe,aAAa,GAAAF,KAAA,CAAbE,aAAa;IASrBb,MAAM,CAACa,aAAa,CAAC,cAAc,CAAC,CAAC,CAACC,QAAQ,EAAE;IAChDd,MAAM,CAACa,aAAa,CAAC,WAAW,CAAC,CAAC,CAACZ,UAAU,EAAE;EACjD,CAAC,CAAC;EAEFZ,EAAE,CAAC,2CAA2C,EAAE,YAAK;IACnD,IAAA0B,KAAA,GAA0B,IAAA7B,cAAA,CAAAK,MAAM,EAC9B,IAAAC,WAAA,CAAAC,GAAA,EAACN,QAAA,CAAAO,MAAM;QACLC,IAAI,EAAE,CAAE;QACRC,IAAI,EAAC,QAAQ;QACbC,MAAM,EAAC,YAAY;QACnBe,QAAQ,EAAE,IAAK;QACfd,MAAM,EAAC;MAAkB,EACzB,CACH;MAROe,aAAa,GAAAE,KAAA,CAAbF,aAAa;IASrBb,MAAM,CAACa,aAAa,CAAC,cAAc,CAAC,CAAC,CAACZ,UAAU,EAAE;EAEpD,CAAC,CAAC;AACJ,CAAC,CAAC"}