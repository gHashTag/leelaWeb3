3cf2652f0555bdd76739fc5eeb803fb7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Address/Address.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var clipboard_1 = __importDefault(require("@react-native-clipboard/clipboard"));
var react_native_1 = require("@testing-library/react-native");
var Address_1 = require("../Address");
describe('Address component', function () {
  it('should copy full address to clipboard and change opacity on press', (0, _asyncToGenerator2.default)(function* () {
    var rlyAccount = 'exampleAddress12345';
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Address_1.Address, {
        rlyAccount: rlyAccount
      })),
      getByTestId = _ref2.getByTestId,
      getByText = _ref2.getByText;
    var copyButton = getByTestId('copy-button');
    expect(copyButton).toBeDefined();
    var mockSetString = jest.fn();
    clipboard_1.default.setString = mockSetString;
    react_native_1.fireEvent.press(copyButton);
    expect(mockSetString).toHaveBeenCalledWith(rlyAccount);
    var renderedText = getByText('examp...ress12345');
    expect(renderedText).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsImNsaXBib2FyZF8xIiwicmVhY3RfbmF0aXZlXzEiLCJBZGRyZXNzXzEiLCJkZXNjcmliZSIsIml0IiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZGVmYXVsdCIsInJseUFjY291bnQiLCJfcmVmMiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiQWRkcmVzcyIsImdldEJ5VGVzdElkIiwiZ2V0QnlUZXh0IiwiY29weUJ1dHRvbiIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwibW9ja1NldFN0cmluZyIsImplc3QiLCJmbiIsInNldFN0cmluZyIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJyZW5kZXJlZFRleHQiLCJ0b0JlVHJ1dGh5Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9BZGRyZXNzL0FkZHJlc3MudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgQ2xpcGJvYXJkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY2xpcGJvYXJkL2NsaXBib2FyZCcgLy8gSW1wb3J0IHRoZSBtb2NrZWQgQ2xpcGJvYXJkXG5pbXBvcnQgeyBmaXJlRXZlbnQsIHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuXG5pbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnLi4vQWRkcmVzcydcblxuZGVzY3JpYmUoJ0FkZHJlc3MgY29tcG9uZW50JywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGNvcHkgZnVsbCBhZGRyZXNzIHRvIGNsaXBib2FyZCBhbmQgY2hhbmdlIG9wYWNpdHkgb24gcHJlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgcmx5QWNjb3VudCA9ICdleGFtcGxlQWRkcmVzczEyMzQ1J1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8QWRkcmVzcyBybHlBY2NvdW50PXtybHlBY2NvdW50fSAvPixcbiAgICApXG5cbiAgICBjb25zdCBjb3B5QnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2NvcHktYnV0dG9uJylcbiAgICBleHBlY3QoY29weUJ1dHRvbikudG9CZURlZmluZWQoKVxuXG4gICAgLy8gTW9jayB0aGUgY2xpcGJvYXJkJ3Mgc2V0U3RyaW5nIGZ1bmN0aW9uXG4gICAgY29uc3QgbW9ja1NldFN0cmluZyA9IGplc3QuZm4oKVxuICAgIENsaXBib2FyZC5zZXRTdHJpbmcgPSBtb2NrU2V0U3RyaW5nXG5cbiAgICAvLyBUcmlnZ2VyIHRoZSBwcmVzcyBldmVudCBvbiB0aGUgY29weSBidXR0b25cbiAgICBmaXJlRXZlbnQucHJlc3MoY29weUJ1dHRvbilcblxuICAgIC8vIEV4cGVjdCB0aGF0IHNldFN0cmluZyB3YXMgY2FsbGVkIHdpdGggdGhlIGNvcnJlY3QgdmFsdWVcbiAgICBleHBlY3QobW9ja1NldFN0cmluZykudG9IYXZlQmVlbkNhbGxlZFdpdGgocmx5QWNjb3VudClcbiAgICAvLyBDaGVjayB0aGUgcmVuZGVyZWQgdGV4dCBhZnRlciBhbmltYXRpb25zIGNvbXBsZXRlXG4gICAgY29uc3QgcmVuZGVyZWRUZXh0ID0gZ2V0QnlUZXh0KCdleGFtcC4uLnJlc3MxMjM0NScpXG4gICAgZXhwZWN0KHJlbmRlcmVkVGV4dCkudG9CZVRydXRoeSgpXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLFdBQUEsR0FBQUYsZUFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsY0FBQSxHQUFBRixPQUFBO0FBRUEsSUFBQUcsU0FBQSxHQUFBSCxPQUFBO0FBRUFJLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxZQUFLO0VBQ2pDQyxFQUFFLENBQUMsbUVBQW1FLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFXO0lBQ2pGLElBQU1DLFVBQVUsR0FBRyxxQkFBcUI7SUFFeEMsSUFBQUMsS0FBQSxHQUFtQyxJQUFBUCxjQUFBLENBQUFRLE1BQU0sRUFDdkMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNULFNBQUEsQ0FBQVUsT0FBTztRQUFDTCxVQUFVLEVBQUVBO01BQVcsRUFBRyxDQUNwQztNQUZPTSxXQUFXLEdBQUFMLEtBQUEsQ0FBWEssV0FBVztNQUFFQyxTQUFTLEdBQUFOLEtBQUEsQ0FBVE0sU0FBUztJQUk5QixJQUFNQyxVQUFVLEdBQUdGLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDN0NHLE1BQU0sQ0FBQ0QsVUFBVSxDQUFDLENBQUNFLFdBQVcsRUFBRTtJQUdoQyxJQUFNQyxhQUFhLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQy9CcEIsV0FBQSxDQUFBTSxPQUFTLENBQUNlLFNBQVMsR0FBR0gsYUFBYTtJQUduQ2pCLGNBQUEsQ0FBQXFCLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDUixVQUFVLENBQUM7SUFHM0JDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDLENBQUNNLG9CQUFvQixDQUFDakIsVUFBVSxDQUFDO0lBRXRELElBQU1rQixZQUFZLEdBQUdYLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztJQUNuREUsTUFBTSxDQUFDUyxZQUFZLENBQUMsQ0FBQ0MsVUFBVSxFQUFFO0VBQ25DLENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyJ9