d56960bd5a3b6895c09ec40bfed8a894
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
test('should render the correct number of Gem components based on the players prop', function () {
  var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getAllByTestId = _ref.getAllByTestId;
  var gemComponents = getAllByTestId('gem-container');
  var playerGemImages = getAllByTestId('player-gem-image');
  expect(playerGemImages.length).toEqual(2);
  expect(gemComponents.length).toEqual(72);
});
test('should render the correct number of Gem components based on the players prop', function () {
  var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getByTestId = _ref2.getByTestId,
    queryByTestId = _ref2.queryByTestId;
  players.forEach(function (player) {
    var gemImage = queryByTestId(`gem-image-${player.id}`);
    expect(gemImage).toBeTruthy();
  });
  var gemComponents = queryByTestId('gem-container');
  expect(gemComponents).toBeTruthy();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsInRlc3QiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHYW1lQm9hcmQiLCJnZXRBbGxCeVRlc3RJZCIsImdlbUNvbXBvbmVudHMiLCJwbGF5ZXJHZW1JbWFnZXMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0VxdWFsIiwiX3JlZjIiLCJnZXRCeVRlc3RJZCIsInF1ZXJ5QnlUZXN0SWQiLCJmb3JFYWNoIiwicGxheWVyIiwiZ2VtSW1hZ2UiLCJ0b0JlVHJ1dGh5Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9HYW1lQm9hcmQvR2FtZUJvYXJkLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICd0eXBlcydcblxuaW1wb3J0IHsgR2FtZUJvYXJkIH0gZnJvbSAnLi4vJ1xuXG5jb25zdCBwbGF5ZXJzOiBQbGF5ZXJbXSA9IFtcbiAge1xuICAgIGlkOiAyLFxuICAgIHBsYW46IDcyLFxuICAgIGF2YXRhcjogMTA2LFxuICB9LFxuICB7XG4gICAgaWQ6IDQsXG4gICAgcGxhbjogMzQsXG4gICAgYXZhdGFyOlxuICAgICAgJ2h0dHBzOi8vYmFma3JlaWZ0cm1mbWltbHZvMjZ4YXhmdnQyeXBuamphYXZxNW1nbmtqbGpzNm1jemZla2lpNGNtdHEuaXBmcy5uZnRzdG9yYWdlLmxpbmsvJyxcbiAgfSxcbl1cblxudGVzdCgnc2hvdWxkIHJlbmRlciB0aGUgY29ycmVjdCBudW1iZXIgb2YgR2VtIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIHBsYXllcnMgcHJvcCcsICgpID0+IHtcbiAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG4gIGNvbnN0IGdlbUNvbXBvbmVudHMgPSBnZXRBbGxCeVRlc3RJZCgnZ2VtLWNvbnRhaW5lcicpXG4gIGNvbnN0IHBsYXllckdlbUltYWdlcyA9IGdldEFsbEJ5VGVzdElkKCdwbGF5ZXItZ2VtLWltYWdlJylcbiAgZXhwZWN0KHBsYXllckdlbUltYWdlcy5sZW5ndGgpLnRvRXF1YWwoMikgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwIDIg0LjQs9GA0L7QutCwXG4gIGV4cGVjdChnZW1Db21wb25lbnRzLmxlbmd0aCkudG9FcXVhbCg3MikgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwINC+0LHRidC10LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0LrQvtC80L/QvtC90LXQvdGC0L7QsiBHZW1cbn0pXG5cbnRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuXG4gIHBsYXllcnMuZm9yRWFjaCgocGxheWVyKSA9PiB7XG4gICAgY29uc3QgZ2VtSW1hZ2UgPSBxdWVyeUJ5VGVzdElkKGBnZW0taW1hZ2UtJHtwbGF5ZXIuaWR9YClcbiAgICBleHBlY3QoZ2VtSW1hZ2UpLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGNvbnN0IGdlbUNvbXBvbmVudHMgPSBxdWVyeUJ5VGVzdElkKCdnZW0tY29udGFpbmVyJylcbiAgZXhwZWN0KGdlbUNvbXBvbmVudHMpLnRvQmVUcnV0aHkoKVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBR0EsSUFBQUUsR0FBQSxHQUFBRixPQUFBO0FBRUEsSUFBTUcsT0FBTyxHQUFhLENBQ3hCO0VBQ0VDLEVBQUUsRUFBRSxDQUFDO0VBQ0xDLElBQUksRUFBRSxFQUFFO0VBQ1JDLE1BQU0sRUFBRTtDQUNULEVBQ0Q7RUFDRUYsRUFBRSxFQUFFLENBQUM7RUFDTEMsSUFBSSxFQUFFLEVBQUU7RUFDUkMsTUFBTSxFQUNKO0NBQ0gsQ0FDRjtBQUVEQyxJQUFJLENBQUMsOEVBQThFLEVBQUUsWUFBSztFQUN4RixJQUFBQyxJQUFBLEdBQTJCLElBQUFQLGNBQUEsQ0FBQVEsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVCxHQUFBLENBQUFVLFNBQVM7TUFBQ1QsT0FBTyxFQUFFQTtJQUFRLEVBQUcsQ0FBQztJQUExRFUsY0FBYyxHQUFBTCxJQUFBLENBQWRLLGNBQWM7RUFDdEIsSUFBTUMsYUFBYSxHQUFHRCxjQUFjLENBQUMsZUFBZSxDQUFDO0VBQ3JELElBQU1FLGVBQWUsR0FBR0YsY0FBYyxDQUFDLGtCQUFrQixDQUFDO0VBQzFERyxNQUFNLENBQUNELGVBQWUsQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUM7RUFDekNGLE1BQU0sQ0FBQ0YsYUFBYSxDQUFDRyxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLEVBQUUsQ0FBQztBQUMxQyxDQUFDLENBQUM7QUFFRlgsSUFBSSxDQUFDLDhFQUE4RSxFQUFFLFlBQUs7RUFDeEYsSUFBQVksS0FBQSxHQUF1QyxJQUFBbEIsY0FBQSxDQUFBUSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNULEdBQUEsQ0FBQVUsU0FBUztNQUFDVCxPQUFPLEVBQUVBO0lBQVEsRUFBRyxDQUFDO0lBQXRFaUIsV0FBVyxHQUFBRCxLQUFBLENBQVhDLFdBQVc7SUFBRUMsYUFBYSxHQUFBRixLQUFBLENBQWJFLGFBQWE7RUFFbENsQixPQUFPLENBQUNtQixPQUFPLENBQUMsVUFBQ0MsTUFBTSxFQUFJO0lBQ3pCLElBQU1DLFFBQVEsR0FBR0gsYUFBYSxDQUFDLGFBQWFFLE1BQU0sQ0FBQ25CLEVBQUUsRUFBRSxDQUFDO0lBQ3hEWSxNQUFNLENBQUNRLFFBQVEsQ0FBQyxDQUFDQyxVQUFVLEVBQUU7RUFDL0IsQ0FBQyxDQUFDO0VBRUYsSUFBTVgsYUFBYSxHQUFHTyxhQUFhLENBQUMsZUFBZSxDQUFDO0VBQ3BETCxNQUFNLENBQUNGLGFBQWEsQ0FBQyxDQUFDVyxVQUFVLEVBQUU7QUFDcEMsQ0FBQyxDQUFDIn0=