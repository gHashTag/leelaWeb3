7b211f2d3e166e4b5a7df8b3f3a82ac7
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
var Text_1 = require("./Text");
describe('Text Component', function () {
  it('Text component snapshot', function () {
    var component = react_test_renderer_1.default.create((0, _jsxRuntime.jsx)(Text_1.Text, {
      title: "Snapshot Test",
      testID: "snapshot-text"
    }));
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        testID: "text-component",
        title: "Test Title"
      })),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('applies the correct style based on the "h" prop', function () {
    var styles = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5'];
    styles.forEach(function (style) {
      var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
          testID: "text-component",
          title: "Test Title",
          h: style
        })),
        getByTestId = _ref2.getByTestId;
      var receivedStyle = getByTestId('text-component').props.style;
      expect(receivedStyle).toEqual(expect.objectContaining(Text_1.textStyles[style]));
    });
  });
  it('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        title: "Clickable Text",
        onPress: onPressMock,
        testID: "clickable-text"
      })),
      getByTestId = _ref3.getByTestId;
    var clickableText = getByTestId('clickable-text');
    react_native_1.fireEvent.press(clickableText);
    expect(onPressMock).toHaveBeenCalled();
  });
  it('displays the correct title', function () {
    var title = 'Test Title';
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        testID: "text-component",
        title: title
      })),
      getByTestId = _ref4.getByTestId;
    var textComponent = getByTestId('text-component');
    expect(textComponent.props.children).toBe(title);
  });
  it('displays truncated text when numberOfLines is set', function () {
    var longText = 'This is a very long text that should be truncated';
    var _ref5 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        testID: "text-component",
        title: longText,
        numberOfLines: 1
      })),
      getByTestId = _ref5.getByTestId;
    var textComponent = getByTestId('text-component');
    expect(textComponent.props.children).toBe(longText);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwicmVhY3RfdGVzdF9yZW5kZXJlcl8xIiwiVGV4dF8xIiwiZGVzY3JpYmUiLCJpdCIsImNvbXBvbmVudCIsImRlZmF1bHQiLCJjcmVhdGUiLCJfanN4UnVudGltZSIsImpzeCIsIlRleHQiLCJ0aXRsZSIsInRlc3RJRCIsInRyZWUiLCJ0b0pTT04iLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJfcmVmIiwicmVuZGVyIiwiZ2V0QnlUZXh0IiwidG9CZVRydXRoeSIsInN0eWxlcyIsImZvckVhY2giLCJzdHlsZSIsIl9yZWYyIiwiaCIsImdldEJ5VGVzdElkIiwicmVjZWl2ZWRTdHlsZSIsInByb3BzIiwidG9FcXVhbCIsIm9iamVjdENvbnRhaW5pbmciLCJ0ZXh0U3R5bGVzIiwib25QcmVzc01vY2siLCJqZXN0IiwiZm4iLCJfcmVmMyIsIm9uUHJlc3MiLCJjbGlja2FibGVUZXh0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlZjQiLCJ0ZXh0Q29tcG9uZW50IiwiY2hpbGRyZW4iLCJ0b0JlIiwibG9uZ1RleHQiLCJfcmVmNSIsIm51bWJlck9mTGluZXMiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL1RleHQvVGV4dC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IGZpcmVFdmVudCwgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcidcblxuaW1wb3J0IHsgVGV4dCwgaFQsIHRleHRTdHlsZXMgfSBmcm9tICcuL1RleHQnXG5cbmRlc2NyaWJlKCdUZXh0IENvbXBvbmVudCcsICgpID0+IHtcbiAgaXQoJ1RleHQgY29tcG9uZW50IHNuYXBzaG90JywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHJlbmRlcmVyLmNyZWF0ZShcbiAgICAgIDxUZXh0IHRpdGxlPVwiU25hcHNob3QgVGVzdFwiIHRlc3RJRD1cInNuYXBzaG90LXRleHRcIiAvPixcbiAgICApXG5cbiAgICBjb25zdCB0cmVlID0gY29tcG9uZW50LnRvSlNPTigpXG4gICAgZXhwZWN0KHRyZWUpLnRvTWF0Y2hTbmFwc2hvdCgpXG4gIH0pXG5cbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggZGVmYXVsdCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPFRleHQgdGVzdElEPVwidGV4dC1jb21wb25lbnRcIiB0aXRsZT1cIlRlc3QgVGl0bGVcIiAvPixcbiAgICApXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnVGVzdCBUaXRsZScpKS50b0JlVHJ1dGh5KClcbiAgfSlcblxuICBpdCgnYXBwbGllcyB0aGUgY29ycmVjdCBzdHlsZSBiYXNlZCBvbiB0aGUgXCJoXCIgcHJvcCcsICgpID0+IHtcbiAgICBjb25zdCBzdHlsZXM6IGhUW10gPSBbJ2gwJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1J11cbiAgICBzdHlsZXMuZm9yRWFjaCgoc3R5bGUpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgPFRleHQgdGVzdElEPVwidGV4dC1jb21wb25lbnRcIiB0aXRsZT1cIlRlc3QgVGl0bGVcIiBoPXtzdHlsZX0gLz4sXG4gICAgICApXG4gICAgICBjb25zdCByZWNlaXZlZFN0eWxlID0gZ2V0QnlUZXN0SWQoJ3RleHQtY29tcG9uZW50JykucHJvcHMuc3R5bGVcbiAgICAgIGV4cGVjdChyZWNlaXZlZFN0eWxlKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHRleHRTdHlsZXNbc3R5bGVdKSlcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdzaG91bGQgY2FsbCB0aGUgb25QcmVzcyBmdW5jdGlvbiB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKClcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8VGV4dFxuICAgICAgICB0aXRsZT1cIkNsaWNrYWJsZSBUZXh0XCJcbiAgICAgICAgb25QcmVzcz17b25QcmVzc01vY2t9XG4gICAgICAgIHRlc3RJRD1cImNsaWNrYWJsZS10ZXh0XCJcbiAgICAgIC8+LFxuICAgIClcbiAgICBjb25zdCBjbGlja2FibGVUZXh0ID0gZ2V0QnlUZXN0SWQoJ2NsaWNrYWJsZS10ZXh0JylcbiAgICBmaXJlRXZlbnQucHJlc3MoY2xpY2thYmxlVGV4dClcbiAgICBleHBlY3Qob25QcmVzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICB9KVxuXG4gIGl0KCdkaXNwbGF5cyB0aGUgY29ycmVjdCB0aXRsZScsICgpID0+IHtcbiAgICBjb25zdCB0aXRsZSA9ICdUZXN0IFRpdGxlJ1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxUZXh0IHRlc3RJRD1cInRleHQtY29tcG9uZW50XCIgdGl0bGU9e3RpdGxlfSAvPixcbiAgICApXG4gICAgY29uc3QgdGV4dENvbXBvbmVudCA9IGdldEJ5VGVzdElkKCd0ZXh0LWNvbXBvbmVudCcpXG4gICAgZXhwZWN0KHRleHRDb21wb25lbnQucHJvcHMuY2hpbGRyZW4pLnRvQmUodGl0bGUpXG4gIH0pXG5cbiAgaXQoJ2Rpc3BsYXlzIHRydW5jYXRlZCB0ZXh0IHdoZW4gbnVtYmVyT2ZMaW5lcyBpcyBzZXQnLCAoKSA9PiB7XG4gICAgY29uc3QgbG9uZ1RleHQgPSAnVGhpcyBpcyBhIHZlcnkgbG9uZyB0ZXh0IHRoYXQgc2hvdWxkIGJlIHRydW5jYXRlZCdcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJ0ZXh0LWNvbXBvbmVudFwiIHRpdGxlPXtsb25nVGV4dH0gbnVtYmVyT2ZMaW5lcz17MX0gLz4sXG4gICAgKVxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBnZXRCeVRlc3RJZCgndGV4dC1jb21wb25lbnQnKVxuICAgIGV4cGVjdCh0ZXh0Q29tcG9uZW50LnByb3BzLmNoaWxkcmVuKS50b0JlKGxvbmdUZXh0KVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUscUJBQUEsR0FBQUgsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUcsTUFBQSxHQUFBSCxPQUFBO0FBRUFJLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFLO0VBQzlCQyxFQUFFLENBQUMseUJBQXlCLEVBQUUsWUFBSztJQUNqQyxJQUFNQyxTQUFTLEdBQUdKLHFCQUFBLENBQUFLLE9BQVEsQ0FBQ0MsTUFBTSxDQUMvQixJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1AsTUFBQSxDQUFBUSxJQUFJO01BQUNDLEtBQUssRUFBQyxlQUFlO01BQUNDLE1BQU0sRUFBQztJQUFlLEVBQUcsQ0FDdEQ7SUFFRCxJQUFNQyxJQUFJLEdBQUdSLFNBQVMsQ0FBQ1MsTUFBTSxFQUFFO0lBQy9CQyxNQUFNLENBQUNGLElBQUksQ0FBQyxDQUFDRyxlQUFlLEVBQUU7RUFDaEMsQ0FBQyxDQUFDO0VBRUZaLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxZQUFLO0lBQzlDLElBQUFhLElBQUEsR0FBc0IsSUFBQWpCLGNBQUEsQ0FBQWtCLE1BQU0sRUFDMUIsSUFBQVYsV0FBQSxDQUFBQyxHQUFBLEVBQUNQLE1BQUEsQ0FBQVEsSUFBSTtRQUFDRSxNQUFNLEVBQUMsZ0JBQWdCO1FBQUNELEtBQUssRUFBQztNQUFZLEVBQUcsQ0FDcEQ7TUFGT1EsU0FBUyxHQUFBRixJQUFBLENBQVRF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