42402d8b9f148269720688241a34adee
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accountHumanReadable = exports.getSystemLanguage = exports.ENTITLEMENT_ID = exports.goHome = exports.openUrl = exports.isIos = exports.imgH = exports.H = exports.W = exports.win = exports.captureException = exports.handleCommentAi = exports.onLeaveFeedback = exports.generateComment = exports.transparent = exports.grayBlackOpacity = exports.blackOpacity = exports.orange = exports.red = exports.brightTurquoise = exports.paleBlue = exports.trueBlue = exports.fuchsia = exports.mustard = exports.classicRose = exports.lightGray = exports.dimGray = exports.black = exports.white = exports.gray = exports.secondary = exports.primary = void 0;
var react_native_1 = require("react-native");
var _env_1 = require("@env");
var Sentry = __importStar(require("@sentry/react-native"));
var axios_1 = __importDefault(require("axios"));
var react_native_rate_1 = __importDefault(require("react-native-rate"));
exports.primary = '#50E3C2';
exports.secondary = '#ff06f4';
exports.gray = '#808080';
exports.white = '#ffffff';
exports.black = '#303030';
exports.dimGray = '#b4b3b3';
exports.lightGray = '#F5F7F8';
exports.classicRose = '#FDBEEA';
exports.mustard = '#F3DE50';
exports.fuchsia = '#FF06F4';
exports.trueBlue = '#007ACD';
exports.paleBlue = '#BEFCE5';
exports.brightTurquoise = '#1EE4EC';
exports.red = '#FC2847';
exports.orange = '#FFB700';
exports.blackOpacity = 'rgba(0, 0, 0, 0.8)';
exports.grayBlackOpacity = 'rgba(139, 139, 139, 0.1)';
exports.transparent = 'transparent';
var generateComment = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (_ref) {
    var message = _ref.message,
      systemMessage = _ref.systemMessage,
      planText = _ref.planText;
    try {
      var _response$data$choice, _response$data, _response$data$choice2, _response$data$choice3;
      var response = yield axios_1.default.post('https://api.openai.com/v1/chat/completions', {
        model: 'gpt-4-0314',
        messages: [{
          role: 'system',
          content: systemMessage
        }, {
          role: 'user',
          content: message
        }, {
          role: 'assistant',
          content: planText
        }],
        max_tokens: 1000,
        temperature: 0.5
      }, {
        headers: {
          Authorization: `Bearer ${_env_1.OPEN_AI_KEY}`,
          'Content-Type': 'application/json'
        }
      });
      return (_response$data$choice = response == null ? void 0 : (_response$data = response.data) == null ? void 0 : (_response$data$choice2 = _response$data.choices[0]) == null ? void 0 : (_response$data$choice3 = _response$data$choice2.message) == null ? void 0 : _response$data$choice3.content) != null ? _response$data$choice : '';
    } catch (error) {
      (0, exports.captureException)(error, 'generateComment');
      throw error;
    }
  });
  return function generateComment(_x) {
    return _ref2.apply(this, arguments);
  };
}();
exports.generateComment = generateComment;
var onLeaveFeedback = function onLeaveFeedback(onAction) {
  var options = {
    AppleAppID: '1296604457',
    GooglePackageName: 'com.leelagame',
    OtherAndroidURL: 'https://play.google.com/store/apps/details?id=com.leelagame',
    preferInApp: true,
    openAppStoreIfInAppFails: true
  };
  react_native_rate_1.default.rate(options, onAction);
};
exports.onLeaveFeedback = onLeaveFeedback;
var handleCommentAi = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (_ref3) {
    var curItem = _ref3.curItem,
      systemMessage = _ref3.systemMessage,
      message = _ref3.message,
      _ref3$planText = _ref3.planText,
      planText = _ref3$planText === void 0 ? ' ' : _ref3$planText;
    var aiComment = yield (0, exports.generateComment)({
      message: message,
      systemMessage: systemMessage,
      planText: planText
    });
    if (curItem && aiComment) {}
  });
  return function handleCommentAi(_x2) {
    return _ref4.apply(this, arguments);
  };
}();
exports.handleCommentAi = handleCommentAi;
var captureException = function captureException(error, target) {
  if (!error) {
    console.log('%c captureException called with messing or incorrect arguments', 'background: #555; color: yellow');
    return;
  }
  console.error(`On:${target}/ My Error: ${error} `);
  if (!__DEV__) {
    Sentry.captureException(error);
  }
};
exports.captureException = captureException;
exports.win = react_native_1.Dimensions.get('window');
exports.W = exports.win.width;
exports.H = exports.win.height;
exports.imgH = Math.round(exports.W * 9 / 16);
exports.isIos = react_native_1.Platform.OS === 'ios';
var openUrl = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (url) {
    yield react_native_1.Linking.openURL(url);
  });
  return function openUrl(_x3) {
    return _ref5.apply(this, arguments);
  };
}();
exports.openUrl = openUrl;
var goHome = function goHome(navigation) {
  return function () {
    return navigation.popToTop()();
  };
};
exports.goHome = goHome;
exports.ENTITLEMENT_ID = 'Pro';
var getSystemLanguage = function getSystemLanguage() {
  var languageCode = 'en';
  if (react_native_1.Platform.OS === 'android') {
    languageCode = react_native_1.NativeModules.I18nManager.localeIdentifier;
  } else if (react_native_1.Platform.OS === 'ios') {
    languageCode = react_native_1.NativeModules.SettingsManager.settings.AppleLocale;
  }
  return languageCode.slice(0, 2).toLowerCase();
};
exports.getSystemLanguage = getSystemLanguage;
var accountHumanReadable = function accountHumanReadable(rlyAccount) {
  if (!rlyAccount) {
    return {
      short: '',
      full: ''
    };
  }
  var firstChars = rlyAccount.slice(0, 5);
  var lastChars = rlyAccount.slice(rlyAccount.length - 9, rlyAccount.length);
  return {
    short: `${firstChars}...${lastChars}`,
    full: rlyAccount
  };
};
exports.accountHumanReadable = accountHumanReadable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,