{"version":3,"names":["_browser","require","_core","_utils","_measurements","_wrapper","_nativeframes","_ops","_stalltracking","_transaction","_utils2","defaultReactNativeTracingOptions","Object","assign","defaultRequestInstrumentationOptions","idleTimeout","maxTransactionDuration","idleTimeoutMs","finalTimeoutMs","ignoreEmptyBackNavigationTransactions","beforeNavigate","context","enableAppStartTracking","enableNativeFramesTracking","enableStallTracking","enableUserInteractionTracing","ReactNativeTracing","options","arguments","length","undefined","_classCallCheck2","default","name","id","useAppStartWithProfiler","_b","_a","_d","_c","_createClass2","key","value","setupOnce","addGlobalEventProcessor","getCurrentHub","_this$options","traceFetch","traceXHR","tracingOrigins","shouldCreateSpanForRequest","tracePropagationTargets","routingInstrumentation","_getCurrentHub","_instrumentAppStart","NATIVE","nativeFramesInstrumentation","NativeFramesInstrumentation","self","getIntegration","disableNativeFramesTracking","stallTrackingInstrumentation","StallTrackingInstrumentation","registerRoutingInstrumentation","_onRouteWillChange","bind","_onConfirmRoute","logger","log","instrumentOutgoingRequests","onTransactionStart","transaction","isNearToNow","startTimestamp","onTransactionFinish","endTimestamp","onAppStartFinish","_appStartFinishTimestamp","startUserInteractionTransaction","userInteractionId","_this","elementId","op","error","_currentRoute","hub","call","activeTransaction","getActiveTransaction","activeTransactionIsNotInteraction","spanId","_inflightInteractionTransaction","warn","_this$options2","cancelIdleTimeout","restartOnChildSpanChange","trimEnd","startIdleTransaction","registerBeforeFinishCallback","onlySampleIfChildSpans","enableNative","appStart","fetchNativeAppStart","didFetchAppStart","getTimeOriginMilliseconds","_awaitingAppStartData","appStartTimeSeconds","appStartTime","idleTransaction","_createRouteTransaction","UI_LOAD","_addAppStartData","isColdStart","APP_START_COLD_OP","APP_START_WARM_OP","startChild","description","appStartDurationMilliseconds","_maxAppStart","measurement","APP_START_COLD","APP_START_WARM","setMeasurement","data","route","configureScope","scope","contextData","addBreadcrumb","category","type","message","from","previousRoute","to","setTag","_this2","setStatus","finish","_this$options3","expandedContext","adjustTransactionDuration","hasBeenSeen","spanRecorder","spans","filter","span","sampled","exports"],"sources":["../../../src/js/tracing/reactnativetracing.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { RequestInstrumentationOptions } from '@sentry/browser';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from '@sentry/browser';\nimport type { Hub, IdleTransaction, Transaction } from '@sentry/core';\nimport { getActiveTransaction, getCurrentHub, startIdleTransaction } from '@sentry/core';\nimport type { EventProcessor, Integration, Transaction as TransactionType, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { APP_START_COLD, APP_START_WARM } from '../measurements';\nimport type { NativeAppStartResponse } from '../NativeRNSentry';\nimport type { RoutingInstrumentationInstance } from '../tracing/routingInstrumentation';\nimport { NATIVE } from '../wrapper';\nimport { NativeFramesInstrumentation } from './nativeframes';\nimport { APP_START_COLD as APP_START_COLD_OP, APP_START_WARM as APP_START_WARM_OP, UI_LOAD } from './ops';\nimport { StallTrackingInstrumentation } from './stalltracking';\nimport { onlySampleIfChildSpans } from './transaction';\nimport type { BeforeNavigate, RouteChangeContextData } from './types';\nimport { adjustTransactionDuration, getTimeOriginMilliseconds, isNearToNow } from './utils';\n\nexport interface ReactNativeTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * @deprecated Replaced by idleTimeoutMs\n   */\n  idleTimeout: number;\n\n  /**\n   * @deprecated Replaced by maxTransactionDurationMs\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeoutMs: number;\n\n  /**\n   * The maximum duration (transaction duration + idle timeout) of a transaction\n   * before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in ms.\n   *\n   * Default: 600000\n   */\n  finalTimeoutMs: number;\n\n  /**\n   * The routing instrumentation to be used with the tracing integration.\n   * There is no routing instrumentation if nothing is passed.\n   */\n  routingInstrumentation?: RoutingInstrumentationInstance;\n\n  /**\n   * Does not sample transactions that are from routes that have been seen any more and don't have any spans.\n   * This removes a lot of the clutter as most back navigation transactions are now ignored.\n   *\n   * Default: true\n   */\n  ignoreEmptyBackNavigationTransactions: boolean;\n\n  /**\n   * beforeNavigate is called before a navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate: BeforeNavigate;\n\n  /**\n   * Track the app start time by adding measurements to the first route transaction. If there is no routing instrumentation\n   * an app start transaction will be started.\n   *\n   * Default: true\n   */\n  enableAppStartTracking: boolean;\n\n  /**\n   * Track slow/frozen frames from the native layer and adds them as measurements to all transactions.\n   */\n  enableNativeFramesTracking: boolean;\n\n  /**\n   * Track when and how long the JS event loop stalls for. Adds stalls as measurements to all transactions.\n   */\n  enableStallTracking: boolean;\n\n  /**\n   * Trace User Interaction events like touch and gestures.\n   */\n  enableUserInteractionTracing: boolean;\n}\n\nconst defaultReactNativeTracingOptions: ReactNativeTracingOptions = {\n  ...defaultRequestInstrumentationOptions,\n  idleTimeout: 1000,\n  maxTransactionDuration: 600,\n  idleTimeoutMs: 1000,\n  finalTimeoutMs: 600000,\n  ignoreEmptyBackNavigationTransactions: true,\n  beforeNavigate: context => context,\n  enableAppStartTracking: true,\n  enableNativeFramesTracking: true,\n  enableStallTracking: true,\n  enableUserInteractionTracing: false,\n};\n\n/**\n * Tracing integration for React Native.\n */\nexport class ReactNativeTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ReactNativeTracing';\n  /** We filter out App starts more than 60s */\n  private static _maxAppStart: number = 60000;\n  /**\n   * @inheritDoc\n   */\n  public name: string = ReactNativeTracing.id;\n\n  /** ReactNativeTracing options */\n  public options: ReactNativeTracingOptions;\n\n  public nativeFramesInstrumentation?: NativeFramesInstrumentation;\n  public stallTrackingInstrumentation?: StallTrackingInstrumentation;\n  public useAppStartWithProfiler: boolean = false;\n\n  private _inflightInteractionTransaction?: IdleTransaction;\n  private _getCurrentHub?: () => Hub;\n  private _awaitingAppStartData?: NativeAppStartResponse;\n  private _appStartFinishTimestamp?: number;\n  private _currentRoute?: string;\n\n  public constructor(options: Partial<ReactNativeTracingOptions> = {}) {\n    this.options = {\n      ...defaultReactNativeTracingOptions,\n      ...options,\n      finalTimeoutMs:\n        options.finalTimeoutMs ??\n        // eslint-disable-next-line deprecation/deprecation\n        (typeof options.maxTransactionDuration === 'number'\n          ? // eslint-disable-next-line deprecation/deprecation\n            options.maxTransactionDuration * 1000\n          : undefined) ??\n        defaultReactNativeTracingOptions.finalTimeoutMs,\n      idleTimeoutMs:\n        options.idleTimeoutMs ??\n        // eslint-disable-next-line deprecation/deprecation\n        options.idleTimeout ??\n        defaultReactNativeTracingOptions.idleTimeoutMs,\n    };\n  }\n\n  /**\n   *  Registers routing and request instrumentation.\n   */\n  public setupOnce(\n    // @ts-ignore TODO\n    addGlobalEventProcessor: (callback: EventProcessor) => void,\n    getCurrentHub: () => Hub,\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      traceFetch,\n      traceXHR,\n      // eslint-disable-next-line deprecation/deprecation\n      tracingOrigins,\n      // @ts-ignore TODO\n      shouldCreateSpanForRequest,\n      tracePropagationTargets,\n      routingInstrumentation,\n      enableAppStartTracking,\n      enableNativeFramesTracking,\n      enableStallTracking,\n    } = this.options;\n\n    this._getCurrentHub = getCurrentHub;\n\n    if (enableAppStartTracking) {\n      void this._instrumentAppStart();\n    }\n\n    if (enableNativeFramesTracking) {\n      NATIVE.enableNativeFramesTracking();\n      this.nativeFramesInstrumentation = new NativeFramesInstrumentation(addGlobalEventProcessor, () => {\n        const self = getCurrentHub().getIntegration(ReactNativeTracing);\n\n        if (self) {\n          return !!self.nativeFramesInstrumentation;\n        }\n\n        return false;\n      });\n    } else {\n      NATIVE.disableNativeFramesTracking();\n    }\n\n    if (enableStallTracking) {\n      this.stallTrackingInstrumentation = new StallTrackingInstrumentation();\n    }\n\n    if (routingInstrumentation) {\n      routingInstrumentation.registerRoutingInstrumentation(\n        this._onRouteWillChange.bind(this),\n        this.options.beforeNavigate,\n        this._onConfirmRoute.bind(this),\n      );\n    } else {\n      logger.log('[ReactNativeTracing] Not instrumenting route changes as routingInstrumentation has not been set.');\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n      tracePropagationTargets,\n    });\n  }\n\n  /**\n   * To be called on a transaction start. Can have async methods\n   */\n  public onTransactionStart(transaction: Transaction): void {\n    if (isNearToNow(transaction.startTimestamp)) {\n      // Only if this method is called at or within margin of error to the start timestamp.\n      this.nativeFramesInstrumentation?.onTransactionStart(transaction);\n      this.stallTrackingInstrumentation?.onTransactionStart(transaction);\n    }\n  }\n\n  /**\n   * To be called on a transaction finish. Cannot have async methods.\n   */\n  public onTransactionFinish(transaction: Transaction, endTimestamp?: number): void {\n    this.nativeFramesInstrumentation?.onTransactionFinish(transaction);\n    this.stallTrackingInstrumentation?.onTransactionFinish(transaction, endTimestamp);\n  }\n\n  /**\n   * Called by the ReactNativeProfiler component on first component mount.\n   */\n  public onAppStartFinish(endTimestamp: number): void {\n    this._appStartFinishTimestamp = endTimestamp;\n  }\n\n  /**\n   * Starts a new transaction for a user interaction.\n   * @param userInteractionId Consists of `op` representation UI Event and `elementId` unique element identifier on current screen.\n   */\n  public startUserInteractionTransaction(userInteractionId: {\n    elementId: string | undefined;\n    op: string;\n  }): TransactionType | undefined {\n    const { elementId, op } = userInteractionId;\n    if (!this.options.enableUserInteractionTracing) {\n      logger.log('[ReactNativeTracing] User Interaction Tracing is disabled.');\n      return;\n    }\n    if (!this.options.routingInstrumentation) {\n      logger.error(\n        '[ReactNativeTracing] User Interaction Tracing is not working because no routing instrumentation is set.',\n      );\n      return;\n    }\n    if (!elementId) {\n      logger.log('[ReactNativeTracing] User Interaction Tracing can not create transaction with undefined elementId.');\n      return;\n    }\n    if (!this._currentRoute) {\n      logger.log('[ReactNativeTracing] User Interaction Tracing can not create transaction without a current route.');\n      return;\n    }\n\n    const hub = this._getCurrentHub?.() || getCurrentHub();\n    const activeTransaction = getActiveTransaction(hub);\n    const activeTransactionIsNotInteraction =\n      activeTransaction?.spanId !== this._inflightInteractionTransaction?.spanId;\n    if (activeTransaction && activeTransactionIsNotInteraction) {\n      logger.warn(\n        `[ReactNativeTracing] Did not create ${op} transaction because active transaction ${activeTransaction.name} exists on the scope.`,\n      );\n      return;\n    }\n\n    const { idleTimeoutMs, finalTimeoutMs } = this.options;\n\n    if (this._inflightInteractionTransaction) {\n      this._inflightInteractionTransaction.cancelIdleTimeout(undefined, { restartOnChildSpanChange: false });\n      this._inflightInteractionTransaction = undefined;\n    }\n\n    const name = `${this._currentRoute}.${elementId}`;\n    const context: TransactionContext = {\n      name,\n      op,\n      trimEnd: true,\n    };\n    this._inflightInteractionTransaction = startIdleTransaction(hub, context, idleTimeoutMs, finalTimeoutMs, true);\n    this._inflightInteractionTransaction.registerBeforeFinishCallback((transaction: IdleTransaction) => {\n      this._inflightInteractionTransaction = undefined;\n      this.onTransactionFinish(transaction);\n    });\n    this._inflightInteractionTransaction.registerBeforeFinishCallback(onlySampleIfChildSpans);\n    this.onTransactionStart(this._inflightInteractionTransaction);\n    logger.log(`[ReactNativeTracing] User Interaction Tracing Created ${op} transaction ${name}.`);\n    return this._inflightInteractionTransaction;\n  }\n\n  /**\n   * Instruments the app start measurements on the first route transaction.\n   * Starts a route transaction if there isn't routing instrumentation.\n   */\n  private async _instrumentAppStart(): Promise<void> {\n    if (!this.options.enableAppStartTracking || !NATIVE.enableNative) {\n      return;\n    }\n\n    const appStart = await NATIVE.fetchNativeAppStart();\n\n    if (!appStart || appStart.didFetchAppStart) {\n      return;\n    }\n\n    if (!this.useAppStartWithProfiler) {\n      this._appStartFinishTimestamp = getTimeOriginMilliseconds() / 1000;\n    }\n\n    if (this.options.routingInstrumentation) {\n      this._awaitingAppStartData = appStart;\n    } else {\n      const appStartTimeSeconds = appStart.appStartTime / 1000;\n\n      const idleTransaction = this._createRouteTransaction({\n        name: 'App Start',\n        op: UI_LOAD,\n        startTimestamp: appStartTimeSeconds,\n      });\n\n      if (idleTransaction) {\n        this._addAppStartData(idleTransaction, appStart);\n      }\n    }\n  }\n\n  /**\n   * Adds app start measurements and starts a child span on a transaction.\n   */\n  private _addAppStartData(transaction: IdleTransaction, appStart: NativeAppStartResponse): void {\n    if (!this._appStartFinishTimestamp) {\n      logger.warn('App start was never finished.');\n      return;\n    }\n\n    const appStartTimeSeconds = appStart.appStartTime / 1000;\n\n    const op = appStart.isColdStart ? APP_START_COLD_OP : APP_START_WARM_OP;\n    transaction.startChild({\n      description: appStart.isColdStart ? 'Cold App Start' : 'Warm App Start',\n      op,\n      startTimestamp: appStartTimeSeconds,\n      endTimestamp: this._appStartFinishTimestamp,\n    });\n\n    const appStartDurationMilliseconds = this._appStartFinishTimestamp * 1000 - appStart.appStartTime;\n\n    // we filter out app start more than 60s.\n    // this could be due to many different reasons.\n    // we've seen app starts with hours, days and even months.\n    if (appStartDurationMilliseconds >= ReactNativeTracing._maxAppStart) {\n      return;\n    }\n\n    const measurement = appStart.isColdStart ? APP_START_COLD : APP_START_WARM;\n    transaction.setMeasurement(measurement, appStartDurationMilliseconds, 'millisecond');\n  }\n\n  /** To be called when the route changes, but BEFORE the components of the new route mount. */\n  private _onRouteWillChange(context: TransactionContext): TransactionType | undefined {\n    return this._createRouteTransaction(context);\n  }\n\n  /**\n   * Creates a breadcrumb and sets the current route as a tag.\n   */\n  private _onConfirmRoute(context: TransactionContext): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this._currentRoute = context.data?.route?.name;\n\n    this._getCurrentHub?.().configureScope(scope => {\n      if (context.data) {\n        const contextData = context.data as RouteChangeContextData;\n\n        scope.addBreadcrumb({\n          category: 'navigation',\n          type: 'navigation',\n          // We assume that context.name is the name of the route.\n          message: `Navigation to ${context.name}`,\n          data: {\n            from: contextData.previousRoute?.name,\n            to: contextData.route.name,\n          },\n        });\n      }\n\n      scope.setTag('routing.route.name', context.name);\n    });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): IdleTransaction | undefined {\n    if (!this._getCurrentHub) {\n      logger.warn(`[ReactNativeTracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    if (this._inflightInteractionTransaction) {\n      logger.log(\n        `[ReactNativeTracing] Canceling ${this._inflightInteractionTransaction.op} transaction because navigation ${context.op}.`,\n      );\n      this._inflightInteractionTransaction.setStatus('cancelled');\n      this._inflightInteractionTransaction.finish();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { idleTimeoutMs, finalTimeoutMs } = this.options;\n\n    const expandedContext = {\n      ...context,\n      trimEnd: true,\n    };\n\n    const hub = this._getCurrentHub();\n    const idleTransaction = startIdleTransaction(hub as Hub, expandedContext, idleTimeoutMs, finalTimeoutMs, true);\n\n    this.onTransactionStart(idleTransaction);\n\n    logger.log(`[ReactNativeTracing] Starting ${context.op} transaction \"${context.name}\" on scope`);\n\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this.onTransactionFinish(transaction, endTimestamp);\n    });\n\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      if (this.options.enableAppStartTracking && this._awaitingAppStartData) {\n        transaction.startTimestamp = this._awaitingAppStartData.appStartTime / 1000;\n        transaction.op = 'ui.load';\n\n        this._addAppStartData(transaction, this._awaitingAppStartData);\n\n        this._awaitingAppStartData = undefined;\n      }\n    });\n\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      adjustTransactionDuration(finalTimeoutMs, transaction, endTimestamp);\n    });\n\n    if (this.options.ignoreEmptyBackNavigationTransactions) {\n      idleTransaction.registerBeforeFinishCallback(transaction => {\n        if (\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          transaction.data?.route?.hasBeenSeen &&\n          (!transaction.spanRecorder ||\n            transaction.spanRecorder.spans.filter(span => span.spanId !== transaction.spanId).length === 0)\n        ) {\n          logger.log(\n            '[ReactNativeTracing] Not sampling transaction as route has been seen before. Pass ignoreEmptyBackNavigationTransactions = false to disable this feature.',\n          );\n          // Route has been seen before and has no child spans.\n          transaction.sampled = false;\n        }\n      });\n    }\n\n    return idleTransaction;\n  }\n}\n"],"mappings":"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"}