{"version":3,"names":["_core","require","_utils","_worldwide","ReactNativeErrorHandlers","options","_classCallCheck2","default","name","id","_options","Object","assign","onerror","onunhandledrejection","patchGlobalPromise","_createClass2","key","value","setupOnce","_handleUnhandledRejections","_handleOnError","_polyfillPromise","_attachUnhandledRejectionHandler","_checkPromiseAndWarn","_require","polyfillGlobal","Promise","_getPromisePolyfill","tracking","promiseRejectionTrackingOptions","onUnhandled","rejection","arguments","length","undefined","console","warn","onHandled","enable","allRejections","error","__DEV__","getCurrentHub","captureException","data","originalException","ReactNativePromise","PromisePackagePromise","UsedPromisePolyfill","logger","RN_GLOBAL_OBJ","log","e","_this","handlingFatal","errorUtils","ErrorUtils","defaultHandler","getGlobalHandler","setGlobalHandler","isFatal","__awaiter","shouldHandleFatal","currentHub","client","getClient","scope","getScope","getOptions","hint","attachments","getAttachments","event","eventFromException","level","addExceptionMechanism","handled","type","captureEvent","flush","shutdownTimeout","then","exports"],"sources":["../../../src/js/integrations/reactnativeerrorhandlers.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport type { EventHint, Integration, SeverityLevel } from '@sentry/types';\nimport { addExceptionMechanism, logger } from '@sentry/utils';\n\nimport type { ReactNativeClient } from '../client';\nimport { RN_GLOBAL_OBJ } from '../utils/worldwide';\n\n/** ReactNativeErrorHandlers Options */\ninterface ReactNativeErrorHandlersOptions {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n  patchGlobalPromise: boolean;\n}\n\ninterface PromiseRejectionTrackingOptions {\n  onUnhandled: (id: string, error: unknown) => void;\n  onHandled: (id: string) => void;\n}\n\n/** ReactNativeErrorHandlers Integration */\nexport class ReactNativeErrorHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ReactNativeErrorHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = ReactNativeErrorHandlers.id;\n\n  /** ReactNativeOptions */\n  private readonly _options: ReactNativeErrorHandlersOptions;\n\n  /** Constructor */\n  public constructor(options?: Partial<ReactNativeErrorHandlersOptions>) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      patchGlobalPromise: true,\n      ...options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    this._handleUnhandledRejections();\n    this._handleOnError();\n  }\n\n  /**\n   * Handle Promises\n   */\n  private _handleUnhandledRejections(): void {\n    if (this._options.onunhandledrejection) {\n      if (this._options.patchGlobalPromise) {\n        this._polyfillPromise();\n      }\n\n      this._attachUnhandledRejectionHandler();\n      this._checkPromiseAndWarn();\n    }\n  }\n  /**\n   * Polyfill the global promise instance with one we can be sure that we can attach the tracking to.\n   *\n   * In newer RN versions >=0.63, the global promise is not the same reference as the one imported from the promise library.\n   * This is due to a version mismatch between promise versions.\n   * Originally we tried a solution where we would have you put a package resolution to ensure the promise instances match. However,\n   * - Using a package resolution requires the you to manually troubleshoot.\n   * - The package resolution fix no longer works with 0.67 on iOS Hermes.\n   */\n  private _polyfillPromise(): void {\n    /* eslint-disable import/no-extraneous-dependencies,@typescript-eslint/no-var-requires */\n    const { polyfillGlobal } = require('react-native/Libraries/Utilities/PolyfillFunctions');\n\n    const Promise = this._getPromisePolyfill();\n\n    // As of RN 0.67 only done and finally are used\n    require('promise/setimmediate/done');\n    require('promise/setimmediate/finally');\n\n    polyfillGlobal('Promise', () => Promise);\n    /* eslint-enable import/no-extraneous-dependencies,@typescript-eslint/no-var-requires */\n  }\n\n  /**\n   * Single source of truth for the Promise implementation we want to use.\n   * This is important for verifying that the rejected promise tracing will work as expected.\n   */\n  private _getPromisePolyfill(): unknown {\n    /* eslint-disable import/no-extraneous-dependencies,@typescript-eslint/no-var-requires */\n    // Below, we follow the exact way React Native initializes its promise library, and we globally replace it.\n    return require('promise/setimmediate/es6-extensions');\n  }\n\n  /**\n   * Attach the unhandled rejection handler\n   */\n  private _attachUnhandledRejectionHandler(): void {\n    const tracking: {\n      disable: () => void;\n      enable: (arg: unknown) => void;\n      // eslint-disable-next-line import/no-extraneous-dependencies,@typescript-eslint/no-var-requires\n    } = require('promise/setimmediate/rejection-tracking');\n\n    const promiseRejectionTrackingOptions: PromiseRejectionTrackingOptions = {\n      onUnhandled: (id, rejection = {}) => {\n        // eslint-disable-next-line no-console\n        console.warn(`Possible Unhandled Promise Rejection (id: ${id}):\\n${rejection}`);\n      },\n      onHandled: id => {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Promise Rejection Handled (id: ${id})\\n` +\n            'This means you can ignore any previous messages of the form ' +\n            `\"Possible Unhandled Promise Rejection (id: ${id}):\"`,\n        );\n      },\n    };\n\n    tracking.enable({\n      allRejections: true,\n      onUnhandled: (id: string, error: Error) => {\n        if (__DEV__) {\n          promiseRejectionTrackingOptions.onUnhandled(id, error);\n        }\n\n        getCurrentHub().captureException(error, {\n          data: { id },\n          originalException: error,\n        });\n      },\n      onHandled: (id: string) => {\n        promiseRejectionTrackingOptions.onHandled(id);\n      },\n    });\n  }\n  /**\n   * Checks if the promise is the same one or not, if not it will warn the user\n   */\n  private _checkPromiseAndWarn(): void {\n    try {\n      // `promise` package is a dependency of react-native, therefore it is always available.\n      // but it is possible that the user has installed a different version of promise\n      // or dependency that uses a different version.\n      // We have to check if the React Native Promise and the `promise` package Promise are using the same reference.\n      // If they are not, likely there are multiple versions of the `promise` package installed.\n      // eslint-disable-next-line @typescript-eslint/no-var-requires,import/no-extraneous-dependencies\n      const ReactNativePromise = require('react-native/Libraries/Promise');\n      // eslint-disable-next-line @typescript-eslint/no-var-requires,import/no-extraneous-dependencies\n      const PromisePackagePromise = require('promise/setimmediate/es6-extensions');\n      const UsedPromisePolyfill = this._getPromisePolyfill();\n\n      if (ReactNativePromise !== PromisePackagePromise) {\n        logger.warn(\n          'You appear to have multiple versions of the \"promise\" package installed. ' +\n            'This may cause unexpected behavior like undefined `Promise.allSettled`. ' +\n            'Please install the `promise` package manually using the exact version as the React Native package. ' +\n            'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.',\n        );\n      }\n\n      // This only make sense if the user disabled the integration Polyfill\n      if (UsedPromisePolyfill !== RN_GLOBAL_OBJ.Promise) {\n        logger.warn(\n          'Unhandled promise rejections will not be caught by Sentry. ' +\n            'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.',\n        );\n      } else {\n        logger.log('Unhandled promise rejections will be caught by Sentry.');\n      }\n    } catch (e) {\n      // Do Nothing\n      logger.warn(\n        'Unhandled promise rejections will not be caught by Sentry. ' +\n          'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.',\n      );\n    }\n  }\n  /**\n   * Handle errors\n   */\n  private _handleOnError(): void {\n    if (this._options.onerror) {\n      let handlingFatal = false;\n\n      const errorUtils = RN_GLOBAL_OBJ.ErrorUtils;\n      if (!errorUtils) {\n        logger.warn('ErrorUtils not found. Can be caused by different environment for example react-native-web.');\n        return;\n      }\n\n      const defaultHandler = errorUtils.getGlobalHandler && errorUtils.getGlobalHandler();\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      errorUtils.setGlobalHandler(async (error: any, isFatal?: boolean) => {\n        // We want to handle fatals, but only in production mode.\n        const shouldHandleFatal = isFatal && !__DEV__;\n        if (shouldHandleFatal) {\n          if (handlingFatal) {\n            logger.log('Encountered multiple fatals in a row. The latest:', error);\n            return;\n          }\n          handlingFatal = true;\n        }\n\n        const currentHub = getCurrentHub();\n        const client = currentHub.getClient<ReactNativeClient>();\n        const scope = currentHub.getScope();\n\n        if (!client) {\n          logger.error('Sentry client is missing, the error event might be lost.', error);\n\n          // If there is no client something is fishy, anyway we call the default handler\n          defaultHandler(error, isFatal);\n\n          return;\n        }\n\n        const options = client.getOptions();\n\n        const hint: EventHint = {\n          originalException: error,\n          attachments: scope?.getAttachments(),\n        };\n        const event = await client.eventFromException(error, hint);\n\n        if (isFatal) {\n          event.level = 'fatal' as SeverityLevel;\n\n          addExceptionMechanism(event, {\n            handled: false,\n            type: 'onerror',\n          });\n        }\n\n        currentHub.captureEvent(event, hint);\n\n        if (!__DEV__) {\n          void client.flush(options.shutdownTimeout || 2000).then(() => {\n            defaultHandler(error, isFatal);\n          });\n        } else {\n          // If in dev, we call the default handler anyway and hope the error will be sent\n          // Just for a better dev experience\n          defaultHandler(error, isFatal);\n        }\n      });\n    }\n  }\n}\n"],"mappings":"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"}