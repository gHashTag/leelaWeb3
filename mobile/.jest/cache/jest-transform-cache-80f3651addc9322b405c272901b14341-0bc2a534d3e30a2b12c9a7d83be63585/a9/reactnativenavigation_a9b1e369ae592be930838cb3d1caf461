bf12dfca92bc654d0a52bec738a630bb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNativeNavigationInstrumentation = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _utils = require("@sentry/utils");
var _routingInstrumentation = require("./routingInstrumentation");
var _utils2 = require("./utils");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var defaultOptions = {
  routeChangeTimeoutMs: 1000,
  enableTabsInstrumentation: true
};
var ReactNativeNavigationInstrumentation = function (_InternalRoutingInstr) {
  (0, _inherits2.default)(ReactNativeNavigationInstrumentation, _InternalRoutingInstr);
  var _super = _createSuper(ReactNativeNavigationInstrumentation);
  function ReactNativeNavigationInstrumentation(navigation) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, ReactNativeNavigationInstrumentation);
    _this = _super.call(this);
    _this.name = ReactNativeNavigationInstrumentation.instrumentationName;
    _this._prevComponentEvent = null;
    _this._recentComponentIds = [];
    _this._navigation = navigation;
    _this._options = Object.assign(Object.assign({}, defaultOptions), options);
    return _this;
  }
  (0, _createClass2.default)(ReactNativeNavigationInstrumentation, [{
    key: "registerRoutingInstrumentation",
    value: function registerRoutingInstrumentation(listener, beforeNavigate, onConfirmRoute) {
      (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeNavigationInstrumentation.prototype), "registerRoutingInstrumentation", this).call(this, listener, beforeNavigate, onConfirmRoute);
      this._navigation.events().registerCommandListener(this._onNavigation.bind(this));
      if (this._options.enableTabsInstrumentation) {
        this._navigation.events().registerBottomTabPressedListener(this._onNavigation.bind(this));
      }
      this._navigation.events().registerComponentWillAppearListener(this._onComponentWillAppear.bind(this));
    }
  }, {
    key: "_onNavigation",
    value: function _onNavigation() {
      if (this._latestTransaction) {
        this._discardLatestTransaction();
      }
      this._latestTransaction = this.onRouteWillChange((0, _utils2.getBlankTransactionContext)(ReactNativeNavigationInstrumentation.name));
      this._stateChangeTimeout = setTimeout(this._discardLatestTransaction.bind(this), this._options.routeChangeTimeoutMs);
    }
  }, {
    key: "_onComponentWillAppear",
    value: function _onComponentWillAppear(event) {
      var _a, _b;
      if (!this._latestTransaction) {
        return;
      }
      var isSameComponent = this._prevComponentEvent && event.componentId === this._prevComponentEvent.componentId;
      if (isSameComponent) {
        this._discardLatestTransaction();
        return;
      }
      this._clearStateChangeTimeout();
      var originalContext = this._latestTransaction.toContext();
      var routeHasBeenSeen = this._recentComponentIds.includes(event.componentId);
      var data = Object.assign(Object.assign({}, originalContext.data), {
        route: Object.assign(Object.assign({}, event), {
          name: event.componentName,
          hasBeenSeen: routeHasBeenSeen
        }),
        previousRoute: this._prevComponentEvent ? Object.assign(Object.assign({}, this._prevComponentEvent), {
          name: (_a = this._prevComponentEvent) === null || _a === void 0 ? void 0 : _a.componentName
        }) : null
      });
      var updatedContext = Object.assign(Object.assign({}, originalContext), {
        name: event.componentName,
        tags: Object.assign(Object.assign({}, originalContext.tags), {
          'routing.route.name': event.componentName
        }),
        data: data
      });
      var finalContext = this._prepareFinalContext(updatedContext);
      this._latestTransaction.updateWithContext(finalContext);
      var isCustomName = updatedContext.name !== finalContext.name;
      this._latestTransaction.setName(finalContext.name, isCustomName ? _utils2.customTransactionSource : _utils2.defaultTransactionSource);
      (_b = this._onConfirmRoute) === null || _b === void 0 ? void 0 : _b.call(this, finalContext);
      this._prevComponentEvent = event;
      this._latestTransaction = undefined;
    }
  }, {
    key: "_prepareFinalContext",
    value: function _prepareFinalContext(updatedContext) {
      var _a;
      var finalContext = (_a = this._beforeNavigate) === null || _a === void 0 ? void 0 : _a.call(this, Object.assign({}, updatedContext));
      if (!finalContext) {
        _utils.logger.error(`[${ReactNativeNavigationInstrumentation.name}] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`);
        finalContext = Object.assign(Object.assign({}, updatedContext), {
          sampled: false
        });
      }
      if (finalContext.sampled === false) {
        _utils.logger.log(`[${ReactNativeNavigationInstrumentation.name}] Will not send transaction "${finalContext.name}" due to beforeNavigate.`);
      }
      return finalContext;
    }
  }, {
    key: "_discardLatestTransaction",
    value: function _discardLatestTransaction() {
      if (this._latestTransaction) {
        this._latestTransaction.sampled = false;
        this._latestTransaction.finish();
        this._latestTransaction = undefined;
      }
      this._clearStateChangeTimeout();
    }
  }, {
    key: "_clearStateChangeTimeout",
    value: function _clearStateChangeTimeout() {
      if (typeof this._stateChangeTimeout !== 'undefined') {
        clearTimeout(this._stateChangeTimeout);
        this._stateChangeTimeout = undefined;
      }
    }
  }]);
  return ReactNativeNavigationInstrumentation;
}(_routingInstrumentation.InternalRoutingInstrumentation);
exports.ReactNativeNavigationInstrumentation = ReactNativeNavigationInstrumentation;
ReactNativeNavigationInstrumentation.instrumentationName = 'react-native-navigation';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,