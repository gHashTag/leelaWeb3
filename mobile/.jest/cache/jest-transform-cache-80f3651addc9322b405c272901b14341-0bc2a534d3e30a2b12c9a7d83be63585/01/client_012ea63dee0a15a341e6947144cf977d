f36398ae360781b0adf69d570c2fe20e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNativeClient = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _tslib = require("tslib");
var _browser = require("@sentry/browser");
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var _reactNative = require("react-native");
var _factory = require("./integrations/factory");
var _screenshot = require("./integrations/screenshot");
var _sdkinfo = require("./integrations/sdkinfo");
var _tracing = require("./tracing");
var _envelope = require("./utils/envelope");
var _ignorerequirecyclelogs = require("./utils/ignorerequirecyclelogs");
var _outcome = require("./utils/outcome");
var _wrapper = require("./wrapper");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ReactNativeClient = function (_BaseClient) {
  (0, _inherits2.default)(ReactNativeClient, _BaseClient);
  var _super = _createSuper(ReactNativeClient);
  function ReactNativeClient(options) {
    var _this;
    (0, _classCallCheck2.default)(this, ReactNativeClient);
    (0, _ignorerequirecyclelogs.ignoreRequireCycleLogs)();
    options._metadata = options._metadata || {};
    options._metadata.sdk = options._metadata.sdk || _sdkinfo.defaultSdkInfo;
    _this = _super.call(this, options);
    _this._outcomesBuffer = [];
    void _this._initNativeSdk();
    return _this;
  }
  (0, _createClass2.default)(ReactNativeClient, [{
    key: "eventFromException",
    value: function eventFromException(exception) {
      var _this2 = this;
      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return _screenshot.Screenshot.attachScreenshotToEventHint(hint, this._options).then(function (hintWithScreenshot) {
        return (0, _browser.eventFromException)(_this2._options.stackParser, exception, hintWithScreenshot, _this2._options.attachStacktrace);
      });
    }
  }, {
    key: "eventFromMessage",
    value: function eventFromMessage(message, level, hint) {
      return (0, _browser.eventFromMessage)(this._options.stackParser, message, level, hint, this._options.attachStacktrace).then(function (event) {
        var _a;
        if (!((_a = event.exception) === null || _a === void 0 ? void 0 : _a.values) || event.exception.values.length <= 0) {
          return event;
        }
        var values = event.exception.values.map(function (exception) {
          return {
            stacktrace: exception.stacktrace
          };
        });
        event.threads = {
          values: values
        };
        delete event.exception;
        return event;
      });
    }
  }, {
    key: "nativeCrash",
    value: function nativeCrash() {
      _wrapper.NATIVE.nativeCrash();
    }
  }, {
    key: "close",
    value: function close() {
      return (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeClient.prototype), "close", this).call(this).then(function (result) {
        return _wrapper.NATIVE.closeNativeSdk().then(function () {
          return result;
        });
      });
    }
  }, {
    key: "captureUserFeedback",
    value: function captureUserFeedback(feedback) {
      var envelope = (0, _envelope.createUserFeedbackEnvelope)(feedback, {
        metadata: this._options._metadata,
        dsn: this.getDsn(),
        tunnel: this._options.tunnel
      });
      this._sendEnvelope(envelope);
    }
  }, {
    key: "setupIntegrations",
    value: function setupIntegrations() {
      var _a;
      (0, _get2.default)((0, _getPrototypeOf2.default)(ReactNativeClient.prototype), "setupIntegrations", this).call(this);
      var tracing = this.getIntegration(_tracing.ReactNativeTracing);
      var routingName = (_a = tracing === null || tracing === void 0 ? void 0 : tracing.options.routingInstrumentation) === null || _a === void 0 ? void 0 : _a.name;
      if (routingName) {
        this.addIntegration((0, _factory.createIntegration)(routingName));
      }
      var enableUserInteractionTracing = tracing === null || tracing === void 0 ? void 0 : tracing.options.enableUserInteractionTracing;
      if (enableUserInteractionTracing) {
        this.addIntegration((0, _factory.createIntegration)('ReactNativeUserInteractionTracing'));
      }
    }
  }, {
    key: "_sendEnvelope",
    value: function _sendEnvelope(envelope) {
      var outcomes = this._clearOutcomes();
      this._outcomesBuffer = (0, _outcome.mergeOutcomes)(this._outcomesBuffer, outcomes);
      if (this._options.sendClientReports) {
        this._attachClientReportTo(this._outcomesBuffer, envelope);
      }
      var shouldClearOutcomesBuffer = true;
      if (this._transport && this._dsn) {
        this.emit('beforeEnvelope', envelope);
        this._transport.send(envelope).then(null, function (reason) {
          if (reason instanceof _utils.SentryError) {
            shouldClearOutcomesBuffer = false;
            _utils.logger.error('SentryError while sending event, keeping outcomes buffer:', reason);
          } else {
            _utils.logger.error('Error while sending event:', reason);
          }
        });
      } else {
        _utils.logger.error('Transport disabled');
      }
      if (shouldClearOutcomesBuffer) {
        this._outcomesBuffer = [];
      }
    }
  }, {
    key: "_initNativeSdk",
    value: function _initNativeSdk() {
      var _a, _b;
      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
        var didCallNativeInit = false;
        try {
          didCallNativeInit = yield _wrapper.NATIVE.initNativeSdk(this._options);
        } catch (_) {
          this._showCannotConnectDialog();
        } finally {
          try {
            (_b = (_a = this._options).onReady) === null || _b === void 0 ? void 0 : _b.call(_a, {
              didCallNativeInit: didCallNativeInit
            });
          } catch (error) {
            _utils.logger.error('The OnReady callback threw an error: ', error);
          }
        }
      });
    }
  }, {
    key: "_showCannotConnectDialog",
    value: function _showCannotConnectDialog() {
      if (__DEV__ && this._options.enableNativeNagger) {
        _reactNative.Alert.alert('Sentry', 'Warning, could not connect to Sentry native SDK.\nIf you do not want to use the native component please pass `enableNative: false` in the options.\nVisit: https://docs.sentry.io/platforms/react-native/#linking for more details.');
      }
    }
  }, {
    key: "_attachClientReportTo",
    value: function _attachClientReportTo(outcomes, envelope) {
      if (outcomes.length > 0) {
        var clientReportItem = [{
          type: 'client_report'
        }, {
          timestamp: (0, _utils.dateTimestampInSeconds)(),
          discarded_events: outcomes
        }];
        envelope[_envelope.items].push(clientReportItem);
      }
    }
  }]);
  return ReactNativeClient;
}(_core.BaseClient);
exports.ReactNativeClient = ReactNativeClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,