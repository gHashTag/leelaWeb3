9392d37820ca2e86519abaa4c11d09c9
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
var Text_1 = require("./Text");
describe('Text Component', function () {
  it('Text component snapshot', function () {
    var component = react_test_renderer_1.default.create((0, _jsxRuntime.jsx)(Text_1.Text, {
      title: "Snapshot Test",
      testID: "snapshot-text"
    }));
    var tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        testID: "text-component",
        title: "Test Title"
      })),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('applies the correct style based on the "h" prop', function () {
    var styles = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5'];
    styles.forEach(function (style) {
      var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
          testID: "text-component",
          title: "Test Title",
          h: style
        })),
        getByTestId = _ref2.getByTestId;
      var receivedStyle = getByTestId('text-component').props.style;
      expect(receivedStyle).toEqual(expect.objectContaining(Text_1.textStyles[style]));
    });
  });
  it('should call the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        title: "Clickable Text",
        onPress: onPressMock,
        testID: "clickable-text"
      })),
      getByTestId = _ref3.getByTestId;
    var clickableText = getByTestId('clickable-text');
    react_native_1.fireEvent.press(clickableText);
    expect(onPressMock).toHaveBeenCalled();
  });
  it('displays the correct title', function () {
    var title = 'Test Title';
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        testID: "text-component",
        title: title
      })),
      getByTestId = _ref4.getByTestId;
    var textComponent = getByTestId('text-component');
    expect(textComponent.props.children).toBe(title);
  });
  it('displays truncated text when numberOfLines is set', function () {
    var longText = 'This is a very long text that should be truncated';
    var _ref5 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        testID: "text-component",
        title: longText,
        numberOfLines: 1
      })),
      getByTestId = _ref5.getByTestId;
    var textComponent = getByTestId('text-component');
    expect(textComponent.props.children).toBe(longText);
  });
  it('applies additional custom styles', function () {
    var customStyle = {
      fontSize: 20,
      fontWeight: 'bold'
    };
    var _ref6 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        testID: "text-component",
        title: "Test Title",
        textStyle: customStyle
      })),
      getByTestId = _ref6.getByTestId;
    var textComponent = getByTestId('text-component');
    var receivedStyle = textComponent.props.style;
    expect(receivedStyle).toEqual(expect.objectContaining(customStyle));
  });
  it('displays truncated text when numberOfLines is set', function () {
    var longText = 'This is a very long text that should be truncated';
    var _ref7 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(Text_1.Text, {
        testID: "text-component",
        title: longText,
        numberOfLines: 1
      })),
      getByTestId = _ref7.getByTestId;
    var textComponent = getByTestId('text-component');
    expect(textComponent.props.children).toBe(longText);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,