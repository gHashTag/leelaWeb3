7faca4367852f0071e75018349e3bf80
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimatedComponent;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _useMergeRefs = _interopRequireDefault(require("../Utilities/useMergeRefs"));
var _useAnimatedProps3 = _interopRequireDefault(require("./useAnimatedProps"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "/Users/playra/LeelaAiWeb3/node_modules/react-native/Libraries/Animated/createAnimatedComponent.js";
var _excluded = ["style"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function createAnimatedComponent(Component) {
  var _this = this;
  return React.forwardRef(function (props, forwardedRef) {
    var _useAnimatedProps = (0, _useAnimatedProps3.default)(props),
      _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
      reducedProps = _useAnimatedProps2[0],
      callbackRef = _useAnimatedProps2[1];
    var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues,
      style = reducedProps.style;
    var _ref = passthroughAnimatedPropExplicitValues != null ? passthroughAnimatedPropExplicitValues : {},
      passthroughStyle = _ref.style,
      passthroughProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var mergedStyle = Object.assign({}, style, passthroughStyle);
    return (0, _jsxRuntime.jsx)(Component, Object.assign({}, reducedProps, passthroughProps, {
      style: mergedStyle,
      ref: ref
    }));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3VzZU1lcmdlUmVmcyIsIl91c2VBbmltYXRlZFByb3BzMyIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9qc3hGaWxlTmFtZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJjcmVhdGVBbmltYXRlZENvbXBvbmVudCIsIkNvbXBvbmVudCIsIl90aGlzIiwiZm9yd2FyZFJlZiIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiX3VzZUFuaW1hdGVkUHJvcHMiLCJ1c2VBbmltYXRlZFByb3BzIiwiX3VzZUFuaW1hdGVkUHJvcHMyIiwiX3NsaWNlZFRvQXJyYXkyIiwicmVkdWNlZFByb3BzIiwiY2FsbGJhY2tSZWYiLCJyZWYiLCJ1c2VNZXJnZVJlZnMiLCJwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzIiwic3R5bGUiLCJfcmVmIiwicGFzc3Rocm91Z2hTdHlsZSIsInBhc3N0aHJvdWdoUHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwibWVyZ2VkU3R5bGUiLCJhc3NpZ24iLCJqc3giXSwic291cmNlcyI6WyJjcmVhdGVBbmltYXRlZENvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgVmlldyBmcm9tICcuLi9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgdXNlTWVyZ2VSZWZzIGZyb20gJy4uL1V0aWxpdGllcy91c2VNZXJnZVJlZnMnO1xuaW1wb3J0IHVzZUFuaW1hdGVkUHJvcHMgZnJvbSAnLi91c2VBbmltYXRlZFByb3BzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IHR5cGUgQW5pbWF0ZWRDb21wb25lbnRUeXBlPFxuICAtUHJvcHM6IHsrW3N0cmluZ106IG1peGVkLCAuLi59LFxuICArSW5zdGFuY2UgPSBtaXhlZCxcbj4gPSBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxcbiAgJE9iak1hcDxcbiAgICBQcm9wcyAmXG4gICAgICAkUmVhZE9ubHk8e1xuICAgICAgICBwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzPzogUmVhY3QuRWxlbWVudENvbmZpZzxcbiAgICAgICAgICB0eXBlb2YgVmlldyxcbiAgICAgICAgPixcbiAgICAgIH0+LFxuICAgICgpID0+IGFueSxcbiAgPixcbiAgSW5zdGFuY2UsXG4+O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBbmltYXRlZENvbXBvbmVudDxUUHJvcHM6IHsuLi59LCBUSW5zdGFuY2U+KFxuICBDb21wb25lbnQ6IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFRQcm9wcywgVEluc3RhbmNlPixcbik6IEFuaW1hdGVkQ29tcG9uZW50VHlwZTxUUHJvcHMsIFRJbnN0YW5jZT4ge1xuICByZXR1cm4gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIGZvcndhcmRlZFJlZikgPT4ge1xuICAgIGNvbnN0IFtyZWR1Y2VkUHJvcHMsIGNhbGxiYWNrUmVmXSA9IHVzZUFuaW1hdGVkUHJvcHM8VFByb3BzLCBUSW5zdGFuY2U+KFxuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgIHByb3BzLFxuICAgICk7XG4gICAgY29uc3QgcmVmID0gdXNlTWVyZ2VSZWZzPFRJbnN0YW5jZSB8IG51bGw+KGNhbGxiYWNrUmVmLCBmb3J3YXJkZWRSZWYpO1xuXG4gICAgLy8gU29tZSBjb21wb25lbnRzIHJlcXVpcmUgZXhwbGljaXQgcGFzc3Rocm91Z2ggdmFsdWVzIGZvciBhbmltYXRpb25cbiAgICAvLyB0byB3b3JrIHByb3Blcmx5LiBGb3IgZXhhbXBsZSwgaWYgYW4gYW5pbWF0ZWQgY29tcG9uZW50IGlzXG4gICAgLy8gdHJhbnNmb3JtZWQgYW5kIFByZXNzYWJsZSwgb25QcmVzcyB3aWxsIG5vdCB3b3JrIGFmdGVyIHRyYW5zZm9ybVxuICAgIC8vIHdpdGhvdXQgdGhlc2UgcGFzc3Rocm91Z2ggdmFsdWVzLlxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGNvbnN0IHtwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzLCBzdHlsZX0gPSByZWR1Y2VkUHJvcHM7XG4gICAgY29uc3Qge3N0eWxlOiBwYXNzdGhyb3VnaFN0eWxlLCAuLi5wYXNzdGhyb3VnaFByb3BzfSA9XG4gICAgICBwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzID8/IHt9O1xuICAgIGNvbnN0IG1lcmdlZFN0eWxlID0gey4uLnN0eWxlLCAuLi5wYXNzdGhyb3VnaFN0eWxlfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Q29tcG9uZW50XG4gICAgICAgIHsuLi5yZWR1Y2VkUHJvcHN9XG4gICAgICAgIHsuLi5wYXNzdGhyb3VnaFByb3BzfVxuICAgICAgICBzdHlsZT17bWVyZ2VkU3R5bGV9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgLz5cbiAgICApO1xuICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVVBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGtCQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxLQUFBLEdBQUFDLHVCQUFBLENBQUFKLE9BQUE7QUFBK0IsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQUEsSUFBQU0sWUFBQTtBQUFBLElBQUFDLFNBQUE7QUFBQSxTQUFBQyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUwsd0JBQUFTLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSixHQUFBLFlBQUFHLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTCxHQUFBLFNBQUFNLE1BQUEsV0FBQUMscUJBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsR0FBQSxJQUFBWCxHQUFBLFFBQUFXLEdBQUEsa0JBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsR0FBQSxFQUFBVyxHQUFBLFNBQUFJLElBQUEsR0FBQVIscUJBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBVixHQUFBLEVBQUFXLEdBQUEsY0FBQUksSUFBQSxLQUFBQSxJQUFBLENBQUFWLEdBQUEsSUFBQVUsSUFBQSxDQUFBQyxHQUFBLEtBQUFSLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSCxNQUFBLEVBQUFLLEdBQUEsRUFBQUksSUFBQSxZQUFBVCxNQUFBLENBQUFLLEdBQUEsSUFBQVgsR0FBQSxDQUFBVyxHQUFBLFNBQUFMLE1BQUEsQ0FBQUosT0FBQSxHQUFBRixHQUFBLE1BQUFHLEtBQUEsSUFBQUEsS0FBQSxDQUFBYSxHQUFBLENBQUFoQixHQUFBLEVBQUFNLE1BQUEsWUFBQUEsTUFBQTtBQWtCaEIsU0FBU1csdUJBQXVCQSxDQUM3Q0MsU0FBcUQsRUFDWDtFQUFBLElBQUFDLEtBQUE7RUFDMUMsT0FBTzdCLEtBQUssQ0FBQzhCLFVBQVUsQ0FBQyxVQUFDQyxLQUFLLEVBQUVDLFlBQVksRUFBSztJQUMvQyxJQUFBQyxpQkFBQSxHQUFvQyxJQUFBQywwQkFBZ0IsRUFFbERILEtBQ0YsQ0FBQztNQUFBSSxrQkFBQSxPQUFBQyxlQUFBLENBQUF4QixPQUFBLEVBQUFxQixpQkFBQTtNQUhNSSxZQUFZLEdBQUFGLGtCQUFBO01BQUVHLFdBQVcsR0FBQUgsa0JBQUE7SUFJaEMsSUFBTUksR0FBRyxHQUFHLElBQUFDLHFCQUFZLEVBQW1CRixXQUFXLEVBQUVOLFlBQVksQ0FBQztJQU9yRSxJQUFPUyxxQ0FBcUMsR0FBV0osWUFBWSxDQUE1REkscUNBQXFDO01BQUVDLEtBQUssR0FBSUwsWUFBWSxDQUFyQkssS0FBSztJQUNuRCxJQUFBQyxJQUFBLEdBQ0VGLHFDQUFxQyxXQUFyQ0EscUNBQXFDLEdBQUksQ0FBQyxDQUFDO01BRC9CRyxnQkFBZ0IsR0FBQUQsSUFBQSxDQUF2QkQsS0FBSztNQUF1QkcsZ0JBQWdCLE9BQUFDLHlCQUFBLENBQUFsQyxPQUFBLEVBQUErQixJQUFBLEVBQUF2QyxTQUFBO0lBRW5ELElBQU0yQyxXQUFXLEdBQUE3QixNQUFBLENBQUE4QixNQUFBLEtBQU9OLEtBQUssRUFBS0UsZ0JBQWdCLENBQUM7SUFFbkQsT0FDRSxJQUFBMUMsV0FBQSxDQUFBK0MsR0FBQSxFQUFDckIsU0FBUyxFQUFBVixNQUFBLENBQUE4QixNQUFBLEtBQ0pYLFlBQVksRUFDWlEsZ0JBQWdCO01BQ3BCSCxLQUFLLEVBQUVLLFdBQVk7TUFDbkJSLEdBQUcsRUFBRUE7SUFBSSxFQUNWLENBQUM7RUFFTixDQUFDLENBQUM7QUFDSiJ9