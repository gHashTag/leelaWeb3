3b5da3fb457dc2834ab5ff921e59baf3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withTouchEventBoundary = exports.TouchEventBoundary = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _core = require("@sentry/core");
var _utils = require("@sentry/utils");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _factory = require("./integrations/factory");
var _tracing = require("./tracing");
var _ops = require("./tracing/ops");
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "/Users/playra/LeelaAiWeb3/node_modules/@sentry/react-native/dist/js/touchevents.js",
  _this2 = this;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var touchEventStyles = _reactNative.StyleSheet.create({
  wrapperView: {
    flex: 1
  }
});
var DEFAULT_BREADCRUMB_CATEGORY = 'touch';
var DEFAULT_BREADCRUMB_TYPE = 'user';
var DEFAULT_MAX_COMPONENT_TREE_SIZE = 20;
var SENTRY_LABEL_PROP_KEY = 'sentry-label';
var TouchEventBoundary = function (_React$Component) {
  (0, _inherits2.default)(TouchEventBoundary, _React$Component);
  var _super = _createSuper(TouchEventBoundary);
  function TouchEventBoundary() {
    var _this;
    (0, _classCallCheck2.default)(this, TouchEventBoundary);
    _this = _super.apply(this, arguments);
    _this.name = 'TouchEventBoundary';
    _this._tracingIntegration = null;
    return _this;
  }
  (0, _createClass2.default)(TouchEventBoundary, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _a;
      var client = (0, _core.getCurrentHub)().getClient();
      (_a = client === null || client === void 0 ? void 0 : client.addIntegration) === null || _a === void 0 ? void 0 : _a.call(client, (0, _factory.createIntegration)(this.name));
      if (!this._tracingIntegration && client) {
        this._tracingIntegration = client.getIntegration(_tracing.ReactNativeTracing);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: touchEventStyles.wrapperView,
        onTouchStart: this._onTouchStart.bind(this),
        children: this.props.children
      });
    }
  }, {
    key: "_logTouchEvent",
    value: function _logTouchEvent(componentTreeNames, activeLabel) {
      var level = 'info';
      var crumb = {
        category: this.props.breadcrumbCategory,
        data: {
          componentTree: componentTreeNames
        },
        level: level,
        message: activeLabel ? `Touch event within element: ${activeLabel}` : 'Touch event within component tree',
        type: this.props.breadcrumbType
      };
      (0, _core.addBreadcrumb)(crumb);
      _utils.logger.log(`[TouchEvents] ${crumb.message}`);
    }
  }, {
    key: "_isNameIgnored",
    value: function _isNameIgnored(name) {
      var ignoreNames = this.props.ignoreNames || [];
      if (this.props.ignoredDisplayNames) {
        ignoreNames = [].concat((0, _toConsumableArray2.default)(ignoreNames), (0, _toConsumableArray2.default)(this.props.ignoredDisplayNames));
      }
      return ignoreNames.some(function (ignoreName) {
        return typeof ignoreName === 'string' && name === ignoreName || ignoreName instanceof RegExp && name.match(ignoreName);
      });
    }
  }, {
    key: "_onTouchStart",
    value: function _onTouchStart(e) {
      var _a, _b;
      if (!e._targetInst) {
        return;
      }
      var currentInst = e._targetInst;
      var activeLabel;
      var activeDisplayName;
      var componentTreeNames = [];
      while (currentInst && this.props.maxComponentTreeSize && componentTreeNames.length < this.props.maxComponentTreeSize) {
        if (((_a = currentInst.elementType) === null || _a === void 0 ? void 0 : _a.displayName) === TouchEventBoundary.displayName) {
          break;
        }
        var props = currentInst.memoizedProps;
        var sentryLabel = typeof (props === null || props === void 0 ? void 0 : props[SENTRY_LABEL_PROP_KEY]) !== 'undefined' ? `${props[SENTRY_LABEL_PROP_KEY]}` : undefined;
        var labelValue = void 0;
        if (typeof this.props.labelName === 'string') labelValue = props === null || props === void 0 ? void 0 : props[this.props.labelName];
        if (sentryLabel && !this._isNameIgnored(sentryLabel)) {
          if (!activeLabel) {
            activeLabel = sentryLabel;
          }
          componentTreeNames.push(sentryLabel);
        } else if (typeof labelValue === 'string' && !this._isNameIgnored(labelValue)) {
          if (!activeLabel) {
            activeLabel = labelValue;
          }
          componentTreeNames.push(labelValue);
        } else if (currentInst.elementType) {
          var _currentInst = currentInst,
            elementType = _currentInst.elementType;
          if (elementType.displayName && !this._isNameIgnored(elementType.displayName)) {
            if (!activeDisplayName) {
              activeDisplayName = elementType.displayName;
            }
            componentTreeNames.push(elementType.displayName);
          }
        }
        currentInst = currentInst.return;
      }
      var finalLabel = activeLabel !== null && activeLabel !== void 0 ? activeLabel : activeDisplayName;
      if (componentTreeNames.length > 0 || finalLabel) {
        this._logTouchEvent(componentTreeNames, finalLabel);
      }
      (_b = this._tracingIntegration) === null || _b === void 0 ? void 0 : _b.startUserInteractionTransaction({
        elementId: activeLabel,
        op: _ops.UI_ACTION_TOUCH
      });
    }
  }]);
  return TouchEventBoundary;
}(React.Component);
exports.TouchEventBoundary = TouchEventBoundary;
TouchEventBoundary.displayName = '__Sentry.TouchEventBoundary';
TouchEventBoundary.defaultProps = {
  breadcrumbCategory: DEFAULT_BREADCRUMB_CATEGORY,
  breadcrumbType: DEFAULT_BREADCRUMB_TYPE,
  ignoreNames: [],
  maxComponentTreeSize: DEFAULT_MAX_COMPONENT_TREE_SIZE
};
var withTouchEventBoundary = function withTouchEventBoundary(InnerComponent, boundaryProps) {
  var WrappedComponent = function WrappedComponent(props) {
    return (0, _jsxRuntime.jsx)(TouchEventBoundary, Object.assign({}, boundaryProps !== null && boundaryProps !== void 0 ? boundaryProps : {}, {
      children: (0, _jsxRuntime.jsx)(InnerComponent, Object.assign({}, props))
    }));
  };
  WrappedComponent.displayName = 'WithTouchEventBoundary';
  return WrappedComponent;
};
exports.withTouchEventBoundary = withTouchEventBoundary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJfdXRpbHMiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0TmF0aXZlIiwiX2ZhY3RvcnkiLCJfdHJhY2luZyIsIl9vcHMiLCJfanN4UnVudGltZSIsIl9qc3hGaWxlTmFtZSIsIl90aGlzMiIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwidG91Y2hFdmVudFN0eWxlcyIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJ3cmFwcGVyVmlldyIsImZsZXgiLCJERUZBVUxUX0JSRUFEQ1JVTUJfQ0FURUdPUlkiLCJERUZBVUxUX0JSRUFEQ1JVTUJfVFlQRSIsIkRFRkFVTFRfTUFYX0NPTVBPTkVOVF9UUkVFX1NJWkUiLCJTRU5UUllfTEFCRUxfUFJPUF9LRVkiLCJUb3VjaEV2ZW50Qm91bmRhcnkiLCJfUmVhY3QkQ29tcG9uZW50IiwiX2luaGVyaXRzMiIsIl9zdXBlciIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrMiIsIm5hbWUiLCJfdHJhY2luZ0ludGVncmF0aW9uIiwiX2NyZWF0ZUNsYXNzMiIsInZhbHVlIiwiY29tcG9uZW50RGlkTW91bnQiLCJjbGllbnQiLCJnZXRDdXJyZW50SHViIiwiZ2V0Q2xpZW50IiwiX2EiLCJhZGRJbnRlZ3JhdGlvbiIsImNyZWF0ZUludGVncmF0aW9uIiwiZ2V0SW50ZWdyYXRpb24iLCJSZWFjdE5hdGl2ZVRyYWNpbmciLCJyZW5kZXIiLCJqc3giLCJWaWV3Iiwic3R5bGUiLCJvblRvdWNoU3RhcnQiLCJfb25Ub3VjaFN0YXJ0IiwiYmluZCIsImNoaWxkcmVuIiwicHJvcHMiLCJfbG9nVG91Y2hFdmVudCIsImNvbXBvbmVudFRyZWVOYW1lcyIsImFjdGl2ZUxhYmVsIiwibGV2ZWwiLCJjcnVtYiIsImNhdGVnb3J5IiwiYnJlYWRjcnVtYkNhdGVnb3J5IiwiZGF0YSIsImNvbXBvbmVudFRyZWUiLCJtZXNzYWdlIiwidHlwZSIsImJyZWFkY3J1bWJUeXBlIiwiYWRkQnJlYWRjcnVtYiIsImxvZ2dlciIsImxvZyIsIl9pc05hbWVJZ25vcmVkIiwiaWdub3JlTmFtZXMiLCJpZ25vcmVkRGlzcGxheU5hbWVzIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsInNvbWUiLCJpZ25vcmVOYW1lIiwiUmVnRXhwIiwibWF0Y2giLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRJbnN0IiwiYWN0aXZlRGlzcGxheU5hbWUiLCJtYXhDb21wb25lbnRUcmVlU2l6ZSIsImxlbmd0aCIsImVsZW1lbnRUeXBlIiwiZGlzcGxheU5hbWUiLCJtZW1vaXplZFByb3BzIiwic2VudHJ5TGFiZWwiLCJ1bmRlZmluZWQiLCJsYWJlbFZhbHVlIiwibGFiZWxOYW1lIiwicHVzaCIsIl9jdXJyZW50SW5zdCIsInJldHVybiIsImZpbmFsTGFiZWwiLCJfYiIsInN0YXJ0VXNlckludGVyYWN0aW9uVHJhbnNhY3Rpb24iLCJlbGVtZW50SWQiLCJvcCIsIlVJX0FDVElPTl9UT1VDSCIsIkNvbXBvbmVudCIsImV4cG9ydHMiLCJkZWZhdWx0UHJvcHMiLCJ3aXRoVG91Y2hFdmVudEJvdW5kYXJ5IiwiSW5uZXJDb21wb25lbnQiLCJib3VuZGFyeVByb3BzIiwiV3JhcHBlZENvbXBvbmVudCIsImFzc2lnbiJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy90b3VjaGV2ZW50cy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkQnJlYWRjcnVtYiwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgdHlwZSB7IFNldmVyaXR5TGV2ZWwgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBHZXN0dXJlUmVzcG9uZGVyRXZlbnR9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IHsgY3JlYXRlSW50ZWdyYXRpb24gfSBmcm9tICcuL2ludGVncmF0aW9ucy9mYWN0b3J5JztcbmltcG9ydCB7IFJlYWN0TmF0aXZlVHJhY2luZyB9IGZyb20gJy4vdHJhY2luZyc7XG5pbXBvcnQgeyBVSV9BQ1RJT05fVE9VQ0ggfSBmcm9tICcuL3RyYWNpbmcvb3BzJztcblxuZXhwb3J0IHR5cGUgVG91Y2hFdmVudEJvdW5kYXJ5UHJvcHMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY2F0ZWdvcnkgYXNzaWduZWQgdG8gdGhlIGJyZWFkY3J1bWIgdGhhdCBpcyBsb2dnZWQgYnkgdGhlIHRvdWNoIGV2ZW50LlxuICAgKi9cbiAgYnJlYWRjcnVtYkNhdGVnb3J5Pzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHR5cGUgYXNzaWduZWQgdG8gdGhlIGJyZWFkY3J1bWIgdGhhdCBpcyBsb2dnZWQgYnkgdGhlIHRvdWNoIGV2ZW50LlxuICAgKi9cbiAgYnJlYWRjcnVtYlR5cGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbWF4IG51bWJlciBvZiBjb21wb25lbnRzIHRvIGRpc3BsYXkgd2hlbiBsb2dnaW5nIGEgdG91Y2gncyBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIG1heENvbXBvbmVudFRyZWVTaXplPzogbnVtYmVyO1xuICAvKipcbiAgICogQ29tcG9uZW50IG5hbWUocykgdG8gaWdub3JlIHdoZW4gbG9nZ2luZyB0aGUgdG91Y2ggZXZlbnQuIFRoaXMgcHJldmVudHMgdW5oZWxwZnVsIGxvZ3Mgc3VjaCBhc1xuICAgKiBcIlRvdWNoIGV2ZW50IHdpdGhpbiBlbGVtZW50OiBWaWV3XCIgd2hlcmUgeW91IHN0aWxsIGNhbid0IHRlbGwgd2hpY2ggVmlldyBpdCBvY2N1cnJlZCBpbi5cbiAgICovXG4gIGlnbm9yZU5hbWVzPzogQXJyYXk8c3RyaW5nIHwgUmVnRXhwPjtcbiAgLyoqXG4gICAqIERlcHJlY2F0ZWQsIHVzZSBpZ25vcmVOYW1lcyBpbnN0ZWFkXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpZ25vcmVkRGlzcGxheU5hbWVzPzogQXJyYXk8c3RyaW5nIHwgUmVnRXhwPjtcbiAgLyoqXG4gICAqIFJlYWN0IE5vZGUgd3JhcHBlZCBieSBUb3VjaEV2ZW50Qm91bmRhcnkuXG4gICAqL1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIExhYmVsIE5hbWUgdXNlZCB0byBpZGVudGlmeSB0aGUgdG91Y2hlZCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWxOYW1lPzogc3RyaW5nO1xufTtcblxuY29uc3QgdG91Y2hFdmVudFN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgd3JhcHBlclZpZXc6IHtcbiAgICBmbGV4OiAxLFxuICB9LFxufSk7XG5cbmNvbnN0IERFRkFVTFRfQlJFQURDUlVNQl9DQVRFR09SWSA9ICd0b3VjaCc7XG5jb25zdCBERUZBVUxUX0JSRUFEQ1JVTUJfVFlQRSA9ICd1c2VyJztcbmNvbnN0IERFRkFVTFRfTUFYX0NPTVBPTkVOVF9UUkVFX1NJWkUgPSAyMDtcblxuY29uc3QgU0VOVFJZX0xBQkVMX1BST1BfS0VZID0gJ3NlbnRyeS1sYWJlbCc7XG5cbmludGVyZmFjZSBFbGVtZW50SW5zdGFuY2Uge1xuICBlbGVtZW50VHlwZT86IHtcbiAgICBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgICBuYW1lPzogc3RyaW5nO1xuICB9O1xuICBtZW1vaXplZFByb3BzPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIHJldHVybj86IEVsZW1lbnRJbnN0YW5jZTtcbn1cblxuaW50ZXJmYWNlIFByaXZhdGVHZXN0dXJlUmVzcG9uZGVyRXZlbnQgZXh0ZW5kcyBHZXN0dXJlUmVzcG9uZGVyRXZlbnQge1xuICBfdGFyZ2V0SW5zdD86IEVsZW1lbnRJbnN0YW5jZTtcbn1cblxuLyoqXG4gKiBCb3VuZGFyeSB0byBsb2cgYnJlYWRjcnVtYnMgZm9yIGludGVyYWN0aW9uIGV2ZW50cy5cbiAqL1xuY2xhc3MgVG91Y2hFdmVudEJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFRvdWNoRXZlbnRCb3VuZGFyeVByb3BzPiB7XG5cbiAgcHVibGljIHN0YXRpYyBkaXNwbGF5TmFtZTogc3RyaW5nID0gJ19fU2VudHJ5LlRvdWNoRXZlbnRCb3VuZGFyeSc7XG4gIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzOiBQYXJ0aWFsPFRvdWNoRXZlbnRCb3VuZGFyeVByb3BzPiA9IHtcbiAgICBicmVhZGNydW1iQ2F0ZWdvcnk6IERFRkFVTFRfQlJFQURDUlVNQl9DQVRFR09SWSxcbiAgICBicmVhZGNydW1iVHlwZTogREVGQVVMVF9CUkVBRENSVU1CX1RZUEUsXG4gICAgaWdub3JlTmFtZXM6IFtdLFxuICAgIG1heENvbXBvbmVudFRyZWVTaXplOiBERUZBVUxUX01BWF9DT01QT05FTlRfVFJFRV9TSVpFLFxuICB9O1xuXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcgPSAnVG91Y2hFdmVudEJvdW5kYXJ5JztcblxuICBwcml2YXRlIF90cmFjaW5nSW50ZWdyYXRpb246IFJlYWN0TmF0aXZlVHJhY2luZyB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgdGhlIFRvdWNoRXZlbnRCb3VuZGFyeSBhcyBhIFNlbnRyeSBJbnRlZ3JhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICBjb25zdCBjbGllbnQgPSBnZXRDdXJyZW50SHViKCkuZ2V0Q2xpZW50KCk7XG4gICAgY2xpZW50Py5hZGRJbnRlZ3JhdGlvbj8uKGNyZWF0ZUludGVncmF0aW9uKHRoaXMubmFtZSkpO1xuICAgIGlmICghdGhpcy5fdHJhY2luZ0ludGVncmF0aW9uICYmIGNsaWVudCkge1xuICAgICAgdGhpcy5fdHJhY2luZ0ludGVncmF0aW9uID0gY2xpZW50LmdldEludGVncmF0aW9uKFJlYWN0TmF0aXZlVHJhY2luZyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBwdWJsaWMgcmVuZGVyKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3XG4gICAgICAgIHN0eWxlPXt0b3VjaEV2ZW50U3R5bGVzLndyYXBwZXJWaWV3fVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBvblRvdWNoU3RhcnQ9e3RoaXMuX29uVG91Y2hTdGFydC5iaW5kKHRoaXMpIGFzIGFueX1cbiAgICAgID5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIHRoZSB0b3VjaCBldmVudCBnaXZlbiB0aGUgY29tcG9uZW50IHRyZWUgbmFtZXMgYW5kIGEgbGFiZWwuXG4gICAqL1xuICBwcml2YXRlIF9sb2dUb3VjaEV2ZW50KFxuICAgIGNvbXBvbmVudFRyZWVOYW1lczogc3RyaW5nW10sXG4gICAgYWN0aXZlTGFiZWw/OiBzdHJpbmdcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgbGV2ZWwgPSAnaW5mbycgYXMgU2V2ZXJpdHlMZXZlbDtcbiAgICBjb25zdCBjcnVtYiA9IHtcbiAgICAgIGNhdGVnb3J5OiB0aGlzLnByb3BzLmJyZWFkY3J1bWJDYXRlZ29yeSxcbiAgICAgIGRhdGE6IHsgY29tcG9uZW50VHJlZTogY29tcG9uZW50VHJlZU5hbWVzIH0sXG4gICAgICBsZXZlbDogbGV2ZWwsXG4gICAgICBtZXNzYWdlOiBhY3RpdmVMYWJlbFxuICAgICAgICA/IGBUb3VjaCBldmVudCB3aXRoaW4gZWxlbWVudDogJHthY3RpdmVMYWJlbH1gXG4gICAgICAgIDogJ1RvdWNoIGV2ZW50IHdpdGhpbiBjb21wb25lbnQgdHJlZScsXG4gICAgICB0eXBlOiB0aGlzLnByb3BzLmJyZWFkY3J1bWJUeXBlLFxuICAgIH07XG4gICAgYWRkQnJlYWRjcnVtYihjcnVtYik7XG5cbiAgICBsb2dnZXIubG9nKGBbVG91Y2hFdmVudHNdICR7Y3J1bWIubWVzc2FnZX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIG5hbWUgaXMgc3VwcG9zZWQgdG8gYmUgaWdub3JlZC5cbiAgICovXG4gIHByaXZhdGUgX2lzTmFtZUlnbm9yZWQobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgbGV0IGlnbm9yZU5hbWVzID0gdGhpcy5wcm9wcy5pZ25vcmVOYW1lcyB8fCBbXTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBpZiAodGhpcy5wcm9wcy5pZ25vcmVkRGlzcGxheU5hbWVzKSB7XG4gICAgICAvLyBUaGlzIGlzIHRvIG1ha2UgaXQgY29tcGF0aWJsZSB3aXRoIHByaW9yIHZlcnNpb24uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgIGlnbm9yZU5hbWVzID0gWy4uLmlnbm9yZU5hbWVzLCAuLi50aGlzLnByb3BzLmlnbm9yZWREaXNwbGF5TmFtZXNdO1xuICAgIH1cblxuICAgIHJldHVybiBpZ25vcmVOYW1lcy5zb21lKFxuICAgICAgKGlnbm9yZU5hbWU6IHN0cmluZyB8IFJlZ0V4cCkgPT5cbiAgICAgICAgKHR5cGVvZiBpZ25vcmVOYW1lID09PSAnc3RyaW5nJyAmJiBuYW1lID09PSBpZ25vcmVOYW1lKSB8fFxuICAgICAgICAoaWdub3JlTmFtZSBpbnN0YW5jZW9mIFJlZ0V4cCAmJiBuYW1lLm1hdGNoKGlnbm9yZU5hbWUpKVxuICAgICk7XG4gIH1cblxuICAvLyBPcmlnaW5hbGx5IHdhcyBnb2luZyB0byBjbGVhbiB0aGUgbmFtZXMgb2YgYW55IEhPQ3MgYXMgd2VsbCBidXQgZGVjaWRlZCB0aGF0IGl0IG1pZ2h0IGhpbmRlciBkZWJ1Z2dpbmcgZWZmZWN0aXZlbHkuIFdpbGwgbGVhdmUgaGVyZSBpbiBjYXNlXG4gIC8vIHByaXZhdGUgcmVhZG9ubHkgX2NsZWFuTmFtZSA9IChuYW1lOiBzdHJpbmcpOiBzdHJpbmcgPT5cbiAgLy8gICBuYW1lLnJlcGxhY2UoLy4qXFwoL2csIFwiXCIpLnJlcGxhY2UoL1xcKS9nLCBcIlwiKTtcblxuICAvKipcbiAgICogVHJhdmVyc2VzIHRocm91Z2ggdGhlIGNvbXBvbmVudCB0cmVlIHdoZW4gYSB0b3VjaCBoYXBwZW5zIGFuZCBsb2dzIGl0LlxuICAgKiBAcGFyYW0gZVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgcHJpdmF0ZSBfb25Ub3VjaFN0YXJ0KGU6IFByaXZhdGVHZXN0dXJlUmVzcG9uZGVyRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIWUuX3RhcmdldEluc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgY3VycmVudEluc3Q6IEVsZW1lbnRJbnN0YW5jZSB8IHVuZGVmaW5lZCA9IGUuX3RhcmdldEluc3Q7XG5cbiAgICBsZXQgYWN0aXZlTGFiZWw6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBsZXQgYWN0aXZlRGlzcGxheU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBjb25zdCBjb21wb25lbnRUcmVlTmFtZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICB3aGlsZSAoXG4gICAgICBjdXJyZW50SW5zdCAmJlxuICAgICAgLy8gbWF4Q29tcG9uZW50VHJlZVNpemUgd2lsbCBhbHdheXMgYmUgZGVmaW5lZCBhcyB3ZSBoYXZlIGEgZGVmYXVsdFByb3BzLiBCdXQgdHMgbmVlZHMgYSBjaGVjayBzbyB0aGlzIGlzIGhlcmUuXG4gICAgICB0aGlzLnByb3BzLm1heENvbXBvbmVudFRyZWVTaXplICYmXG4gICAgICBjb21wb25lbnRUcmVlTmFtZXMubGVuZ3RoIDwgdGhpcy5wcm9wcy5tYXhDb21wb25lbnRUcmVlU2l6ZVxuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBJZiB0aGUgbG9vcCBnZXRzIHRvIHRoZSBib3VuZGFyeSBpdHNlbGYsIGJyZWFrLlxuICAgICAgICBjdXJyZW50SW5zdC5lbGVtZW50VHlwZT8uZGlzcGxheU5hbWUgPT09XG4gICAgICAgIFRvdWNoRXZlbnRCb3VuZGFyeS5kaXNwbGF5TmFtZVxuICAgICAgKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm9wcyA9IGN1cnJlbnRJbnN0Lm1lbW9pemVkUHJvcHM7XG4gICAgICBjb25zdCBzZW50cnlMYWJlbCA9XG4gICAgICAgIHR5cGVvZiBwcm9wcz8uW1NFTlRSWV9MQUJFTF9QUk9QX0tFWV0gIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgPyBgJHtwcm9wc1tTRU5UUllfTEFCRUxfUFJPUF9LRVldfWBcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGUgbmFycm93aW5nIGRvZXNuJ3Qgd29yayBhcyBleHBlY3RlZCB3aXRoIGluZGV4aW5nIHdoZW4gY2hlY2tpbmcgaXQgYWxsIGluIG9uZSBnbyBpblxuICAgICAgLy8gdGhlIFwiY2hlY2stbGFiZWxcIiBpZiBzZW50ZW5jZSwgc28gd2UgaGF2ZSB0byBhc3NpZ24gaXQgdG8gYSB2YXJpYWJsZSBoZXJlIGZpcnN0XG4gICAgICBsZXQgbGFiZWxWYWx1ZTtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5sYWJlbE5hbWUgPT09ICdzdHJpbmcnKVxuICAgICAgICBsYWJlbFZhbHVlID0gcHJvcHM/Llt0aGlzLnByb3BzLmxhYmVsTmFtZV07XG5cbiAgICAgIC8vIENoZWNrIHRoZSBsYWJlbCBmaXJzdFxuICAgICAgaWYgKHNlbnRyeUxhYmVsICYmICF0aGlzLl9pc05hbWVJZ25vcmVkKHNlbnRyeUxhYmVsKSkge1xuICAgICAgICBpZiAoIWFjdGl2ZUxhYmVsKSB7XG4gICAgICAgICAgYWN0aXZlTGFiZWwgPSBzZW50cnlMYWJlbDtcbiAgICAgICAgfVxuICAgICAgICBjb21wb25lbnRUcmVlTmFtZXMucHVzaChzZW50cnlMYWJlbCk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0eXBlb2YgbGFiZWxWYWx1ZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgIXRoaXMuX2lzTmFtZUlnbm9yZWQobGFiZWxWYWx1ZSlcbiAgICAgICkge1xuICAgICAgICBpZiAoIWFjdGl2ZUxhYmVsKSB7XG4gICAgICAgICAgYWN0aXZlTGFiZWwgPSBsYWJlbFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbXBvbmVudFRyZWVOYW1lcy5wdXNoKGxhYmVsVmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChjdXJyZW50SW5zdC5lbGVtZW50VHlwZSkge1xuICAgICAgICBjb25zdCB7IGVsZW1lbnRUeXBlIH0gPSBjdXJyZW50SW5zdDtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZWxlbWVudFR5cGUuZGlzcGxheU5hbWUgJiZcbiAgICAgICAgICAhdGhpcy5faXNOYW1lSWdub3JlZChlbGVtZW50VHlwZS5kaXNwbGF5TmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgZGlzcGxheSBuYW1lXG4gICAgICAgICAgaWYgKCFhY3RpdmVEaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgYWN0aXZlRGlzcGxheU5hbWUgPSBlbGVtZW50VHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29tcG9uZW50VHJlZU5hbWVzLnB1c2goZWxlbWVudFR5cGUuZGlzcGxheU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRJbnN0ID0gY3VycmVudEluc3QucmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbmFsTGFiZWwgPSBhY3RpdmVMYWJlbCA/PyBhY3RpdmVEaXNwbGF5TmFtZTtcblxuICAgIGlmIChjb21wb25lbnRUcmVlTmFtZXMubGVuZ3RoID4gMCB8fCBmaW5hbExhYmVsKSB7XG4gICAgICB0aGlzLl9sb2dUb3VjaEV2ZW50KGNvbXBvbmVudFRyZWVOYW1lcywgZmluYWxMYWJlbCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhY2luZ0ludGVncmF0aW9uPy5zdGFydFVzZXJJbnRlcmFjdGlvblRyYW5zYWN0aW9uKHtcbiAgICAgIGVsZW1lbnRJZDogYWN0aXZlTGFiZWwsXG4gICAgICBvcDogVUlfQUNUSU9OX1RPVUNILFxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQ29udmVuaWVuY2UgSGlnaGVyLU9yZGVyLUNvbXBvbmVudCBmb3IgVG91Y2hFdmVudEJvdW5kYXJ5XG4gKiBAcGFyYW0gV3JhcHBlZENvbXBvbmVudCBhbnkgUmVhY3QgQ29tcG9uZW50XG4gKiBAcGFyYW0gYm91bmRhcnlQcm9wcyBUb3VjaEV2ZW50Qm91bmRhcnlQcm9wc1xuICovXG5jb25zdCB3aXRoVG91Y2hFdmVudEJvdW5kYXJ5ID0gKFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBJbm5lckNvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+LFxuICBib3VuZGFyeVByb3BzPzogVG91Y2hFdmVudEJvdW5kYXJ5UHJvcHNcbik6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0+IHtcbiAgY29uc3QgV3JhcHBlZENvbXBvbmVudDogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQgPSAocHJvcHMpID0+IChcbiAgICA8VG91Y2hFdmVudEJvdW5kYXJ5IHsuLi4oYm91bmRhcnlQcm9wcyA/PyB7fSl9PlxuICAgICAgPElubmVyQ29tcG9uZW50IHsuLi5wcm9wc30gLz5cbiAgICA8L1RvdWNoRXZlbnRCb3VuZGFyeT5cbiAgKTtcblxuICBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1dpdGhUb3VjaEV2ZW50Qm91bmRhcnknO1xuXG4gIHJldHVybiBXcmFwcGVkQ29tcG9uZW50O1xufTtcblxuZXhwb3J0IHsgVG91Y2hFdmVudEJvdW5kYXJ5LCB3aXRoVG91Y2hFdmVudEJvdW5kYXJ5IH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsS0FBQSxHQUFBQyx1QkFBQSxDQUFBSCxPQUFBO0FBRUEsSUFBQUksWUFBQSxHQUFBSixPQUFBO0FBRUEsSUFBQUssUUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sUUFBQSxHQUFBTixPQUFBO0FBQ0EsSUFBQU8sSUFBQSxHQUFBUCxPQUFBO0FBQWdELElBQUFRLFdBQUEsR0FBQVIsT0FBQTtBQUFBLElBQUFTLFlBQUE7RUFBQUMsTUFBQTtBQUFBLFNBQUFDLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9B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