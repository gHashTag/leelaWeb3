{"version":3,"names":["_core","require","_tracing","APP_START_WARM","exports","APP_START_COLD","STALL_COUNT","STALL_TOTAL_TIME","STALL_LONGEST_TIME","_addTracingExtensions","addTracingExtensions","carrier","getMainCarrier","__SENTRY__","extensions","startTransaction","originalStartTransaction","_startTransaction","_patchStartTransaction","transactionContext","customSamplingContext","op","DEFAULT","transaction","apply","originalStartChild","startChild","bind","spanContext","Object","assign","reactNativeTracing","getCurrentHub","getIntegration","ReactNativeTracing","onTransactionStart","originalFinish","finish","endTimestamp","onTransactionFinish"],"sources":["../../src/js/measurements.ts"],"sourcesContent":["import type { Hub, Transaction } from '@sentry/core';\nimport { addTracingExtensions, getCurrentHub, getMainCarrier } from '@sentry/core';\nimport type { CustomSamplingContext, Span, SpanContext, TransactionContext } from '@sentry/types';\n\nimport { DEFAULT, ReactNativeTracing } from './tracing';\n\nexport const APP_START_WARM = 'app_start_warm';\nexport const APP_START_COLD = 'app_start_cold';\n\nexport const STALL_COUNT = 'stall_count';\nexport const STALL_TOTAL_TIME = 'stall_total_time';\nexport const STALL_LONGEST_TIME = 'stall_longest_time';\n\n/**\n * Adds React Native's extensions. Needs to be called before any transactions are created.\n */\nexport function _addTracingExtensions(): void {\n  addTracingExtensions();\n  const carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (carrier.__SENTRY__.extensions.startTransaction) {\n      const originalStartTransaction = carrier.__SENTRY__.extensions.startTransaction as StartTransactionFunction;\n\n      /*\n        Overwrites the transaction start and finish to start and finish stall tracking.\n        Preferably instead of overwriting add a callback method for this in the Transaction itself.\n      */\n      const _startTransaction = _patchStartTransaction(originalStartTransaction);\n\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n  }\n}\n\nexport type StartTransactionFunction = (\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n) => Transaction;\n\n/**\n * Overwrite the startTransaction extension method to start and end stall tracking.\n */\nconst _patchStartTransaction = (originalStartTransaction: StartTransactionFunction): StartTransactionFunction => {\n  /**\n   * Method to overwrite with\n   */\n  function _startTransaction(\n    this: Hub,\n    transactionContext: TransactionContext,\n    customSamplingContext?: CustomSamplingContext,\n  ): Transaction {\n    // Native SDKs require op to be set - for JS Relay sets `default`\n    if (!transactionContext.op) {\n      transactionContext.op = DEFAULT;\n    }\n\n    const transaction: Transaction = originalStartTransaction.apply(this, [transactionContext, customSamplingContext]);\n    const originalStartChild: Transaction['startChild'] = transaction.startChild.bind(transaction);\n    transaction.startChild = (\n      spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'sampled' | 'traceId' | 'parentSpanId'>>,\n    ): Span => {\n      return originalStartChild({\n        ...spanContext,\n        // Native SDKs require op to be set\n        op: spanContext?.op || DEFAULT,\n      });\n    };\n\n    const reactNativeTracing = getCurrentHub().getIntegration(ReactNativeTracing);\n\n    if (reactNativeTracing) {\n      reactNativeTracing.onTransactionStart(transaction);\n\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const originalFinish = transaction.finish;\n\n      transaction.finish = (endTimestamp: number | undefined) => {\n        if (reactNativeTracing) {\n          reactNativeTracing.onTransactionFinish(transaction);\n        }\n\n        return originalFinish.apply(transaction, [endTimestamp]);\n      };\n    }\n\n    return transaction;\n  }\n\n  return _startTransaction;\n};\n"],"mappings":";;;;;AACA,IAAAA,KAAA,GAAAC,OAAA;AAGA,IAAAC,QAAA,GAAAD,OAAA;AAEO,IAAME,cAAc,GAAG,gBAAgB;AAACC,OAAA,CAAAD,cAAA,GAAAA,cAAA;AACxC,IAAME,cAAc,GAAG,gBAAgB;AAACD,OAAA,CAAAC,cAAA,GAAAA,cAAA;AAExC,IAAMC,WAAW,GAAG,aAAa;AAACF,OAAA,CAAAE,WAAA,GAAAA,WAAA;AAClC,IAAMC,gBAAgB,GAAG,kBAAkB;AAACH,OAAA,CAAAG,gBAAA,GAAAA,gBAAA;AAC5C,IAAMC,kBAAkB,GAAG,oBAAoB;AAACJ,OAAA,CAAAI,kBAAA,GAAAA,kBAAA;AAKjD,SAAUC,qBAAqBA,CAAA;EACnC,IAAAC,0BAAoB,GAAE;EACtB,IAAMC,OAAO,GAAG,IAAAC,oBAAc,GAAE;EAChC,IAAID,OAAO,CAACE,UAAU,EAAE;IACtBF,OAAO,CAACE,UAAU,CAACC,UAAU,GAAGH,OAAO,CAACE,UAAU,CAACC,UAAU,IAAI,EAAE;IACnE,IAAIH,OAAO,CAACE,UAAU,CAACC,UAAU,CAACC,gBAAgB,EAAE;MAClD,IAAMC,wBAAwB,GAAGL,OAAO,CAACE,UAAU,CAACC,UAAU,CAACC,gBAA4C;MAM3G,IAAME,iBAAiB,GAAGC,sBAAsB,CAACF,wBAAwB,CAAC;MAE1EL,OAAO,CAACE,UAAU,CAACC,UAAU,CAACC,gBAAgB,GAAGE,iBAAiB;;;AAGxE;AAWA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIF,wBAAkD,EAA8B;EAI9G,SAASC,iBAAiBA,CAExBE,kBAAsC,EACtCC,qBAA6C;IAG7C,IAAI,CAACD,kBAAkB,CAACE,EAAE,EAAE;MAC1BF,kBAAkB,CAACE,EAAE,GAAGC,gBAAO;;IAGjC,IAAMC,WAAW,GAAgBP,wBAAwB,CAACQ,KAAK,CAAC,IAAI,EAAE,CAACL,kBAAkB,EAAEC,qBAAqB,CAAC,CAAC;IAClH,IAAMK,kBAAkB,GAA8BF,WAAW,CAACG,UAAU,CAACC,IAAI,CAACJ,WAAW,CAAC;IAC9FA,WAAW,CAACG,UAAU,GAAG,UACvBE,WAAmG,EAC3F;MACR,OAAOH,kBAAkB,CAAAI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACpBF,WAAW;QAEdP,EAAE,EAAE,CAAAO,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEP,EAAE,KAAIC;MAAO,GAC9B;IACJ,CAAC;IAED,IAAMS,kBAAkB,GAAG,IAAAC,mBAAa,GAAE,CAACC,cAAc,CAACC,2BAAkB,CAAC;IAE7E,IAAIH,kBAAkB,EAAE;MACtBA,kBAAkB,CAACI,kBAAkB,CAACZ,WAAW,CAAC;MAGlD,IAAMa,cAAc,GAAGb,WAAW,CAACc,MAAM;MAEzCd,WAAW,CAACc,MAAM,GAAG,UAACC,YAAgC,EAAI;QACxD,IAAIP,kBAAkB,EAAE;UACtBA,kBAAkB,CAACQ,mBAAmB,CAAChB,WAAW,CAAC;;QAGrD,OAAOa,cAAc,CAACZ,KAAK,CAACD,WAAW,EAAE,CAACe,YAAY,CAAC,CAAC;MAC1D,CAAC;;IAGH,OAAOf,WAAW;EACpB;EAEA,OAAON,iBAAiB;AAC1B,CAAC"}