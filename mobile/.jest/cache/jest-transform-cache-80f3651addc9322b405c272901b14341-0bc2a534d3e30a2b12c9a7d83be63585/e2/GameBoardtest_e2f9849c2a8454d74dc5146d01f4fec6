3ec51d9231e79fdf01a0d1662fa402e3
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var __1 = require("../");
var players = [{
  id: 2,
  plan: 72,
  avatar: 106
}, {
  id: 4,
  plan: 34,
  avatar: 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/'
}];
test('should render the correct number of Gem components based on the players prop', function () {
  var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getAllByTestId = _ref.getAllByTestId;
  var gemComponents = getAllByTestId('gem-container');
  var playerGemImages = getAllByTestId('player-gem-image');
  expect(playerGemImages.length).toEqual(2);
  expect(gemComponents.length).toEqual(72);
});
test('should render player avatars correctly', function () {
  var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(__1.GameBoard, {
      players: players
    })),
    getByTestId = _ref2.getByTestId;
  players.forEach(function (player) {
    var gemImage = getByTestId(`gem-image-${player.id}`);
    expect(gemImage).toBeTruthy();
    if (typeof player.avatar === 'string') {
      expect(gemImage.props.source.uri).toEqual(player.avatar);
    } else if (typeof player.avatar === 'number') {
      expect(gemImage.props.source).toEqual(player.avatar);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiX18xIiwicGxheWVycyIsImlkIiwicGxhbiIsImF2YXRhciIsInRlc3QiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJHYW1lQm9hcmQiLCJnZXRBbGxCeVRlc3RJZCIsImdlbUNvbXBvbmVudHMiLCJwbGF5ZXJHZW1JbWFnZXMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0VxdWFsIiwiX3JlZjIiLCJnZXRCeVRlc3RJZCIsImZvckVhY2giLCJwbGF5ZXIiLCJnZW1JbWFnZSIsInRvQmVUcnV0aHkiLCJwcm9wcyIsInNvdXJjZSIsInVyaSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvR2FtZUJvYXJkL0dhbWVCb2FyZC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAndHlwZXMnXG5cbmltcG9ydCB7IEdhbWVCb2FyZCB9IGZyb20gJy4uLydcblxuY29uc3QgcGxheWVyczogUGxheWVyW10gPSBbXG4gIHtcbiAgICBpZDogMixcbiAgICBwbGFuOiA3MixcbiAgICBhdmF0YXI6IDEwNixcbiAgfSxcbiAge1xuICAgIGlkOiA0LFxuICAgIHBsYW46IDM0LFxuICAgIGF2YXRhcjpcbiAgICAgICdodHRwczovL2JhZmtyZWlmdHJtZm1pbWx2bzI2eGF4ZnZ0MnlwbmpqYWF2cTVtZ25ramxqczZtY3pmZWtpaTRjbXRxLmlwZnMubmZ0c3RvcmFnZS5saW5rLycsXG4gIH0sXG5dXG5cbnRlc3QoJ3Nob3VsZCByZW5kZXIgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIEdlbSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBwbGF5ZXJzIHByb3AnLCAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcig8R2FtZUJvYXJkIHBsYXllcnM9e3BsYXllcnN9IC8+KVxuICBjb25zdCBnZW1Db21wb25lbnRzID0gZ2V0QWxsQnlUZXN0SWQoJ2dlbS1jb250YWluZXInKVxuICBjb25zdCBwbGF5ZXJHZW1JbWFnZXMgPSBnZXRBbGxCeVRlc3RJZCgncGxheWVyLWdlbS1pbWFnZScpXG4gIGV4cGVjdChwbGF5ZXJHZW1JbWFnZXMubGVuZ3RoKS50b0VxdWFsKDIpIC8vINCf0YDQvtCy0LXRgNC60LAg0L3QsCAyINC40LPRgNC+0LrQsFxuICBleHBlY3QoZ2VtQ29tcG9uZW50cy5sZW5ndGgpLnRvRXF1YWwoNzIpIC8vINCf0YDQvtCy0LXRgNC60LAg0L3QsCDQvtCx0YnQtdC1INC60L7Qu9C40YfQtdGB0YLQstC+INC60L7QvNC/0L7QvdC10L3RgtC+0LIgR2VtXG59KVxuXG50ZXN0KCdzaG91bGQgcmVuZGVyIHBsYXllciBhdmF0YXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxHYW1lQm9hcmQgcGxheWVycz17cGxheWVyc30gLz4pXG5cbiAgcGxheWVycy5mb3JFYWNoKChwbGF5ZXIpID0+IHtcbiAgICBjb25zdCBnZW1JbWFnZSA9IGdldEJ5VGVzdElkKGBnZW0taW1hZ2UtJHtwbGF5ZXIuaWR9YClcbiAgICBleHBlY3QoZ2VtSW1hZ2UpLnRvQmVUcnV0aHkoKVxuXG4gICAgaWYgKHR5cGVvZiBwbGF5ZXIuYXZhdGFyID09PSAnc3RyaW5nJykge1xuICAgICAgZXhwZWN0KGdlbUltYWdlLnByb3BzLnNvdXJjZS51cmkpLnRvRXF1YWwocGxheWVyLmF2YXRhcilcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbGF5ZXIuYXZhdGFyID09PSAnbnVtYmVyJykge1xuICAgICAgZXhwZWN0KGdlbUltYWdlLnByb3BzLnNvdXJjZSkudG9FcXVhbChwbGF5ZXIuYXZhdGFyKVxuICAgIH1cbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUdBLElBQUFFLEdBQUEsR0FBQUYsT0FBQTtBQUVBLElBQU1HLE9BQU8sR0FBYSxDQUN4QjtFQUNFQyxFQUFFLEVBQUUsQ0FBQztFQUNMQyxJQUFJLEVBQUUsRUFBRTtFQUNSQyxNQUFNLEVBQUU7Q0FDVCxFQUNEO0VBQ0VGLEVBQUUsRUFBRSxDQUFDO0VBQ0xDLElBQUksRUFBRSxFQUFFO0VBQ1JDLE1BQU0sRUFDSjtDQUNILENBQ0Y7QUFFREMsSUFBSSxDQUFDLDhFQUE4RSxFQUFFLFlBQUs7RUFDeEYsSUFBQUMsSUFBQSxHQUEyQixJQUFBUCxjQUFBLENBQUFRLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1QsR0FBQSxDQUFBVSxTQUFTO01BQUNULE9BQU8sRUFBRUE7SUFBUSxFQUFHLENBQUM7SUFBMURVLGNBQWMsR0FBQUwsSUFBQSxDQUFkSyxjQUFjO0VBQ3RCLElBQU1DLGFBQWEsR0FBR0QsY0FBYyxDQUFDLGVBQWUsQ0FBQztFQUNyRCxJQUFNRSxlQUFlLEdBQUdGLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQztFQUMxREcsTUFBTSxDQUFDRCxlQUFlLENBQUNFLE1BQU0sQ0FBQyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0VBQ3pDRixNQUFNLENBQUNGLGFBQWEsQ0FBQ0csTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxFQUFFLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBRUZYLElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxZQUFLO0VBQ2xELElBQUFZLEtBQUEsR0FBd0IsSUFBQWxCLGNBQUEsQ0FBQVEsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVCxHQUFBLENBQUFVLFNBQVM7TUFBQ1QsT0FBTyxFQUFFQTtJQUFRLEVBQUcsQ0FBQztJQUF2RGlCLFdBQVcsR0FBQUQsS0FBQSxDQUFYQyxXQUFXO0VBRW5CakIsT0FBTyxDQUFDa0IsT0FBTyxDQUFDLFVBQUNDLE1BQU0sRUFBSTtJQUN6QixJQUFNQyxRQUFRLEdBQUdILFdBQVcsQ0FBQyxhQUFhRSxNQUFNLENBQUNsQixFQUFFLEVBQUUsQ0FBQztJQUN0RFksTUFBTSxDQUFDTyxRQUFRLENBQUMsQ0FBQ0MsVUFBVSxFQUFFO0lBRTdCLElBQUksT0FBT0YsTUFBTSxDQUFDaEIsTUFBTSxLQUFLLFFBQVEsRUFBRTtNQUNyQ1UsTUFBTSxDQUFDTyxRQUFRLENBQUNFLEtBQUssQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUMsQ0FBQ1QsT0FBTyxDQUFDSSxNQUFNLENBQUNoQixNQUFNLENBQUM7S0FDekQsTUFBTSxJQUFJLE9BQU9nQixNQUFNLENBQUNoQixNQUFNLEtBQUssUUFBUSxFQUFFO01BQzVDVSxNQUFNLENBQUNPLFFBQVEsQ0FBQ0UsS0FBSyxDQUFDQyxNQUFNLENBQUMsQ0FBQ1IsT0FBTyxDQUFDSSxNQUFNLENBQUNoQixNQUFNLENBQUM7O0VBRXhELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9