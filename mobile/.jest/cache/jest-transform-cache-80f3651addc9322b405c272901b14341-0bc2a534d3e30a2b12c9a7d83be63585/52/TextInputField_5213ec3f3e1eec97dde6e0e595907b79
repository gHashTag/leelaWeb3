11003e0bbb372656b3abbd95d54ad8fd
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextInputField = void 0;
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var components_1 = require("./..");
var cons_1 = require("../../cons");
var react_native_size_matters_1 = require("react-native-size-matters");
var TextInputField = function TextInputField(_ref) {
  var placeholder = _ref.placeholder,
    value = _ref.value,
    onChangeText = _ref.onChangeText,
    _ref$multiline = _ref.multiline,
    multiline = _ref$multiline === void 0 ? false : _ref$multiline,
    inputMode = _ref.inputMode,
    keyboardType = _ref.keyboardType;
  var inputComponent = (0, _jsxRuntime.jsx)(react_native_1.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(react_native_1.TextInput, {
      placeholder: placeholder,
      placeholderTextColor: cons_1.gray,
      multiline: multiline,
      value: value,
      onChangeText: onChangeText,
      style: styles.input,
      inputMode: inputMode,
      keyboardType: keyboardType
    })
  });
  return (0, _jsxRuntime.jsx)(components_1.NeomorphFlexView, {
    viewStyle: styles.card,
    children: inputComponent
  });
};
exports.TextInputField = TextInputField;
var styles = react_native_1.StyleSheet.create({
  card: {
    alignSelf: 'center',
    borderRadius: (0, react_native_size_matters_1.s)(40),
    height: (0, react_native_size_matters_1.ms)(60, 0.9),
    justifyContent: 'center',
    width: (0, react_native_size_matters_1.ms)(230, 0.9)
  },
  container: {
    alignItems: 'center',
    alignSelf: 'center',
    flexDirection: 'row',
    marginHorizontal: 20,
    marginVertical: 10,
    paddingVertical: 10
  },
  input: {
    bottom: 1,
    color: cons_1.gray,
    flex: 1,
    fontSize: 16
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiY29tcG9uZW50c18xIiwiY29uc18xIiwicmVhY3RfbmF0aXZlX3NpemVfbWF0dGVyc18xIiwiVGV4dElucHV0RmllbGQiLCJfcmVmIiwicGxhY2Vob2xkZXIiLCJ2YWx1ZSIsIm9uQ2hhbmdlVGV4dCIsIl9yZWYkbXVsdGlsaW5lIiwibXVsdGlsaW5lIiwiaW5wdXRNb2RlIiwia2V5Ym9hcmRUeXBlIiwiaW5wdXRDb21wb25lbnQiLCJfanN4UnVudGltZSIsImpzeCIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwiVGV4dElucHV0IiwicGxhY2Vob2xkZXJUZXh0Q29sb3IiLCJncmF5IiwiaW5wdXQiLCJOZW9tb3JwaEZsZXhWaWV3Iiwidmlld1N0eWxlIiwiY2FyZCIsImV4cG9ydHMiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiYWxpZ25TZWxmIiwiYm9yZGVyUmFkaXVzIiwicyIsImhlaWdodCIsIm1zIiwianVzdGlmeUNvbnRlbnQiLCJ3aWR0aCIsImFsaWduSXRlbXMiLCJmbGV4RGlyZWN0aW9uIiwibWFyZ2luSG9yaXpvbnRhbCIsIm1hcmdpblZlcnRpY2FsIiwicGFkZGluZ1ZlcnRpY2FsIiwiYm90dG9tIiwiY29sb3IiLCJmbGV4IiwiZm9udFNpemUiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL1RleHRJbnB1dEZpZWxkL1RleHRJbnB1dEZpZWxkLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IFZpZXcsIFRleHRJbnB1dCwgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSdcblxuaW1wb3J0IHsgTmVvbW9ycGhGbGV4VmlldyB9IGZyb20gJ2NvbXBvbmVudHMnXG5pbXBvcnQgeyBncmF5IH0gZnJvbSAnY29ucydcbmltcG9ydCB7IG1zLCBzIH0gZnJvbSAncmVhY3QtbmF0aXZlLXNpemUtbWF0dGVycydcblxuaW50ZXJmYWNlIFRleHRJbnB1dEZpZWxkUHJvcHMge1xuICBwbGFjZWhvbGRlcjogc3RyaW5nXG4gIG11bHRpbGluZT86IGJvb2xlYW5cbiAgdmFsdWU6IHN0cmluZ1xuICBvbkJsdXI6ICgpID0+IHZvaWRcbiAgb25DaGFuZ2VUZXh0OiAodGV4dDogc3RyaW5nKSA9PiB2b2lkXG4gIGlucHV0TW9kZT86XG4gICAgfCAnZGVjaW1hbCdcbiAgICB8ICdlbWFpbCdcbiAgICB8ICdub25lJ1xuICAgIHwgJ251bWVyaWMnXG4gICAgfCAnc2VhcmNoJ1xuICAgIHwgJ3RlbCdcbiAgICB8ICd0ZXh0J1xuICAgIHwgJ3VybCdcbiAga2V5Ym9hcmRUeXBlPzpcbiAgICB8ICdkZWZhdWx0J1xuICAgIHwgJ2VtYWlsLWFkZHJlc3MnXG4gICAgfCAnbnVtZXJpYydcbiAgICB8ICdwaG9uZS1wYWQnXG4gICAgfCAnYXNjaWktY2FwYWJsZSdcbiAgICB8ICdudW1iZXJzLWFuZC1wdW5jdHVhdGlvbidcbiAgICB8ICd1cmwnXG4gICAgfCAnbnVtYmVyLXBhZCdcbiAgICB8ICduYW1lLXBob25lLXBhZCdcbiAgICB8ICdkZWNpbWFsLXBhZCdcbiAgICB8ICd0d2l0dGVyJ1xuICAgIHwgJ3dlYi1zZWFyY2gnXG4gICAgfCAndmlzaWJsZS1wYXNzd29yZCdcbn1cblxuY29uc3QgVGV4dElucHV0RmllbGQ6IFJlYWN0LkZDPFRleHRJbnB1dEZpZWxkUHJvcHM+ID0gKHtcbiAgcGxhY2Vob2xkZXIsXG4gIHZhbHVlLFxuICBvbkNoYW5nZVRleHQsXG4gIG11bHRpbGluZSA9IGZhbHNlLFxuICBpbnB1dE1vZGUsXG4gIGtleWJvYXJkVHlwZSxcbn0pID0+IHtcbiAgY29uc3QgaW5wdXRDb21wb25lbnQgPSAoXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgPFRleHRJbnB1dFxuICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgICAgIHBsYWNlaG9sZGVyVGV4dENvbG9yPXtncmF5fVxuICAgICAgICBtdWx0aWxpbmU9e211bHRpbGluZX1cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBvbkNoYW5nZVRleHQ9e29uQ2hhbmdlVGV4dH1cbiAgICAgICAgc3R5bGU9e3N0eWxlcy5pbnB1dH1cbiAgICAgICAgaW5wdXRNb2RlPXtpbnB1dE1vZGV9XG4gICAgICAgIGtleWJvYXJkVHlwZT17a2V5Ym9hcmRUeXBlfVxuICAgICAgLz5cbiAgICA8L1ZpZXc+XG4gIClcblxuICByZXR1cm4gKFxuICAgIDxOZW9tb3JwaEZsZXhWaWV3IHZpZXdTdHlsZT17c3R5bGVzLmNhcmR9PlxuICAgICAge2lucHV0Q29tcG9uZW50fVxuICAgIDwvTmVvbW9ycGhGbGV4Vmlldz5cbiAgKVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNhcmQ6IHtcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgIGJvcmRlclJhZGl1czogcyg0MCksXG4gICAgaGVpZ2h0OiBtcyg2MCwgMC45KSxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgd2lkdGg6IG1zKDIzMCwgMC45KSxcbiAgfSxcbiAgY29udGFpbmVyOiB7XG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBtYXJnaW5Ib3Jpem9udGFsOiAyMCxcbiAgICBtYXJnaW5WZXJ0aWNhbDogMTAsXG4gICAgcGFkZGluZ1ZlcnRpY2FsOiAxMCxcbiAgfSxcbiAgaW5wdXQ6IHtcbiAgICBib3R0b206IDEsXG4gICAgY29sb3I6IGdyYXksXG4gICAgZmxleDogMSxcbiAgICBmb250U2l6ZTogMTYsXG4gIH0sXG59KVxuXG5leHBvcnQgeyBUZXh0SW5wdXRGaWVsZCB9XG4i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