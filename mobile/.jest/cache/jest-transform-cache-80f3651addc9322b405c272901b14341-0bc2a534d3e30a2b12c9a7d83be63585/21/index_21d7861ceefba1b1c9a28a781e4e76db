b6a9c0b0f4343f9f69946f9c75a20df0
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/GameBoard/index.tsx";
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GameBoard = void 0;
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var react_native_size_matters_1 = require("react-native-size-matters");
var constants_1 = require("../../constants");
var Gem_1 = require("../Gem");
var images_1 = require("./images");
var marginTop = constants_1.H - constants_1.W > 350 ? 20 : 0;
var imageHeight = (0, react_native_size_matters_1.s)(248) + (0, react_native_size_matters_1.s)(32);
var maxImageHeight = (0, react_native_size_matters_1.ms)(248, 0.5) + (0, react_native_size_matters_1.s)(32);
var imageTopMargin = Math.min((0, react_native_size_matters_1.ms)(27, 0.5), (0, react_native_size_matters_1.s)(27));
var curImageHeight = Math.min(maxImageHeight, imageHeight) + imageTopMargin;
var imageWidth = (0, react_native_size_matters_1.s)(279) + (0, react_native_size_matters_1.s)(18);
var maxImageWidth = (0, react_native_size_matters_1.ms)(279, 0.5) + (0, react_native_size_matters_1.s)(18);
var curImageWidth = imageWidth >= maxImageWidth ? maxImageWidth : imageWidth;
var GameBoard = function GameBoard(_ref) {
  var players = _ref.players;
  var scheme = (0, react_native_1.useColorScheme)();
  var playerPositions = (0, react_1.useMemo)(function () {
    var positions = {};
    players.forEach(function (player) {
      positions[player.plan] = {
        id: player.id,
        uri: player.uri
      };
    });
    return positions;
  }, [players]);
  var imgObj = (0, react_1.useMemo)(function () {
    var _images_1$ICONS$find;
    var image = (_images_1$ICONS$find = images_1.ICONS.find(function (x) {
      return x.title === scheme;
    })) == null ? void 0 : _images_1$ICONS$find.path;
    if (image) {
      var _react_native_1$Image = react_native_1.Image.resolveAssetSource(image),
        width = _react_native_1$Image.width,
        height = _react_native_1$Image.height;
      var aspect = width / height;
      return {
        image: image,
        aspect: aspect
      };
    } else {
      return {
        image: '',
        aspect: 1
      };
    }
  }, [scheme]);
  var rows = [[72, 71, 70, 69, 68, 67, 66, 65, 64], [55, 56, 57, 58, 59, 60, 61, 62, 63], [54, 53, 52, 51, 50, 49, 48, 47, 46], [37, 38, 39, 40, 41, 42, 43, 44, 45], [36, 35, 34, 33, 32, 31, 30, 29, 28], [19, 20, 21, 22, 23, 24, 25, 26, 27], [18, 17, 16, 15, 14, 13, 12, 11, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9]];
  return (0, _jsxRuntime.jsxs)(react_native_1.View, {
    style: [styles.imageContainer, {
      width: curImageHeight * imgObj.aspect
    }],
    testID: "gem-container",
    children: [(0, _jsxRuntime.jsx)(react_native_1.Image, {
      source: imgObj.image,
      style: styles.bgImage,
      resizeMode: "cover"
    }), (0, _jsxRuntime.jsx)(react_native_1.View, {
      style: styles.gameBoardContainer,
      children: (0, _jsxRuntime.jsx)(react_native_1.View, {
        style: styles.container,
        children: rows.map(function (a, i) {
          return (0, _jsxRuntime.jsx)(react_native_1.View, {
            style: styles.row,
            children: a.map(function (b, index) {
              return (0, _jsxRuntime.jsx)(react_native_1.View, {
                style: styles.box,
                children: (0, _jsxRuntime.jsx)(Gem_1.Gem, {
                  planNumber: b,
                  player: playerPositions[b]
                })
              }, index);
            })
          }, i);
        })
      })
    })]
  });
};
exports.GameBoard = GameBoard;
var styles = react_native_1.StyleSheet.create({
  container: {
    marginTop: imageTopMargin
  },
  imageContainer: {
    height: curImageHeight,
    alignSelf: 'center',
    alignItems: 'center'
  },
  row: {
    flexDirection: 'row'
  },
  gameBoardContainer: {
    width: curImageWidth,
    height: curImageHeight,
    marginTop: marginTop
  },
  box: {
    width: (0, react_native_size_matters_1.s)(31),
    height: (0, react_native_size_matters_1.s)(31),
    maxHeight: (0, react_native_size_matters_1.ms)(31, 0.5),
    maxWidth: (0, react_native_size_matters_1.ms)(31, 0.5),
    marginVertical: (0, react_native_size_matters_1.s)(2),
    marginHorizontal: (0, react_native_size_matters_1.s)(1),
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: (0, react_native_size_matters_1.s)(31) / 2
  },
  bgImage: {
    width: '100%',
    height: '100%',
    position: 'absolute',
    top: (0, react_native_size_matters_1.mvs)(33, 1.6) - imageTopMargin
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,